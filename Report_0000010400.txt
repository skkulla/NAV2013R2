OBJECT Report 10400 Check Translation Management
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVNA7.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Test Check Translation Management Functions;
               ESM=Probar funciones admin. traducc. cheque;
               FRC=Tester les fonctions de gestion de traduction des chäques;
               ENC=Test Cheque Translation Management Functions];
    OnPreReport=BEGIN
                  MakeTestData;
                  CASE TestLanguage OF
                    TestLanguage::ENU:
                      TestLanguageCode := 1033;
                    TestLanguage::FRC:
                      TestLanguageCode := 3084;
                    TestLanguage::ESM:
                      TestLanguageCode := 2058;
                    TestLanguage::ENC:
                      TestLanguageCode := 4105;
                  END;
                END;

  }
  DATASET
  {
    { 6455;    ;DataItem;PageLoop            ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number)
                                 WHERE(Number=CONST(1)) }

    { 1480004;1;Column  ;TodayFormatted      ;
               SourceExpr=FORMAT(TODAY,0,4) }

    { 1480012;1;Column  ;TestLanguage        ;
               OptionCaptionML=[ENU=ENU,ENC,FRC,ESM;
                                ESM=ENU,ENC,FRC,ESM;
                                FRC=ENU,ENC,FRC,ESM;
                                ENC=ENU,ENC,FRC,ESM];
               OptionString=ENU,ENC,FRC,ESM;
               SourceExpr=TestLanguage }

    { 1480014;1;Column  ;TestCurrencyCode    ;
               SourceExpr=TestCurrencyCode }

    { 1480016;1;Column  ;TestDate            ;
               SourceExpr=TestDate }

    { 1480000;1;Column  ;CheckTransFunctionsCaption;
               SourceExpr=CheckTranslationFunctionsCaptionLbl }

    { 1480003;1;Column  ;TestDateCaption     ;
               SourceExpr=TestDateCaptionLbl }

    { 1480013;1;Column  ;TestLanguageCaption ;
               SourceExpr=TestLanguageCaptionLbl }

    { 1480015;1;Column  ;TestCurrencyCodeCaption;
               SourceExpr=TestCurrencyCodeCaptionLbl }

    { 1480017;1;Column  ;DateToTestCaption   ;
               SourceExpr=DateToTestCaptionLbl }

    { 7894;1   ;DataItem;AmountTestLoop      ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF TestOption = TestOption::"Dates Only" THEN
                                 CurrReport.BREAK;
                               SETRANGE(Number,1,TestNumAmounts);
                             END;

               OnAfterGetRecord=BEGIN
                                  IF NOT FormatNoText(TestAmountText,TestAmount[Number],TestLanguageCode,TestCurrencyCode) THEN
                                    TestAmountText[1] := 'ERROR:  ' + TestAmountText[1];
                                END;
                                 }

    { 1480005;2;Column  ;TestAmountText1     ;
               SourceExpr=TestAmountText[1] }

    { 1480007;2;Column  ;TestAmountText2     ;
               SourceExpr=TestAmountText[2] }

    { 1480006;2;Column  ;AmountInWordsCaption;
               SourceExpr=AmountInWordsCaptionLbl }

    { 2813;1   ;DataItem;DateTestLoop        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               OnPreDataItem=BEGIN
                               IF TestOption = TestOption::"Amounts Only" THEN
                                 CurrReport.BREAK;
                               SETRANGE(Number,1,TestNumDates);
                             END;

               OnAfterGetRecord=BEGIN
                                  TestDateText :=
                                    FormatDate(TestDate,TestDateFormat[Number],TestDateSeparator[Number],TestLanguageCode,TestDateIndicator);
                                END;
                                 }

    { 1480008;2;Column  ;TestDateIndicator   ;
               SourceExpr=TestDateIndicator }

    { 1480010;2;Column  ;TestDateText        ;
               SourceExpr=TestDateText }

    { 1480018;2;Column  ;TestDateSeparatorFormatted;
               SourceExpr=FORMAT(TestDateSeparator[Number]) }

    { 1480009;2;Column  ;TestDateIndicatorCaption;
               SourceExpr=TestDateIndicatorCaptionLbl }

    { 1480011;2;Column  ;TestDateTextCaption ;
               SourceExpr=TestDateTextCaptionLbl }

    { 1480019;2;Column  ;DateSeparatorCaption;
               SourceExpr=DateSeparatorCaptionLbl }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   TestDate := WORKDATE;
                 END;

    }
    CONTROLS
    {
      { 1020001;0;Container ;
                  ContainerType=ContentArea }

      { 1020000;1;Group     ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1480003;2;Field     ;
                  Name=TestOption;
                  CaptionML=[ENU=Test Option;
                             ESM=Opci¢n prueba;
                             FRC=Option de test;
                             ENC=Test Option];
                  OptionCaptionML=[ENU=Both Amounts and Dates,Amounts Only,Dates Only;
                                   ESM=Ambos importes y fechas,s¢lo importes,s¢lo fechas;
                                   FRC=Montants et dates,Montant seulement,Dates seulement;
                                   ENC=Both Amounts and Dates,Amounts Only,Dates Only];
                  SourceExpr=TestOption }

      { 1480000;2;Field     ;
                  Name=TestLanguage;
                  CaptionML=[ENU=Test Language;
                             ESM=Idioma prueba;
                             FRC=Langue de test;
                             ENC=Test Language];
                  OptionCaptionML=[ENU=ENU,ENC,FRC,ESM;
                                   ESM=ENU,ENC,FRC,ESM;
                                   FRC=ENU,ENC,FRC,ESM;
                                   ENC=ENU,ENC,FRC,ESM];
                  SourceExpr=TestLanguage }

      { 1480002;2;Field     ;
                  CaptionML=[ENU=Test Currency Code;
                             ESM=C¢d. divisa prueba;
                             FRC=Code devise de test;
                             ENC=Test Currency Code];
                  SourceExpr=TestCurrencyCode;
                  TableRelation=Currency }

      { 1480006;2;Field     ;
                  CaptionML=[ENU=Date to Test;
                             ESM=Fecha para prueba;
                             FRC=Date Ö tester;
                             ENC=Date to Test];
                  SourceExpr=TestDate }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Currency@1480018 : Record 4;
      GLSetup@1480017 : Record 98;
      EnglishLanguageCode@1480016 : Integer;
      FrenchLanguageCode@1480015 : Integer;
      SpanishLanguageCode@1480014 : Integer;
      CAEnglishLanguageCode@1480013 : Integer;
      LanguageCode@1480012 : Integer;
      CurrencyCode@1480010 : Code[10];
      OnesText@1480009 : ARRAY [30] OF Text[30];
      TensText@1480008 : ARRAY [10] OF Text[30];
      HundredsText@1480007 : ARRAY [10] OF Text[30];
      ExponentText@1480006 : ARRAY [5] OF Text[30];
      HundredText@1480005 : Text[30];
      AndText@1480004 : Text[30];
      ZeroText@1480002 : Text[30];
      CentsText@1480001 : Text[30];
      OneMillionText@1480000 : Text[30];
      Text000@1480080 : TextConst 'ENU=Zero;ESM=Cero;FRC=ZÇro;ENC=Zero';
      Text001@1480079 : TextConst 'ENU=One;ESM=Un;FRC=Un;ENC=One';
      Text002@1480078 : TextConst 'ENU=Two;ESM=Dos;FRC=Deux;ENC=Two';
      Text003@1480077 : TextConst 'ENU=Three;ESM=Tres;FRC=Trois;ENC=Three';
      Text004@1480076 : TextConst 'ENU=Four;ESM=Cuatro;FRC=Quatre;ENC=Four';
      Text005@1480075 : TextConst 'ENU=Five;ESM=Cinco;FRC=Cinq;ENC=Five';
      Text006@1480074 : TextConst 'ENU=Six;ESM=Seis;FRC=Six;ENC=Six';
      Text007@1480073 : TextConst 'ENU=Seven;ESM=Siete;FRC=Sept;ENC=Seven';
      Text008@1480072 : TextConst 'ENU=Eight;ESM=Ocho;FRC=Huit;ENC=Eight';
      Text009@1480071 : TextConst 'ENU=Nine;ESM=Nueve;FRC=Neuf;ENC=Nine';
      Text010@1480070 : TextConst 'ENU=Ten;ESM=Diez;FRC=Dix;ENC=Ten';
      Text011@1480069 : TextConst 'ENU=Eleven;ESM=Once;FRC=Onze;ENC=Eleven';
      Text012@1480068 : TextConst 'ENU=Twelve;ESM=Doce;FRC=Douze;ENC=Twelve';
      Text013@1480067 : TextConst 'ENU=Thirteen;ESM=Trece;FRC=Treize;ENC=Thirteen';
      Text014@1480066 : TextConst 'ENU=Fourteen;ESM=Catorce;FRC=Quatorze;ENC=Fourteen';
      Text015@1480065 : TextConst 'ENU=Fifteen;ESM=Quince;FRC=Quinze;ENC=Fifteen';
      Text016@1480064 : TextConst 'ENU=Sixteen;ESM=Dieciseis;FRC=Seize;ENC=Sixteen';
      Text017@1480063 : TextConst 'ENU=Seventeen;ESM=Diecisiete;FRC=Dix-sept;ENC=Seventeen';
      Text018@1480062 : TextConst 'ENU=Eighteen;ESM=Dieciocho;FRC=Dix-huit;ENC=Eighteen';
      Text019@1480061 : TextConst 'ENU=Nineteen;ESM=Diecinueve;FRC=Dix-neuf;ENC=Nineteen';
      Text020@1480060 : TextConst 'ENU=Twenty;ESM=Veinte;FRC=Vingt;ENC=Twenty';
      Text021@1480059 : TextConst 'ENU=Thirty;ESM=Treinta;FRC=Trente;ENC=Thirty';
      Text022@1480058 : TextConst 'ENU=Forty;ESM=Cuarenta;FRC=Quarante;ENC=Forty';
      Text023@1480057 : TextConst 'ENU=Fifty;ESM=Cincuenta;FRC=Cinquante;ENC=Fifty';
      Text024@1480056 : TextConst 'ENU=Sixty;ESM=Sesenta;FRC=Soixante;ENC=Sixty';
      Text025@1480055 : TextConst 'ENU=Seventy;ESM=Setenta;FRC=Soixante-dix;ENC=Seventy';
      Text026@1480054 : TextConst 'ENU=Eighty;ESM=Ochenta;FRC=Quatre-vingt;ENC=Eighty';
      Text027@1480053 : TextConst 'ENU=Ninety;ESM=Noventa;FRC=Quatre-vingt-dix;ENC=Ninety';
      Text028@1480052 : TextConst 'ENU=Hundred;ESM=Cien;FRC=Cent;ENC=Hundred';
      Text029@1480051 : TextConst 'ENU=and;ESM=y;FRC=et;ENC=and';
      Text031@1480049 : TextConst 'ENU=Thousand;ESM=Mil;FRC=Mille;ENC=Thousand';
      Text032@1480048 : TextConst 'ENU=Million;ESM=Millones;FRC=Million;ENC=Million';
      Text033@1480047 : TextConst 'ENU=Billion;ESM=Mil Millones;FRC=Milliard;ENC=Billion';
      Text035@1480046 : TextConst 'ENU=/100;ESM=/100  M.N.;FRC=/100;ENC=/100';
      Text036@1480045 : TextConst 'ENU=One Million;ESM=Un Millon;FRC=Un million;ENC=One Million';
      Text041@1480044 : TextConst 'ENU=Twenty One;ESM=Veintiun;FRC=Vingt-et-un;ENC=Twenty One';
      Text042@1480043 : TextConst 'ENU=Twenty Two;ESM=Veintidos;FRC=Vingt-deux;ENC=Twenty Two';
      Text043@1480042 : TextConst 'ENU=Twenty Three;ESM=Veintitres;FRC=Vingt-trois;ENC=Twenty Three';
      Text044@1480041 : TextConst 'ENU=Twenty Four;ESM=Veinticuatro;FRC=Vingt-quatre;ENC=Twenty Four';
      Text045@1480040 : TextConst 'ENU=Twenty Five;ESM=Veinticinco;FRC=Vingt-cinq;ENC=Twenty Five';
      Text046@1480039 : TextConst 'ENU=Twenty Six;ESM=Veintiseis;FRC=Vingt-six;ENC=Twenty Six';
      Text047@1480038 : TextConst 'ENU=Twenty Seven;ESM=Veintisiete;FRC=Vingt-sept;ENC=Twenty Seven';
      Text048@1480037 : TextConst 'ENU=Twenty Eight;ESM=Veintiocho;FRC=Vingt-huit;ENC=Twenty Eight';
      Text049@1480036 : TextConst 'ENU=Twenty Nine;ESM=Veintinueve;FRC=Vingt-neuf;ENC=Twenty Nine';
      Text051@1480035 : TextConst 'ENU=One Hundred;ESM=Ciento;FRC=Cent;ENC=One Hundred';
      Text052@1480034 : TextConst 'ENU=Two Hundred;ESM=Doscientos;FRC=Deux cents;ENC=Two Hundred';
      Text053@1480033 : TextConst 'ENU=Three Hundred;ESM=Trescientos;FRC=Trois cents;ENC=Three Hundred';
      Text054@1480032 : TextConst 'ENU=Four Hundred;ESM=Cuatrocientos;FRC=Quatre cents;ENC=Four Hundred';
      Text055@1480031 : TextConst 'ENU=Five Hundred;ESM=Quinientos;FRC=Cinq cents;ENC=Five Hundred';
      Text056@1480030 : TextConst 'ENU=Six Hundred;ESM=Seiscientos;FRC=Six cents;ENC=Six Hundred';
      Text057@1480029 : TextConst 'ENU=Seven Hundred;ESM=Setecientos;FRC=Sept cents;ENC=Seven Hundred';
      Text058@1480028 : TextConst 'ENU=Eight Hundred;ESM=Ochocientos;FRC=Huit cents;ENC=Eight Hundred';
      Text059@1480027 : TextConst 'ENU=Nine Hundred;ESM=Novecientos;FRC=Neuf cents;ENC=Nine Hundred';
      Text100@1480026 : TextConst 'ENU=Language Code %1 is not implemented.;ESM=El c¢d. idioma %1 no est† implementado.;FRC=Le code langue %1 n''est pas implÇmentÇ.;ENC=Language Code %1 is not implemented.';
      Text101@1480025 : TextConst 'ENU=%1 results in a written number that is too long.;ESM=Los resultados de %1 son un n£mero escrito demasiado largo.;FRC=%1 rÇsultats dans un nombre Çcrit qui est trop long.;ENC=%1 results in a written number that is too long.';
      Text102@1480024 : TextConst 'ENU=%1 is too large to convert to text.;ESM=%1 es demasiado grande para convertir a texto.;FRC=%1 est trop grand pour àtre converti en texte.;ENC=%1 is too large to convert to text.';
      Text103@1480023 : TextConst 'ENU=%1 language is not enabled.;ESM=Idioma %1 no est† activado.;FRC=La langue %1 n''est pas activÇe.;ENC=%1 language is not enabled.';
      Text104@1480022 : TextConst 'ENU=****;ESM=****;FRC=****;ENC=****';
      Text107@1480021 : TextConst 'ENU=MM DD YYYY;ESM=MM DD AAAA;FRC=MM JJ AAAA;ENC=MM DD YYYY';
      Text108@1480020 : TextConst 'ENU=DD MM YYYY;ESM=DD MM AAAA;FRC=JJ MM AAAA;ENC=DD MM YYYY';
      Text109@1480019 : TextConst 'ENU=YYYY MM DD;ESM=AAAA MM DD;FRC=AAAA MM JJ;ENC=YYYY MM DD';
      TestLanguage@1480011 : 'ENU,ENC,FRC,ESM';
      TestOption@1480087 : 'Both Amounts and Dates,Amounts Only,Dates Only';
      TestCurrencyCode@1480090 : Code[10];
      TestLanguageCode@1480092 : Integer;
      TestAmount@1480081 : ARRAY [50] OF Decimal;
      TestDateFormat@1480082 : ARRAY [20] OF ' ,MM DD YYYY,DD MM YYYY,YYYY MM DD';
      TestDateSeparator@1480083 : ARRAY [20] OF ' ,-,.,/';
      TestAmountText@1480084 : ARRAY [2] OF Text[80];
      TestDateText@1480085 : Text[30];
      TestDateIndicator@1480086 : Text[30];
      TestNumAmounts@1480088 : Integer;
      TestNumDates@1480089 : Integer;
      TestDate@1480091 : Date;
      Text110@1020000 : TextConst 'ENU=US dollars;ESM=Pesos;FRC=Dollars US;ENC=CA Dollars';
      Text111@1020001 : TextConst 'ENU=Mexican pesos;ESM=Pesos mexicanos;FRC=Pesos mexicains;ENC=Mexican pesos';
      Text112@1020002 : TextConst 'ENU=Canadian dollars;ESM=D¢lares canadienses;FRC=Dollars canadiens;ENC=Canadian dollars';
      CheckTranslationFunctionsCaptionLbl@2577 : TextConst 'ENU=Test of Check Translation Functions;ESM=Funciones de traducci¢n prueba de cheque;FRC=Test des fonctions de traduction des chäques;ENC=Test of Check Translation Functions';
      TestDateCaptionLbl@6157 : TextConst 'ENU=Test Date;ESM=Fecha prueba;FRC=Date de test;ENC=Test Date';
      TestLanguageCaptionLbl@9754 : TextConst 'ENU=Test Language;ESM=Idioma prueba;FRC=Langue de test;ENC=Test Language';
      TestCurrencyCodeCaptionLbl@1803 : TextConst 'ENU=Test Currency Code;ESM=C¢d. divisa prueba;FRC=Code devise de test;ENC=Test Currency Code';
      DateToTestCaptionLbl@5951 : TextConst 'ENU=Date to Test;ESM=Fecha para prueba;FRC=Date Ö tester;ENC=Date to Test';
      NumberAmountCaptionLbl@7887 : TextConst 'ENU=Numeric Amount;ESM=Importe numÇrico;FRC=Montant numÇrique;ENC=Numeric Amount';
      AmountInWordsCaptionLbl@4501 : TextConst 'ENU=Amount In Words;ESM=Importe en palabras;FRC=Montant en lettres;ENC=Amount In Words';
      TestDateIndicatorCaptionLbl@7096 : TextConst 'ENU=Check Date Indicator;ESM=Comprobar indicador fecha;FRC=Indicateur de date de chäque;ENC=Cheque Date Indicator';
      TestDateTextCaptionLbl@8336 : TextConst 'ENU=Check Date;ESM=Fecha cheque;FRC=Date du chäque;ENC=Cheque Date';
      DateSeparatorCaptionLbl@5267 : TextConst 'ENU=Check Date Separator;ESM=Comprobar separador fecha;FRC=VÇrifier sÇparateur de dates;ENC=Cheque Date Separator';

    PROCEDURE FormatNoText@1480000(VAR NoText@1480002 : ARRAY [2] OF Text[80];No@1480001 : Decimal;NewLanguageCode@1480003 : Integer;NewCurrencyCode@1480000 : Code[10]) Result : Boolean;
    BEGIN
      SetObjectLanguage(NewLanguageCode);

      InitTextVariable;
      GLSetup.GET;
      GLSetup.TESTFIELD("LCY Code");
      CurrencyCode := NewCurrencyCode;
      IF CurrencyCode = '' THEN BEGIN
        Currency.INIT;
        Currency.Code := GLSetup."LCY Code";
        CASE GLSetup."LCY Code" OF
          'USD':
            Currency.Description := Text110;
          'MXP':
            Currency.Description := Text111;
          'CAD':
            Currency.Description := Text112;
        END;
      END ELSE
        IF NOT Currency.GET(CurrencyCode) THEN
          CLEAR(Currency);
      CLEAR(NoText);

      IF No < 1000000000000.0 THEN
        CASE LanguageCode OF
          EnglishLanguageCode,CAEnglishLanguageCode:
            Result := FormatNoTextENU(NoText,No);
          SpanishLanguageCode:
            Result := FormatNoTextESM(NoText,No);
          FrenchLanguageCode:
            Result := FormatNoTextFRC(NoText,No);
          ELSE BEGIN
            NoText[1] := STRSUBSTNO(Text100,LanguageCode);
            Result := FALSE;
          END;
        END
      ELSE BEGIN
        NoText[1] := STRSUBSTNO(Text102,No);
        Result := FALSE;
      END;
    END;

    LOCAL PROCEDURE SetObjectLanguage@1480005(NewLanguageCode@1480000 : Integer);
    VAR
      WindowsLang@1480001 : Record 2000000045;
    BEGIN
      EnglishLanguageCode := 1033;
      FrenchLanguageCode := 3084;
      SpanishLanguageCode := 2058;
      CAEnglishLanguageCode := 4105;

      WindowsLang.GET(NewLanguageCode);
      IF NOT WindowsLang."Globally Enabled" THEN
        ERROR(Text103,WindowsLang.Name);
      LanguageCode := NewLanguageCode;
      CurrReport.LANGUAGE(LanguageCode);
    END;

    LOCAL PROCEDURE InitTextVariable@5();
    BEGIN
      OnesText[1] := Text001;
      OnesText[2] := Text002;
      OnesText[3] := Text003;
      OnesText[4] := Text004;
      OnesText[5] := Text005;
      OnesText[6] := Text006;
      OnesText[7] := Text007;
      OnesText[8] := Text008;
      OnesText[9] := Text009;
      OnesText[10] := Text010;
      OnesText[11] := Text011;
      OnesText[12] := Text012;
      OnesText[13] := Text013;
      OnesText[14] := Text014;
      OnesText[15] := Text015;
      OnesText[16] := Text016;
      OnesText[17] := Text017;
      OnesText[18] := Text018;
      OnesText[19] := Text019;
      OnesText[20] := Text020;
      OnesText[21] := Text041;
      OnesText[22] := Text042;
      OnesText[23] := Text043;
      OnesText[24] := Text044;
      OnesText[25] := Text045;
      OnesText[26] := Text046;
      OnesText[27] := Text047;
      OnesText[28] := Text048;
      OnesText[29] := Text049;

      TensText[1] := Text010;
      TensText[2] := Text020;
      TensText[3] := Text021;
      TensText[4] := Text022;
      TensText[5] := Text023;
      TensText[6] := Text024;
      TensText[7] := Text025;
      TensText[8] := Text026;
      TensText[9] := Text027;

      HundredsText[1] := Text051;
      HundredsText[2] := Text052;
      HundredsText[3] := Text053;
      HundredsText[4] := Text054;
      HundredsText[5] := Text055;
      HundredsText[6] := Text056;
      HundredsText[7] := Text057;
      HundredsText[8] := Text058;
      HundredsText[9] := Text059;

      ExponentText[1] := '';
      ExponentText[2] := Text031;
      ExponentText[3] := Text032;
      ExponentText[4] := Text033;

      HundredText := Text028;
      AndText := Text029;
      ZeroText := Text000;
      CentsText := Text035;
      OneMillionText := Text036;
    END;

    LOCAL PROCEDURE AddToNoText@2(VAR NoText@1000 : ARRAY [2] OF Text[80];VAR NoTextIndex@1001 : Integer;VAR PrintExponent@1002 : Boolean;AddText@1003 : Text[40];Divider@1480000 : Text[1]) : Boolean;
    BEGIN
      IF NoTextIndex > ARRAYLEN(NoText) THEN
        EXIT(FALSE);
      PrintExponent := TRUE;

      WHILE STRLEN(NoText[NoTextIndex] + ' ' + AddText) > MAXSTRLEN(NoText[1]) DO BEGIN
        NoTextIndex := NoTextIndex + 1;
        IF NoTextIndex > ARRAYLEN(NoText) THEN BEGIN
          NoText[ARRAYLEN(NoText)] := STRSUBSTNO(Text101,AddText);
          EXIT(FALSE);
        END;
      END;

      CASE LanguageCode OF
        EnglishLanguageCode:
          IF NoText[NoTextIndex] = Text104 THEN
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + UPPERCASE(AddText),'<')
          ELSE
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + Divider + UPPERCASE(AddText),'<');
        SpanishLanguageCode:
          IF NoText[NoTextIndex] = Text104 THEN
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + UPPERCASE(AddText),'<')
          ELSE
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + Divider + UPPERCASE(AddText),'<');
        CAEnglishLanguageCode:
          IF NoText[NoTextIndex] = Text104 THEN
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + AddText,'<')
          ELSE
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + Divider + AddText,'<');
        FrenchLanguageCode:
          IF NoText[NoTextIndex] = Text104 THEN
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + AddText,'<')
          ELSE
            NoText[NoTextIndex] := DELCHR(NoText[NoTextIndex] + Divider + LOWERCASE(AddText),'<');
      END;

      EXIT(TRUE);
    END;

    PROCEDURE FormatDate@1480007(Date@1480000 : Date;DateFormat@1480001 : ' ,MM DD YYYY,DD MM YYYY,YYYY MM DD';DateSeparator@1480002 : ' ,-,.,/';NewLanguageCode@1480004 : Integer;VAR DateIndicator@1480003 : Text[10]) ChequeDate : Text[30];
    BEGIN
      SetObjectLanguage(NewLanguageCode);

      CASE DateFormat OF
        DateFormat::"MM DD YYYY":
          BEGIN
            DateIndicator := Text107;
            CASE DateSeparator OF
              0:
                ChequeDate := FORMAT(Date,0,'<Month,2> <Day,2> <Year4>');
              1:
                ChequeDate := FORMAT(Date,0,'<Month,2>-<Day,2>-<Year4>');
              2:
                ChequeDate := FORMAT(Date,0,'<Month,2>.<Day,2>.<Year4>');
              3:
                ChequeDate := FORMAT(Date,0,'<Month,2>/<Day,2>/<Year4>');
            END;
          END;
        DateFormat::"DD MM YYYY":
          BEGIN
            DateIndicator := Text108;
            CASE DateSeparator OF
              0:
                ChequeDate := FORMAT(Date,0,'<Day,2> <Month,2> <Year4>');
              1:
                ChequeDate := FORMAT(Date,0,'<Day,2>-<Month,2>-<Year4>');
              2:
                ChequeDate := FORMAT(Date,0,'<Day,2>.<Month,2>.<Year4>');
              3:
                ChequeDate := FORMAT(Date,0,'<Day,2>/<Month,2>/<Year4>');
            END;
          END;
        DateFormat::"YYYY MM DD":
          BEGIN
            DateIndicator := Text109;
            CASE DateSeparator OF
              0:
                ChequeDate := FORMAT(Date,0,'<Year4> <Month,2> <Day,2>');
              1:
                ChequeDate := FORMAT(Date,0,'<Year4>-<Month,2>-<Day,2>');
              2:
                ChequeDate := FORMAT(Date,0,'<Year4>.<Month,2>.<Day,2>');
              3:
                ChequeDate := FORMAT(Date,0,'<Year4>/<Month,2>/<Day,2>');
            END;
          END;
        ELSE
          BEGIN
          DateIndicator := '';
          ChequeDate := FORMAT(Date,0,4);
        END;
      END;
    END;

    LOCAL PROCEDURE FormatNoTextENU@1(VAR NoText@1000 : ARRAY [2] OF Text[80];No@1001 : Decimal) : Boolean;
    VAR
      PrintExponent@1003 : Boolean;
      Ones@1004 : Integer;
      Tens@1005 : Integer;
      Hundreds@1006 : Integer;
      Exponent@1007 : Integer;
      NoTextIndex@1008 : Integer;
    BEGIN
      NoTextIndex := 1;
      NoText[1] := Text104;

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,ZeroText,' ')
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds],' ');
            AddToNoText(NoText,NoTextIndex,PrintExponent,HundredText,' ');
          END;
          IF Tens >= 2 THEN BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens],' ');
            IF Ones > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],' ');
          END ELSE
            IF (Tens * 10 + Ones) > 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones],' ');
          IF PrintExponent AND (Exponent > 1) THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent],' ');
          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      IF LanguageCode = CAEnglishLanguageCode THEN BEGIN
        AddToNoText(NoText,NoTextIndex,PrintExponent,Currency.Description,' ');
        AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
        EXIT(AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100) + CentsText,' '));
      END;
      AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
      AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100) + CentsText,' ');
      EXIT(AddToNoText(NoText,NoTextIndex,PrintExponent,Currency.Description,' '));
    END;

    LOCAL PROCEDURE FormatNoTextESM@1480001(VAR NoText@1000 : ARRAY [2] OF Text[80];No@1001 : Decimal) : Boolean;
    VAR
      PrintExponent@1003 : Boolean;
      Ones@1004 : Integer;
      Tens@1005 : Integer;
      Hundreds@1006 : Integer;
      Exponent@1007 : Integer;
      NoTextIndex@1008 : Integer;
    BEGIN
      NoTextIndex := 1;
      NoText[1] := Text104;

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,ZeroText,' ')
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;
          IF Hundreds > 0 THEN BEGIN
            IF (Hundreds = 1) AND (Tens = 0) AND (Ones = 0) THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,HundredText,' ')
            ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,HundredsText[Hundreds],' ');
          END;
          CASE Tens OF
            0:
              IF (Hundreds = 0) AND (Ones = 1) AND (Exponent > 1) THEN
                PrintExponent := TRUE
              ELSE
                IF Ones > 0 THEN
                  AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],' ');
            1,2:
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones],' ');
            ELSE BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens],' ');
              IF Ones <> 0 THEN BEGIN
                AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
                AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],' ');
              END;
            END;
          END;
          IF PrintExponent AND (Exponent > 1) THEN BEGIN
            IF (Hundreds = 0) AND (Tens = 0) AND (Ones = 1) AND (Exponent = 3) THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OneMillionText,' ')
            ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent],' ');
          END;
          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Currency.Description,' ');
      EXIT(AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100) + CentsText,' '));
    END;

    LOCAL PROCEDURE FormatNoTextFRC@1480002(VAR NoText@1220000 : ARRAY [2] OF Text[80];No@1220001 : Decimal) : Boolean;
    VAR
      PrintExponent@1480003 : Boolean;
      Ones@1480004 : Integer;
      Tens@1480005 : Integer;
      Hundreds@1480006 : Integer;
      Exponent@1480007 : Integer;
      NoTextIndex@1480008 : Integer;
    BEGIN
      NoTextIndex := 1;
      NoText[1] := Text104;

      IF No < 1 THEN
        AddToNoText(NoText,NoTextIndex,PrintExponent,ZeroText,' ')
      ELSE
        FOR Exponent := 4 DOWNTO 1 DO BEGIN
          PrintExponent := FALSE;
          Ones := No DIV POWER(1000,Exponent - 1);
          Hundreds := Ones DIV 100;
          Tens := (Ones MOD 100) DIV 10;
          Ones := Ones MOD 10;

          IF Hundreds = 1 THEN
            AddToNoText(NoText,NoTextIndex,PrintExponent,HundredText,' ')
          ELSE BEGIN
            IF Hundreds > 1 THEN BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Hundreds],' ');
              IF (Tens * 10 + Ones) = 0 THEN
                AddToNoText(NoText,NoTextIndex,PrintExponent,HundredText + 's',' ')
              ELSE
                AddToNoText(NoText,NoTextIndex,PrintExponent,HundredText,' ');
            END;
          END;

          FormatTensFRC(NoText,NoTextIndex,PrintExponent,Exponent,Hundreds,Tens,Ones);

          IF PrintExponent AND (Exponent > 1) THEN
            IF ((Hundreds * 100 + Tens * 10 + Ones) > 1) AND (Exponent <> 2) THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent] + 's',' ')
            ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,ExponentText[Exponent],' ');

          No := No - (Hundreds * 100 + Tens * 10 + Ones) * POWER(1000,Exponent - 1);
        END;

      AddToNoText(NoText,NoTextIndex,PrintExponent,Currency.Description,' ');
      AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
      EXIT(AddToNoText(NoText,NoTextIndex,PrintExponent,FORMAT(No * 100,2) + CentsText,' '));
    END;

    LOCAL PROCEDURE FormatTensFRC@1480009(VAR NoText@1220000 : ARRAY [2] OF Text[80];VAR NoTextIndex@1220001 : Integer;VAR PrintExponent@1120002 : Boolean;Exponent@1220003 : Integer;Hundreds@1220004 : Integer;Tens@1120005 : Integer;Ones@1120006 : Integer);
    BEGIN
      CASE Tens OF
        9:
          BEGIN
            IF Ones = 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[9] + 's',' ')
            ELSE BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[8],' ');
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones + 10],'-');
            END;
          END;
        8:
          BEGIN
            IF Ones = 0 THEN
              AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[8] + 's',' ')
            ELSE BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[8],' ');
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],'-');
            END;
          END;
        7:
          BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[6],' ');
            IF Ones = 1 THEN BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones + 10],' ');
            END ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones + 10],'-');
          END;
        2:
          BEGIN
            AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[2],' ');
            IF Ones > 0 THEN BEGIN
              IF Ones = 1 THEN BEGIN
                AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
                AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],' ');
              END ELSE
                AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],'-');
            END;
          END;
        1:
          AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Tens * 10 + Ones],' ');
        0:
          BEGIN
            IF Ones > 0 THEN
              IF (Ones = 1) AND (Hundreds < 1) AND (Exponent = 2) THEN
                PrintExponent := TRUE
              ELSE
                AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],' ');
          END;
        ELSE BEGIN
          AddToNoText(NoText,NoTextIndex,PrintExponent,TensText[Tens],' ');
          IF Ones > 0 THEN BEGIN
            IF Ones = 1 THEN BEGIN
              AddToNoText(NoText,NoTextIndex,PrintExponent,AndText,' ');
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],' ');
            END ELSE
              AddToNoText(NoText,NoTextIndex,PrintExponent,OnesText[Ones],'-');
          END;
        END;
      END;
    END;

    PROCEDURE MakeTestData@1480004();
    VAR
      i@1480000 : Integer;
      j@1480001 : Integer;
    BEGIN
      TestAmount[1] := 293.38;
      TestAmount[2] := 80;
      TestAmount[3] := 100;
      TestAmount[4] := 99.45;
      TestAmount[5] := 1266;
      TestAmount[6] := 1399121.38;
      TestAmount[7] := 185.38;
      TestAmount[8] := 680.33;
      TestAmount[9] := 80.99;
      TestAmount[10] := 200.66;
      TestAmount[11] := 238.27;
      TestAmount[12] := 80765.56;
      TestAmount[13] := 1000.78;
      TestAmount[14] := 2980.32;
      TestAmount[15] := 1301476.89;
      TestAmount[16] := 2000000.38;
      TestAmount[17] := 345497.88;
      TestAmount[18] := 1000065;
      TestAmount[19] := 1500300999.38;
      TestAmount[20] := 3000000000.0;
      TestAmount[21] := 1001.99;
      TestAmount[22] := 88;
      TestAmount[23] := 121;
      TestAmount[24] := 331;
      TestAmount[25] := 3341;
      TestAmount[26] := 1051;
      TestAmount[27] := 1000061;
      TestAmount[28] := 81;
      TestAmount[29] := 11;
      TestAmount[30] := 71;
      TestAmount[31] := 91;
      TestAmount[32] := 0;
      TestAmount[33] := 1;
      TestAmount[34] := 0.99;
      TestAmount[35] := 1.23;
      TestAmount[36] := 12.34;
      TestAmount[37] := 123.45;
      TestAmount[38] := 1234.56;
      TestAmount[39] := 12345.67;
      TestAmount[40] := 123456.78;
      TestAmount[41] := 1234567.89;
      TestAmount[42] := 12345678.9;
      TestAmount[43] := 123456789.01;
      TestAmount[44] := 1234567890.12;
      TestAmount[45] := 987654321098.76;
      TestAmount[46] := 9999999999.0;
      TestAmount[47] := 1000;
      TestNumAmounts := 47;

      TestNumDates := 0;
      FOR i := 0 TO 3 DO
        FOR j := 0 TO 3 DO BEGIN
          TestNumDates := TestNumDates + 1;
          TestDateFormat[TestNumDates] := i;
          TestDateSeparator[TestNumDates] := j;
        END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
    <?xml version="1.0" encoding="utf-8"?>
<Report xmlns:rd="http://schemas.microsoft.com/SQLServer/reporting/reportdesigner" xmlns="http://schemas.microsoft.com/sqlserver/reporting/2010/01/reportdefinition">
  <AutoRefresh>0</AutoRefresh>
  <DataSources>
    <DataSource Name="DataSource">
      <ConnectionProperties>
        <DataProvider>SQL</DataProvider>
        <ConnectString />
      </ConnectionProperties>
      <rd:SecurityType>None</rd:SecurityType>
      <rd:DataSourceID>de3b92c3-d515-48f9-b269-b3cb6799818b</rd:DataSourceID>
    </DataSource>
  </DataSources>
  <DataSets>
    <DataSet Name="DataSet_Result">
      <Query>
        <DataSourceName>DataSource</DataSourceName>
        <CommandText />
      </Query>
      <Fields>
        <Field Name="TodayFormatted">
          <DataField>TodayFormatted</DataField>
        </Field>
        <Field Name="TestLanguage">
          <DataField>TestLanguage</DataField>
        </Field>
        <Field Name="TestCurrencyCode">
          <DataField>TestCurrencyCode</DataField>
        </Field>
        <Field Name="TestDate">
          <DataField>TestDate</DataField>
        </Field>
        <Field Name="CheckTransFunctionsCaption">
          <DataField>CheckTransFunctionsCaption</DataField>
        </Field>
        <Field Name="TestDateCaption">
          <DataField>TestDateCaption</DataField>
        </Field>
        <Field Name="TestLanguageCaption">
          <DataField>TestLanguageCaption</DataField>
        </Field>
        <Field Name="TestCurrencyCodeCaption">
          <DataField>TestCurrencyCodeCaption</DataField>
        </Field>
        <Field Name="DateToTestCaption">
          <DataField>DateToTestCaption</DataField>
        </Field>
        <Field Name="TestAmountText1">
          <DataField>TestAmountText1</DataField>
        </Field>
        <Field Name="TestAmountText2">
          <DataField>TestAmountText2</DataField>
        </Field>
        <Field Name="AmountInWordsCaption">
          <DataField>AmountInWordsCaption</DataField>
        </Field>
        <Field Name="TestDateIndicator">
          <DataField>TestDateIndicator</DataField>
        </Field>
        <Field Name="TestDateText">
          <DataField>TestDateText</DataField>
        </Field>
        <Field Name="TestDateSeparatorFormatted">
          <DataField>TestDateSeparatorFormatted</DataField>
        </Field>
        <Field Name="TestDateIndicatorCaption">
          <DataField>TestDateIndicatorCaption</DataField>
        </Field>
        <Field Name="TestDateTextCaption">
          <DataField>TestDateTextCaption</DataField>
        </Field>
        <Field Name="DateSeparatorCaption">
          <DataField>DateSeparatorCaption</DataField>
        </Field>
      </Fields>
      <rd:DataSetInfo>
        <rd:DataSetName>DataSet</rd:DataSetName>
        <rd:SchemaPath>Report.xsd</rd:SchemaPath>
        <rd:TableName>Result</rd:TableName>
      </rd:DataSetInfo>
    </DataSet>
  </DataSets>
  <ReportSections>
    <ReportSection>
      <Body>
        <ReportItems>
          <Textbox Name="TestCurrencyCodeCaption">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TestCurrencyCodeCaption.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Top>0.49961in</Top>
            <Left>0.11811in</Left>
            <Height>0.16654in</Height>
            <Width>1.29921in</Width>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="TestCurrencyCode">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TestCurrencyCode.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Top>0.49961in</Top>
            <Left>1.46063in</Left>
            <Height>0.16654in</Height>
            <Width>0.76772in</Width>
            <ZIndex>1</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="TestDate">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TestDate.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style>
                  <TextAlign>Left</TextAlign>
                </Style>
              </Paragraph>
            </Paragraphs>
            <Top>0.66614in</Top>
            <Left>1.46063in</Left>
            <Height>0.16654in</Height>
            <Width>2.71563in</Width>
            <ZIndex>2</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Tablix Name="Table1">
            <TablixBody>
              <TablixColumns>
                <TablixColumn>
                  <Width>0.94488in</Width>
                </TablixColumn>
                <TablixColumn>
                  <Width>0.59055in</Width>
                </TablixColumn>
                <TablixColumn>
                  <Width>0.88238in</Width>
                </TablixColumn>
              </TablixColumns>
              <TablixRows>
                <TablixRow>
                  <Height>0.33307in</Height>
                  <TablixCells>
                    <TablixCell>
                      <CellContents>
                        <Textbox Name="TestDateIndicatorCaption">
                          <CanGrow>true</CanGrow>
                          <KeepTogether>true</KeepTogether>
                          <Paragraphs>
                            <Paragraph>
                              <TextRuns>
                                <TextRun>
                                  <Value>=Fields!TestDateIndicatorCaption.Value</Value>
                                  <Style>
                                    <FontSize>7pt</FontSize>
                                    <FontWeight>Bold</FontWeight>
                                  </Style>
                                </TextRun>
                              </TextRuns>
                              <Style />
                            </Paragraph>
                          </Paragraphs>
                          <Style>
                            <VerticalAlign>Bottom</VerticalAlign>
                            <PaddingLeft>2pt</PaddingLeft>
                            <PaddingRight>0.02953in</PaddingRight>
                            <PaddingTop>2pt</PaddingTop>
                            <PaddingBottom>2pt</PaddingBottom>
                          </Style>
                        </Textbox>
                      </CellContents>
                    </TablixCell>
                    <TablixCell>
                      <CellContents>
                        <Textbox Name="FORMAT_TestDateSeparator_Number__Caption">
                          <CanGrow>true</CanGrow>
                          <KeepTogether>true</KeepTogether>
                          <Paragraphs>
                            <Paragraph>
                              <TextRuns>
                                <TextRun>
                                  <Value>=Fields!DateSeparatorCaption.Value</Value>
                                  <Style>
                                    <FontSize>7pt</FontSize>
                                    <FontWeight>Bold</FontWeight>
                                  </Style>
                                </TextRun>
                              </TextRuns>
                              <Style />
                            </Paragraph>
                          </Paragraphs>
                          <Style>
                            <VerticalAlign>Bottom</VerticalAlign>
                            <PaddingLeft>0.02953in</PaddingLeft>
                            <PaddingRight>0.02953in</PaddingRight>
                            <PaddingTop>2pt</PaddingTop>
                            <PaddingBottom>2pt</PaddingBottom>
                          </Style>
                        </Textbox>
                      </CellContents>
                    </TablixCell>
                    <TablixCell>
                      <CellContents>
                        <Textbox Name="TestDateTextCaption">
                          <CanGrow>true</CanGrow>
                          <KeepTogether>true</KeepTogether>
                          <Paragraphs>
                            <Paragraph>
                              <TextRuns>
                                <TextRun>
                                  <Value>=Fields!TestDateTextCaption.Value</Value>
                                  <Style>
                                    <FontSize>7pt</FontSize>
                                    <FontWeight>Bold</FontWeight>
                                  </Style>
                                </TextRun>
                              </TextRuns>
                              <Style />
                            </Paragraph>
                          </Paragraphs>
                          <Style>
                            <VerticalAlign>Bottom</VerticalAlign>
                            <PaddingLeft>0.02953in</PaddingLeft>
                            <PaddingRight>2pt</PaddingRight>
                            <PaddingTop>2pt</PaddingTop>
                            <PaddingBottom>2pt</PaddingBottom>
                          </Style>
                        </Textbox>
                      </CellContents>
                    </TablixCell>
                  </TablixCells>
                </TablixRow>
                <TablixRow>
                  <Height>0.16654in</Height>
                  <TablixCells>
                    <TablixCell>
                      <CellContents>
                        <Textbox Name="TestDateIndicator">
                          <KeepTogether>true</KeepTogether>
                          <Paragraphs>
                            <Paragraph>
                              <TextRuns>
                                <TextRun>
                                  <Value>=Fields!TestDateIndicator.Value</Value>
                                  <Style>
                                    <FontSize>7pt</FontSize>
                                  </Style>
                                </TextRun>
                              </TextRuns>
                              <Style />
                            </Paragraph>
                          </Paragraphs>
                          <Style>
                            <VerticalAlign>Middle</VerticalAlign>
                            <PaddingLeft>2pt</PaddingLeft>
                            <PaddingRight>0.02953in</PaddingRight>
                            <PaddingTop>2pt</PaddingTop>
                            <PaddingBottom>2pt</PaddingBottom>
                          </Style>
                        </Textbox>
                      </CellContents>
                    </TablixCell>
                    <TablixCell>
                      <CellContents>
                        <Textbox Name="FORMAT_TestDateSeparator_Number__">
                          <KeepTogether>true</KeepTogether>
                          <Paragraphs>
                            <Paragraph>
                              <TextRuns>
                                <TextRun>
                                  <Value>=Fields!TestDateSeparatorFormatted.Value</Value>
                                  <Style>
                                    <FontSize>7pt</FontSize>
                                  </Style>
                                </TextRun>
                              </TextRuns>
                              <Style>
                                <TextAlign>Center</TextAlign>
                              </Style>
                            </Paragraph>
                          </Paragraphs>
                          <Style>
                            <VerticalAlign>Middle</VerticalAlign>
                            <PaddingLeft>0.02953in</PaddingLeft>
                            <PaddingRight>0.02953in</PaddingRight>
                            <PaddingTop>2pt</PaddingTop>
                            <PaddingBottom>2pt</PaddingBottom>
                          </Style>
                        </Textbox>
                      </CellContents>
                    </TablixCell>
                    <TablixCell>
                      <CellContents>
                        <Textbox Name="TestDateText">
                          <KeepTogether>true</KeepTogether>
                          <Paragraphs>
                            <Paragraph>
                              <TextRuns>
                                <TextRun>
                                  <Value>=Fields!TestDateText.Value</Value>
                                  <Style>
                                    <FontSize>7pt</FontSize>
                                  </Style>
                                </TextRun>
                              </TextRuns>
                              <Style />
                            </Paragraph>
                          </Paragraphs>
                          <Style>
                            <VerticalAlign>Middle</VerticalAlign>
                            <PaddingLeft>0.02953in</PaddingLeft>
                            <PaddingRight>2pt</PaddingRight>
                            <PaddingTop>2pt</PaddingTop>
                            <PaddingBottom>2pt</PaddingBottom>
                          </Style>
                        </Textbox>
                      </CellContents>
                    </TablixCell>
                  </TablixCells>
                </TablixRow>
              </TablixRows>
            </TablixBody>
            <TablixColumnHierarchy>
              <TablixMembers>
                <TablixMember />
                <TablixMember />
                <TablixMember />
              </TablixMembers>
            </TablixColumnHierarchy>
            <TablixRowHierarchy>
              <TablixMembers>
                <TablixMember>
                  <KeepWithGroup>After</KeepWithGroup>
                  <KeepTogether>true</KeepTogether>
                </TablixMember>
                <TablixMember>
                  <Group Name="Table1_Details_Group">
                    <DataElementName>Detail</DataElementName>
                  </Group>
                  <TablixMembers>
                    <TablixMember />
                  </TablixMembers>
                  <DataElementName>Detail_Collection</DataElementName>
                  <DataElementOutput>Output</DataElementOutput>
                  <KeepTogether>true</KeepTogether>
                </TablixMember>
              </TablixMembers>
            </TablixRowHierarchy>
            <DataSetName>DataSet_Result</DataSetName>
            <Top>0.99921in</Top>
            <Height>0.49961in</Height>
            <Width>2.41781in</Width>
            <ZIndex>3</ZIndex>
            <Style />
          </Tablix>
          <Textbox Name="TestDateCaption">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!DateToTestCaption.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Top>0.66614in</Top>
            <Left>0.11811in</Left>
            <Height>0.16654in</Height>
            <Width>1.29921in</Width>
            <ZIndex>4</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="FORMAT_TODAY_0_4_Caption">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TestDateCaption.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                      <FontWeight>Bold</FontWeight>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Left>5.01969in</Left>
            <Height>0.16654in</Height>
            <Width>0.82677in</Width>
            <ZIndex>5</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="Test_of_Check_Translation_FunctionsCaption">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!CheckTransFunctionsCaption.Value</Value>
                    <Style>
                      <FontSize>9pt</FontSize>
                      <FontWeight>Bold</FontWeight>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Height>0.16654in</Height>
            <Width>2.59843in</Width>
            <ZIndex>6</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="FORMAT_TODAY_0_4_">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TodayFormatted.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                      <FontWeight>Bold</FontWeight>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Left>5.90551in</Left>
            <Height>0.16654in</Height>
            <Width>1.24016in</Width>
            <ZIndex>7</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="TestLanguageCaption">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TestLanguageCaption.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Top>0.33307in</Top>
            <Left>0.11811in</Left>
            <Height>0.16654in</Height>
            <Width>1.29921in</Width>
            <ZIndex>8</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
          <Textbox Name="TestLanguage">
            <KeepTogether>true</KeepTogether>
            <Paragraphs>
              <Paragraph>
                <TextRuns>
                  <TextRun>
                    <Value>=Fields!TestLanguage.Value</Value>
                    <Style>
                      <FontSize>8pt</FontSize>
                    </Style>
                  </TextRun>
                </TextRuns>
                <Style />
              </Paragraph>
            </Paragraphs>
            <Top>0.33307in</Top>
            <Left>1.46063in</Left>
            <Height>0.16654in</Height>
            <Width>0.76772in</Width>
            <ZIndex>9</ZIndex>
            <Style>
              <VerticalAlign>Middle</VerticalAlign>
            </Style>
          </Textbox>
        </ReportItems>
        <Height>1.49882in</Height>
        <Style />
      </Body>
      <Width>7.14567in</Width>
      <Page>
        <PageHeight>11in</PageHeight>
        <PageWidth>8.5in</PageWidth>
        <LeftMargin>0.82677in</LeftMargin>
        <RightMargin>0in</RightMargin>
        <TopMargin>0.78740in</TopMargin>
        <BottomMargin>0.78740in</BottomMargin>
        <Style />
      </Page>
    </ReportSection>
  </ReportSections>
  <Code>Public Function BlankZero(ByVal Value As Decimal)
    if Value = 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankPos(ByVal Value As Decimal)
    if Value &gt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankZeroAndPos(ByVal Value As Decimal)
    if Value &gt;= 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNeg(ByVal Value As Decimal)
    if Value &lt; 0 then
        Return ""
    end if
    Return Value
End Function

Public Function BlankNegAndZero(ByVal Value As Decimal)
    if Value &lt;= 0 then
        Return ""
    end if
    Return Value
End Function
</Code>
  <Language>=User!Language</Language>
  <ConsumeContainerWhitespace>true</ConsumeContainerWhitespace>
  <rd:ReportUnitType>Inch</rd:ReportUnitType>
  <rd:ReportID>f493586b-b2c2-4565-bc2a-4ff5629e7885</rd:ReportID>
</Report>
    END_OF_RDLDATA
  }
}

