OBJECT Report 1095 Update Job Item Cost
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10.00.36040;
  }
  PROPERTIES
  {
    Permissions=TableData 169=rm,
                TableData 5802=rm;
    CaptionML=[ENU=Update Job Item Cost;
               ESM=Actualizar costo productos proyecto;
               FRC=Mettre … jour le co–t d'article de projet;
               ENC=Update Job Item Cost];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 8019;    ;DataItem;                    ;
               DataItemTable=Table167;
               DataItemTableView=SORTING(No.)
                                 WHERE(Status=FILTER(<>Completed));
               OnPreDataItem=BEGIN
                               NoOfJobLedgEntry := 0;
                               LOCKTABLE;
                             END;

               OnPostDataItem=BEGIN
                                IF NOT HideResult THEN BEGIN
                                  IF NoOfJobLedgEntry <> 0 THEN
                                    MESSAGE(STRSUBSTNO(Text001,NoOfJobLedgEntry))
                                  ELSE
                                    MESSAGE(Text003);
                                END;
                              END;

               ReqFilterFields=No. }

    { 5612;1   ;DataItem;                    ;
               DataItemTable=Table169;
               DataItemTableView=SORTING(Type,Entry Type,Country/Region Code,Source Code,Posting Date)
                                 WHERE(Type=FILTER(=Item),
                                       Entry Type=FILTER(=Usage));
               OnPreDataItem=BEGIN
                               LOCKTABLE;
                             END;

               ReqFilterFields=Posting Date;
               DataItemLink=Job No.=FIELD(No.) }

    { 7209;2   ;DataItem;                    ;
               DataItemTable=Table32;
               DataItemTableView=SORTING(Entry No.);
               OnPreDataItem=BEGIN
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=VAR
                                  ValueEntry@1004 : Record 5802;
                                  ValueEntry2@1003 : Record 5802;
                                  JobLedgerEntryCostValue@1001 : Decimal;
                                  JobLedgerEntryCostValueACY@1002 : Decimal;
                                  AdjustJobCost@1000 : Decimal;
                                  AdjustJobCostLCY@1005 : Decimal;
                                BEGIN
                                  ValueEntry.SETCURRENTKEY("Job No.","Job Task No.","Document No.");
                                  ValueEntry.SETRANGE("Job No.","Job Ledger Entry"."Job No.");
                                  ValueEntry.SETRANGE("Job Task No.","Job Ledger Entry"."Job Task No.");
                                  ValueEntry.SETRANGE("Job Ledger Entry No.","Job Ledger Entry"."Entry No.");
                                  ValueEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
                                  ValueEntry.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
                                  ValueEntry.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");

                                  JobLedgerEntryCostValue := 0;
                                  JobLedgerEntryCostValueACY := 0;

                                  IF NOT ValueEntry.FINDFIRST THEN BEGIN
                                    CALCFIELDS("Cost Amount (Expected)","Cost Amount (Expected) (ACY)",
                                      "Cost Amount (Actual)","Cost Amount (Actual) (ACY)");
                                    JobLedgerEntryCostValue := "Cost Amount (Expected)" + "Cost Amount (Actual)";
                                    JobLedgerEntryCostValueACY := "Cost Amount (Expected) (ACY)" + "Cost Amount (Actual) (ACY)";
                                    IF "Job Ledger Entry"."Total Cost (LCY)" <> -JobLedgerEntryCostValue THEN BEGIN
                                      // Update Total Costs
                                      AdjustJobCostLCY := -JobLedgerEntryCostValue - "Job Ledger Entry"."Total Cost (LCY)";
                                      "Job Ledger Entry"."Total Cost (LCY)" := -JobLedgerEntryCostValue;
                                      IF "Job Ledger Entry"."Currency Code" = '' THEN BEGIN
                                        AdjustJobCost := -JobLedgerEntryCostValue - "Job Ledger Entry"."Total Cost";
                                        "Job Ledger Entry"."Total Cost" := -JobLedgerEntryCostValue
                                      END ELSE BEGIN
                                        AdjustJobCost := -JobLedgerEntryCostValue * "Job Ledger Entry"."Currency Factor" - "Job Ledger Entry"."Total Cost";
                                        "Job Ledger Entry"."Total Cost" := -JobLedgerEntryCostValue * "Job Ledger Entry"."Currency Factor";
                                      END;
                                      IF JobLedgerEntryCostValueACY <> 0 THEN
                                        "Job Ledger Entry"."Additional-Currency Total Cost" := -JobLedgerEntryCostValueACY;

                                      // Update Unit Costs
                                      "Job Ledger Entry"."Unit Cost (LCY)" :=
                                        "Job Ledger Entry"."Total Cost (LCY)" / "Job Ledger Entry".Quantity;
                                      "Job Ledger Entry"."Unit Cost" :=
                                        "Job Ledger Entry"."Total Cost" / "Job Ledger Entry".Quantity;

                                      "Job Ledger Entry".Adjusted := TRUE;
                                      "Job Ledger Entry"."DateTime Adjusted" := CURRENTDATETIME;
                                      "Job Ledger Entry".MODIFY;

                                      UpdatePostedTotalCost("Job Ledger Entry",AdjustJobCost,AdjustJobCostLCY);

                                      NoOfJobLedgEntry := NoOfJobLedgEntry + 1;
                                    END;
                                  END ELSE BEGIN
                                    ValueEntry.SETRANGE(Adjustment,FALSE);
                                    IF ValueEntry.FINDFIRST THEN BEGIN
                                      JobLedgerEntryCostValue := ValueEntry."Cost Amount (Actual)";
                                      JobLedgerEntryCostValueACY := ValueEntry."Cost Amount (Actual) (ACY)";

                                      ValueEntry2.SETCURRENTKEY("Item Ledger Entry No.","Entry Type");
                                      ValueEntry2.SETRANGE("Item Ledger Entry No.","Entry No.");
                                      ValueEntry2.SETRANGE("Document No.",ValueEntry."Document No.");
                                      ValueEntry2.SETRANGE("Item Ledger Entry Type",ValueEntry."Item Ledger Entry Type"::"Negative Adjmt.");
                                      ValueEntry2.SETRANGE("Document Type",ValueEntry."Document Type"::"Purchase Invoice");
                                      ValueEntry2.SETRANGE(Adjustment,TRUE);
                                      IF ValueEntry2.FINDSET THEN BEGIN
                                        REPEAT
                                          JobLedgerEntryCostValue := JobLedgerEntryCostValue + ValueEntry2."Cost Amount (Actual)";
                                          JobLedgerEntryCostValueACY := JobLedgerEntryCostValueACY + ValueEntry2."Cost Amount (Actual) (ACY)";
                                          IF ValueEntry2."Job Ledger Entry No." = 0 THEN BEGIN
                                            ValueEntry2."Job No." := ValueEntry."Job No.";
                                            ValueEntry2."Job Task No." := ValueEntry."Job Task No.";
                                            ValueEntry2."Job Ledger Entry No." := ValueEntry."Job Ledger Entry No.";
                                            ValueEntry2.MODIFY;
                                          END;
                                        UNTIL ValueEntry2.NEXT = 0;

                                        IF "Job Ledger Entry"."Total Cost (LCY)" <> -JobLedgerEntryCostValue THEN BEGIN
                                          // Update Total Costs
                                          "Job Ledger Entry"."Total Cost (LCY)" := -JobLedgerEntryCostValue;
                                          IF "Job Ledger Entry"."Currency Code" = '' THEN
                                            "Job Ledger Entry"."Total Cost" := -JobLedgerEntryCostValue
                                          ELSE
                                            "Job Ledger Entry"."Total Cost" := -JobLedgerEntryCostValue * "Job Ledger Entry"."Currency Factor";
                                          IF JobLedgerEntryCostValueACY <> 0 THEN
                                            "Job Ledger Entry"."Additional-Currency Total Cost" := -JobLedgerEntryCostValueACY;

                                          // Update Unit Costs
                                          "Job Ledger Entry"."Unit Cost (LCY)" :=
                                            "Job Ledger Entry"."Total Cost (LCY)" / "Job Ledger Entry".Quantity;
                                          "Job Ledger Entry"."Unit Cost" :=
                                            "Job Ledger Entry"."Total Cost" / "Job Ledger Entry".Quantity;

                                          "Job Ledger Entry".Adjusted := TRUE;
                                          "Job Ledger Entry"."DateTime Adjusted" := CURRENTDATETIME;
                                          "Job Ledger Entry".MODIFY;
                                          NoOfJobLedgEntry := NoOfJobLedgEntry + 1;
                                        END;
                                      END;
                                    END;
                                  END;
                                END;

               DataItemLink=Entry No.=FIELD(Ledger Entry No.) }

    { 9714;3   ;DataItem;                    ;
               DataItemTable=Table1003;
               DataItemTableView=SORTING(Job No.,Job Task No.,Line No.);
               OnPreDataItem=BEGIN
                               IF NoOfJobLedgEntry = 0 THEN
                                 CurrReport.BREAK;
                               LOCKTABLE;
                             END;

               OnAfterGetRecord=BEGIN
                                  CALCFIELDS("Qty. Transferred to Invoice");
                                  IF ("Qty. Transferred to Invoice" <> 0) OR NOT "System-Created Entry" OR ("Ledger Entry Type" <> "Ledger Entry Type"::Item) THEN
                                    CurrReport.SKIP;

                                  VALIDATE("Unit Cost (LCY)","Job Ledger Entry"."Unit Cost (LCY)");
                                  VALIDATE("Line Discount Amount (LCY)","Job Ledger Entry"."Line Discount Amount (LCY)");
                                  MODIFY;
                                  "Job Ledger Entry".VALIDATE("Unit Price","Unit Price");
                                  "Job Ledger Entry".VALIDATE("Unit Price (LCY)","Unit Price (LCY)");
                                  "Job Ledger Entry".VALIDATE("Total Price","Total Price");
                                  "Job Ledger Entry".VALIDATE("Total Price (LCY)","Total Price (LCY)");
                                  "Job Ledger Entry".VALIDATE("Line Amount (LCY)","Line Amount (LCY)");
                                  "Job Ledger Entry".VALIDATE("Line Amount","Line Amount");
                                  "Job Ledger Entry".MODIFY;
                                END;

               DataItemLink=Job No.=FIELD(Job No.),
                            Job Task No.=FIELD(Job Task No.),
                            Ledger Entry No.=FIELD(Entry No.) }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text001@1000 : TextConst '@@@="The Job Ledger Entry item costs have now been updated to equal the related item ledger entry actual costs.\\Number of Job Ledger Entries modified = 2.";ENU="The job ledger entry item costs have now been updated to equal the related item ledger entry actual costs.\\The number of job ledger entries modified = %1.";ESM="Los costos de productos de mov. proyecto se han actualizado ahora para igualar los costos reales de movs. productos.\\El n£mero de movs. productos modificados = %1.";FRC="Les co–ts article de l''‚criture du grand livre projet ont ‚t‚ mis … jour pour correspondre aux co–ts r‚els correspondants de l''‚criture article.\\Nombre d''‚critures de grand livre projet modifi‚es = %1.";ENC="The job ledger entry item costs have now been updated to equal the related item ledger entry actual costs.\\The number of job ledger entries modified = %1."';
      NoOfJobLedgEntry@1002 : Integer;
      Text003@1001 : TextConst 'ENU=There were no job ledger entries that needed to be updated.;ESM=No se encontraron movimientos de proyecto que actualizar.;FRC=Aucune ‚criture du grand livre de projet n''avait … ˆtre mise … jour.;ENC=There were no job ledger entries that needed to be updated.';
      HideResult@1004 : Boolean;

    PROCEDURE SetProperties@1(SuppressSummary@1000 : Boolean);
    BEGIN
      HideResult := SuppressSummary;
    END;

    LOCAL PROCEDURE UpdatePostedTotalCost@33(VAR JobLedgerEntry@1000 : Record 169;AdjustJobCost@1003 : Decimal;AdjustJobCostLCY@1004 : Decimal);
    VAR
      JobUsageLink@1001 : Record 1020;
      JobPlanningLine@1002 : Record 1003;
    BEGIN
      JobUsageLink.SETRANGE("Entry No.",JobLedgerEntry."Entry No.");
      IF JobUsageLink.FINDSET THEN
        REPEAT
          JobPlanningLine.GET(JobUsageLink."Job No.",JobUsageLink."Job Task No.",JobUsageLink."Line No.");
          JobPlanningLine.UpdatePostedTotalCost(AdjustJobCost,AdjustJobCostLCY);
          JobPlanningLine.MODIFY;
        UNTIL JobUsageLink.NEXT = 0;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

