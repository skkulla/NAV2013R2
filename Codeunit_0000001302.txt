OBJECT Codeunit 1302 Mini Customer Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      NewCustQst@1001 : TextConst 'ENU=This customer is not registered. Do you want to create a new customer card for customer %1?;ESM=Este cliente no est  registrado. ¨Desea crear una nueva ficha de cliente para el cliente %1?;FRC=Ce client n''est pas enregistr‚. Souhaitez-vous cr‚er une nouvelle fiche pour le client %1ÿ?;ENC=This customer is not registered. Do you want to create a new customer card for customer %1?';
      SelectCustErr@1000 : TextConst 'ENU=You must select an existing customer.;ESM=Debe seleccionar un cliente existente.;FRC=Vous devez s‚lectionner un client existant.;ENC=You must select an existing customer.';

    PROCEDURE AvgDaysToPay@2(CustNo@1000 : Code[20]) : Decimal;
    VAR
      CustLedgEntry@1015 : Record 21;
      CustLedgEntry2@1014 : Record 21;
      AvgDaysToPay@1006 : Decimal;
      TotalDaysToPay@1005 : Decimal;
      TotalNoOfInv@1004 : Integer;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        AvgDaysToPay := 0;
        SETCURRENTKEY("Customer No.","Posting Date");
        SetFilterForPostedDocs(CustLedgEntry,CustNo,"Document Type"::Invoice);
        SETRANGE(Open,FALSE);

        IF FINDSET THEN
          REPEAT
            CASE TRUE OF
              "Closed at Date" > "Posting Date":
                UpdateDaysToPay("Closed at Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              "Closed by Entry No." <> 0:
                BEGIN
                  IF CustLedgEntry2.GET("Closed by Entry No.") THEN
                    UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
                END;
              ELSE BEGIN
                CustLedgEntry2.SETCURRENTKEY("Closed by Entry No.");
                CustLedgEntry2.SETRANGE("Closed by Entry No.","Entry No.");
                IF CustLedgEntry2.FINDFIRST THEN
                  UpdateDaysToPay(CustLedgEntry2."Posting Date" - "Posting Date",TotalDaysToPay,TotalNoOfInv);
              END;
            END;
          UNTIL NEXT = 0;
      END;

      IF TotalNoOfInv <> 0 THEN
        AvgDaysToPay := TotalDaysToPay / TotalNoOfInv;

      EXIT(AvgDaysToPay);
    END;

    LOCAL PROCEDURE UpdateDaysToPay@3(NoOfDays@1000 : Integer;VAR TotalDaysToPay@1002 : Decimal;VAR TotalNoOfInv@1001 : Integer);
    BEGIN
      TotalDaysToPay += NoOfDays;
      TotalNoOfInv += 1;
    END;

    PROCEDURE CalculateStatistic@1(Customer@1022 : Record 18;VAR AdjmtCostLCY@1017 : Decimal;VAR AdjCustProfit@1015 : Decimal;VAR AdjProfitPct@1014 : Decimal;VAR CustInvDiscAmountLCY@1011 : Decimal;VAR CustPaymentsLCY@1004 : Decimal;VAR CustSalesLCY@1002 : Decimal;VAR CustProfit@1001 : Decimal);
    VAR
      CostCalcuMgt@1023 : Codeunit 5836;
    BEGIN
      WITH Customer DO BEGIN
        SETFILTER("Date Filter",GetCurrentYearFilter);

        CALCFIELDS("Sales (LCY)","Profit (LCY)","Inv. Discounts (LCY)","Payments (LCY)");

        // Costs (LCY):
        CustSalesLCY := "Sales (LCY)";
        CustProfit := "Profit (LCY)" + CostCalcuMgt.NonInvtblCostAmt(Customer);
        AdjmtCostLCY := CustSalesLCY - CustProfit + CostCalcuMgt.CalcCustActualCostLCY(Customer);
        AdjCustProfit := CustProfit + AdjmtCostLCY;

        // Profit %
        IF "Sales (LCY)" <> 0 THEN
          AdjProfitPct := ROUND(100 * AdjCustProfit / "Sales (LCY)",0.1)
        ELSE
          AdjProfitPct := 0;

        CustInvDiscAmountLCY := "Inv. Discounts (LCY)";

        CustPaymentsLCY := "Payments (LCY)";
      END;
    END;

    PROCEDURE CalcAmountsOnPostedInvoices@4(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      EXIT(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::Invoice));
    END;

    PROCEDURE CalcAmountsOnPostedCrMemos@5(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      EXIT(CalcAmountsOnPostedDocs(CustNo,RecCount,CustLedgEntry."Document Type"::"Credit Memo"));
    END;

    LOCAL PROCEDURE CalcAmountsOnPostedDocs@22(CustNo@1002 : Code[20];VAR RecCount@1000 : Integer;DocType@1001 : Integer) : Decimal;
    VAR
      CustLedgEntry@1004 : Record 21;
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SetFilterForPostedDocs(CustLedgEntry,CustNo,DocType);

        RecCount := COUNT;

        CALCSUMS("Sales (LCY)");
        EXIT("Sales (LCY)");
      END;
    END;

    PROCEDURE CalculateAmountsWithVATOnUnpostedDocuments@16(CustNo@1000 : Code[20]) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
      Result@1001 : Decimal;
      DocumentType@1003 : Integer;
    BEGIN
      DocumentType := -1; // All supported Documents Type
      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType);
      WITH SalesLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            CASE "Document Type" OF
              "Document Type"::Invoice:
                Result += "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                Result -= "Outstanding Amount (LCY)";
            END;
          UNTIL NEXT = 0;
      END;

      EXIT(Result);
    END;

    PROCEDURE CalculateAmountsOnUnpostedInvoices@8(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::Invoice))
    END;

    PROCEDURE CalculateAmountsOnUnpostedCrMemos@9(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
    BEGIN
      EXIT(CalculateAmountsOnUnpostedDocs(CustNo,RecCount,SalesLine."Document Type"::"Credit Memo"))
    END;

    LOCAL PROCEDURE CalculateAmountsOnUnpostedDocs@11(CustNo@1001 : Code[20];VAR RecCount@1000 : Integer;DocumentType@1003 : Integer) : Decimal;
    VAR
      SalesLine@1002 : Record 37;
      Result@1005 : Decimal;
      VAT@1006 : Decimal;
      OutstandingAmount@1007 : Decimal;
      OldDocumentNo@1008 : Code[20];
    BEGIN
      RecCount := 0;
      Result := 0;

      SetFilterForUnpostedLines(SalesLine,CustNo,DocumentType);
      WITH SalesLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            CASE "Document Type" OF
              "Document Type"::Invoice:
                OutstandingAmount := "Outstanding Amount (LCY)";
              "Document Type"::"Credit Memo":
                OutstandingAmount := -"Outstanding Amount (LCY)";
            END;
            VAT := 100 + "VAT %";
            Result += OutstandingAmount * 100 / VAT;

            IF OldDocumentNo <> "Document No." THEN BEGIN
              OldDocumentNo := "Document No.";
              RecCount += 1;
            END;
          UNTIL NEXT = 0;
      END;

      EXIT(ROUND(Result));
    END;

    PROCEDURE DrillDownOnPostedInvoices@20(CustNo@1001 : Code[20]);
    VAR
      SalesInvoiceHeader@1000 : Record 112;
    BEGIN
      WITH SalesInvoiceHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Mini Posted Sales Invoices",SalesInvoiceHeader);
      END;
    END;

    PROCEDURE DrillDownOnPostedCrMemo@6(CustNo@1001 : Code[20]);
    VAR
      SalesCrMemoHeader@1000 : Record 114;
    BEGIN
      WITH SalesCrMemoHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        PAGE.RUN(PAGE::"Mini Posted Sales Credit Memos",SalesCrMemoHeader);
      END;
    END;

    PROCEDURE DrillDownMoneyOwedExpected@17(CustNo@1000 : Code[20]);
    VAR
      SalesHeader@1001 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,-1);
      PAGE.RUN(PAGE::"Mini Sales Credit Memos",SalesHeader)
    END;

    PROCEDURE DrillDownOnOutstandingInvoices@15(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::Invoice);
      PAGE.RUN(PAGE::"Mini Sales Invoice List",SalesHeader)
    END;

    PROCEDURE DrillDownOnOutstandingCrMemos@14(CustNo@1001 : Code[20]);
    VAR
      SalesHeader@1000 : Record 36;
    BEGIN
      SetFilterForUnpostedDocs(SalesHeader,CustNo,SalesHeader."Document Type"::"Credit Memo");
      PAGE.RUN(PAGE::"Mini Sales Credit Memos",SalesHeader)
    END;

    LOCAL PROCEDURE SetFilterForUnpostedDocs@7(VAR SalesHeader@1003 : Record 36;CustNo@1002 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH SalesHeader DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        IF DocumentType = -1 THEN
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        ELSE
          SETRANGE("Document Type",DocumentType);
      END;
    END;

    LOCAL PROCEDURE SetFilterForUnpostedLines@12(VAR SalesLine@1003 : Record 37;CustNo@1002 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH SalesLine DO BEGIN
        SETRANGE("Bill-to Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);

        IF DocumentType = -1 THEN
          SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo")
        ELSE
          SETRANGE("Document Type",DocumentType);
      END;
    END;

    LOCAL PROCEDURE SetFilterForPostedDocs@27(VAR CustLedgEntry@1002 : Record 21;CustNo@1001 : Code[20];DocumentType@1000 : Integer);
    BEGIN
      WITH CustLedgEntry DO BEGIN
        SETRANGE("Customer No.",CustNo);
        SETFILTER("Posting Date",GetCurrentYearFilter);
        SETRANGE("Document Type",DocumentType);
      END;
    END;

    PROCEDURE GetCurrentYearFilter@10() : Text[30];
    VAR
      DateFilterCalc@1002 : Codeunit 358;
      CustDateFilter@1001 : Text[30];
      CustDateName@1000 : Text[30];
    BEGIN
      DateFilterCalc.CreateFiscalYearFilter(CustDateFilter,CustDateName,WORKDATE,0);
      EXIT(CustDateFilter);
    END;

    PROCEDURE GetCustNoByName@56(CustomerName@1000 : Text[50]) : Code[20];
    VAR
      Customer@1001 : Record 18;
    BEGIN
      Customer.SETFILTER(Name,CustomerName);
      IF Customer.COUNT = 1 THEN BEGIN
        Customer.FINDFIRST;
        EXIT(Customer."No.");
      END;

      CLEAR(Customer);
      Customer.SETFILTER(Name,'@*' + CustomerName + '*');
      CASE Customer.COUNT OF
        0:
          BEGIN
            IF CONFIRM(NewCustQst,TRUE,CustomerName) THEN
              EXIT(CreateNewCustomer(CustomerName));
            ERROR(SelectCustErr);
          END;
        1:
          BEGIN
            Customer.FINDFIRST;
            EXIT(Customer."No.");
          END;
        ELSE
          EXIT(PickCustomer(Customer));
      END;
    END;

    LOCAL PROCEDURE CreateNewCustomer@59(CustomerName@1000 : Text[50]) : Code[20];
    VAR
      Customer@1005 : Record 18;
      MiniCustomerTemplate@1006 : Record 1300;
      MiniCustomerCard@1002 : Page 1300;
      NewCustomerCode@1007 : Code[20];
    BEGIN
      NewCustomerCode := MiniCustomerTemplate.NewCustomerFromTemplate;
      IF NewCustomerCode = '' THEN
        ERROR(SelectCustErr);

      Customer.GET(NewCustomerCode);
      Customer.Name := CustomerName;
      Customer.MODIFY(TRUE);
      COMMIT;
      MiniCustomerCard.SETRECORD(Customer);
      IF NOT (MiniCustomerCard.RUNMODAL = ACTION::OK) THEN
        ERROR(SelectCustErr);

      MiniCustomerCard.GETRECORD(Customer);

      EXIT(Customer."No.");
    END;

    LOCAL PROCEDURE PickCustomer@58(VAR Customer@1000 : Record 18) : Code[20];
    VAR
      MiniCustomerList@1001 : Page 1301;
    BEGIN
      MiniCustomerList.SETTABLEVIEW(Customer);
      MiniCustomerList.LOOKUPMODE := TRUE;
      IF MiniCustomerList.RUNMODAL <> ACTION::LookupOK THEN
        ERROR(SelectCustErr);

      MiniCustomerList.GETRECORD(Customer);
      EXIT(Customer."No.");
    END;

    BEGIN
    END.
  }
}

