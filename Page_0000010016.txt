OBJECT Page 10016 Vendor 1099 Statistics
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00 PM;
    Version List=NAVNA7.00;
  }
  PROPERTIES
  {
    Editable=No;
    CaptionML=[ENU=Vendor 1099 Statistics;
               ESM=Estad. prov. form. 1099;
               FRC=Fournisseur statistique 1099;
               ENC=Vendor 1099 Statistics];
    LinksAllowed=No;
    SourceTable=Table23;
    PageType=Card;
    OnAfterGetRecord=BEGIN
                       CLEARALL;
                       HiLineOnScreen := 10;
                       CalculateVendor1099;
                     END;

  }
  CONTROLS
  {
    { 1170000000;;Container;
                Name=<Control1170000000>;
                CaptionML=[ENU=<Control1170000000>;
                           ESM=<Control1170000000>;
                           FRC=<Control1170000000>;
                           ENC=<Control1170000000>];
                ContainerType=ContentArea }

    { 1170000001;1;Group  ;
                GroupType=Group }

    { 1170000002;2;Group  ;
                GroupType=FixedLayout }

    { 1170000003;3;Group  ;
                CaptionML=[ENU=1099 Code;
                           ESM=C¢digo 1099;
                           FRC=Code 1099;
                           ENC=1099 Code];
                GroupType=Group }

    { 1170000006;4;Field  ;
                SourceExpr=Codes[1] }

    { 1170000007;4;Field  ;
                SourceExpr=Codes[2] }

    { 1170000008;4;Field  ;
                SourceExpr=Codes[3] }

    { 1170000009;4;Field  ;
                SourceExpr=Codes[4] }

    { 1170000010;4;Field  ;
                SourceExpr=Codes[5] }

    { 1170000011;4;Field  ;
                SourceExpr=Codes[6] }

    { 1170000012;4;Field  ;
                SourceExpr=Codes[7] }

    { 1170000013;4;Field  ;
                SourceExpr=Codes[8] }

    { 1170000014;4;Field  ;
                SourceExpr=Codes[9] }

    { 1170000015;4;Field  ;
                SourceExpr=Codes[10] }

    { 1170000004;3;Group  ;
                CaptionML=[ENU=Description;
                           ESM=Descripci¢n;
                           FRC=Description;
                           ENC=Description];
                GroupType=Group }

    { 1170000016;4;Field  ;
                SourceExpr=Descriptions[1] }

    { 1170000017;4;Field  ;
                SourceExpr=Descriptions[2] }

    { 1170000018;4;Field  ;
                SourceExpr=Descriptions[3] }

    { 1170000019;4;Field  ;
                SourceExpr=Descriptions[4] }

    { 1170000020;4;Field  ;
                SourceExpr=Descriptions[5] }

    { 1170000021;4;Field  ;
                SourceExpr=Descriptions[6] }

    { 1170000022;4;Field  ;
                SourceExpr=Descriptions[7] }

    { 1170000023;4;Field  ;
                SourceExpr=Descriptions[8] }

    { 1170000024;4;Field  ;
                SourceExpr=Descriptions[9] }

    { 1170000025;4;Field  ;
                SourceExpr=Descriptions[10] }

    { 1170000005;3;Group  ;
                CaptionML=[ENU=Amount;
                           ESM=Importe;
                           FRC=Montant;
                           ENC=Amount];
                GroupType=Group }

    { 1170000026;4;Field  ;
                SourceExpr=Amounts[1] }

    { 1170000027;4;Field  ;
                SourceExpr=Amounts[2] }

    { 1170000028;4;Field  ;
                SourceExpr=Amounts[3] }

    { 1170000030;4;Field  ;
                SourceExpr=Amounts[4] }

    { 1170000029;4;Field  ;
                SourceExpr=Amounts[5] }

    { 1170000031;4;Field  ;
                SourceExpr=Amounts[6] }

    { 1170000032;4;Field  ;
                SourceExpr=Amounts[7] }

    { 1170000033;4;Field  ;
                SourceExpr=Amounts[8] }

    { 1170000034;4;Field  ;
                SourceExpr=Amounts[9] }

    { 1170000035;4;Field  ;
                SourceExpr=Amounts[10] }

  }
  CODE
  {
    VAR
      PaymentEntry@1170000017 : Record 25;
      IRS1099FormBox@1170000016 : Record 10010;
      TempAppliedEntry@1170000015 : TEMPORARY Record 25;
      EntryAppMgt@1170000014 : Codeunit 10202;
      PeriodDate@1170000013 : ARRAY [2] OF Date;
      Codes@1170000012 : ARRAY [100] OF Code[10];
      Descriptions@1170000011 : ARRAY [100] OF Text[50];
      Amounts@1170000010 : ARRAY [100] OF Decimal;
      TempCode@1170000009 : Code[10];
      TempDesc@1170000008 : Text[50];
      TempAmt@1170000007 : Decimal;
      LastLineNo@1170000006 : Integer;
      HiLineOnScreen@1170000005 : Integer;
      Invoice1099Amount@1170000004 : Decimal;
      i@1170000003 : Integer;
      j@1170000002 : Integer;
      Year@1170000001 : Integer;
      PassComplete@1170000000 : Boolean;
      Text001@1170000018 : TextConst 'ENU=(Unknown Box);ESM=(Cuadro desconocido);FRC=(Case inconnue);ENC=(Unknown Box)';
      Text002@1170000019 : TextConst 'ENU=All other 1099 types;ESM=Otros tipos 1099;FRC=Tous les autres types 1099;ENC=All other 1099 types';

    PROCEDURE CalculateVendor1099@1();
    BEGIN
      CLEAR(Codes);
      CLEAR(Amounts);
      CLEAR(Descriptions);
      CLEAR(LastLineNo);

      Year := DATE2DMY(WORKDATE,3);
      PeriodDate[1] := DMY2DATE(1,1,Year);
      PeriodDate[2] := DMY2DATE(31,12,Year);
      WITH PaymentEntry DO BEGIN
        SETCURRENTKEY("Document Type","Vendor No.","Posting Date");
        SETRANGE("Document Type","Document Type"::Payment);
        SETRANGE("Vendor No.",Rec."No.");
        SETRANGE("Posting Date",PeriodDate[1],PeriodDate[2]);
        IF FIND('-') THEN
          REPEAT
            ProcessInvoices;
          UNTIL NEXT = 0;

        IF LastLineNo > 1 THEN
          SortHiToLo;

        IF LastLineNo > HiLineOnScreen THEN
          ConsolidateLast;
      END;
    END;

    PROCEDURE ProcessInvoices@2();
    BEGIN
      EntryAppMgt.GetAppliedVendEntries(TempAppliedEntry,PaymentEntry,TRUE);
      WITH TempAppliedEntry DO BEGIN
        SETFILTER("Document Type",'%1|%2',"Document Type"::Invoice,"Document Type"::"Credit Memo");
        SETFILTER("IRS 1099 Amount",'<>0');
        IF FIND('-') THEN
          REPEAT
            Calculate1099Amount("Amount to Apply");
          UNTIL NEXT = 0;
      END;
    END;

    PROCEDURE Calculate1099Amount@3(AppliedAmount@1000 : Decimal);
    BEGIN
      TempAppliedEntry.CALCFIELDS(Amount);
      Invoice1099Amount := -AppliedAmount * TempAppliedEntry."IRS 1099 Amount" / TempAppliedEntry.Amount;
      UpdateLines(TempAppliedEntry."IRS 1099 Code",Invoice1099Amount);
    END;

    PROCEDURE UpdateLines@4(Code@1000 : Code[10];Amount@1001 : Decimal);
    BEGIN
      i := 1;
      WHILE (Codes[i] <> Code) AND (i <= LastLineNo) DO
        i := i + 1;

      IF (Codes[i] = Code) AND (i <= LastLineNo) THEN
        Amounts[i] := Amounts[i] + Amount
      ELSE BEGIN
        Codes[i] := Code;
        IF IRS1099FormBox.GET(Code) THEN
          Descriptions[i] := PADSTR(IRS1099FormBox.Description,MAXSTRLEN(Descriptions[1]))
        ELSE
          Descriptions[i] := Text001;
        Amounts[i] := Amount;
        LastLineNo := LastLineNo + 1;
      END;

      IF LastLineNo = ARRAYLEN(Codes) THEN BEGIN
        Codes[LastLineNo - 1] := '';
        Descriptions[LastLineNo - 1] := '...';
        Amounts[LastLineNo - 1] := Amounts[LastLineNo - 1] + Amounts[LastLineNo];
        LastLineNo := LastLineNo - 1;
      END;
    END;

    PROCEDURE SortHiToLo@5();
    BEGIN
      FOR i := 2 TO LastLineNo DO BEGIN
        j := i;
        TempCode := Codes[i];
        TempDesc := Descriptions[i];
        TempAmt := Amounts[i];
        PassComplete := FALSE;

        WHILE NOT PassComplete DO BEGIN
          PassComplete := TRUE;
          IF j > 1 THEN
            IF ABS(Amounts[j - 1]) < ABS(TempAmt) THEN BEGIN
              Codes[j] := Codes[j - 1];
              Descriptions[j] := Descriptions[j - 1];
              Amounts[j] := Amounts[j - 1];
              j := j - 1;
              PassComplete := FALSE;
            END;
        END;

        IF j < i THEN BEGIN
          Codes[j] := TempCode;
          Descriptions[j] := TempDesc;
          Amounts[j] := TempAmt;
        END;
      END;
    END;

    PROCEDURE ConsolidateLast@6();
    BEGIN
      FOR i := HiLineOnScreen + 1 TO LastLineNo DO BEGIN
        Amounts[HiLineOnScreen] := Amounts[HiLineOnScreen] + Amounts[i];
        CLEAR(Codes[i]);
        CLEAR(Descriptions[i]);
        CLEAR(Amounts[i]);
      END;
      CLEAR(Codes[HiLineOnScreen]);
      Descriptions[HiLineOnScreen] := Text002;
    END;

    BEGIN
    END.
  }
}

