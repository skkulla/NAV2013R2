OBJECT Codeunit 10025 Paragraph Handling
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00 PM;
    Version List=NAVNA7.00;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SingleQuote@1000 : Char;
      Char127@1001 : Char;
      Text000@1020000 : TextConst 'ENU=The StringPrintLength function in CodeUnit 10025 only works for font sizes from 7 through 10.;ESM=La funci¢n StringPrintLength en el m¢dulo 10025 s¢lo funciona con los tama¤os de fuente del 7 al 10.;FRC=La fonction StringPrintLength dans CodeUnit 10025 ne fonctionne que pour les polices d''une taille de 7 … 10.;ENC=The StringPrintLength function in CodeUnit 10025 only works for font sizes from 7 through 10.';

    PROCEDURE InitGlobals@1();
    BEGIN
      SingleQuote := 39;
      Char127 := 127;
    END;

    PROCEDURE StringPrintLength@2(PrintString@1001 : Text[250];PointSize@1002 : Integer) Length@1000 : Integer;
    VAR
      i@1003 : Integer;
      OneCharLen@1004 : Integer;
    BEGIN
      // This function returns the number of millimeters on the print page
      // that the PrintString will take up, assuming the passed-in PointSize.
      InitGlobals;
      Length := 0;
      FOR i := 1 TO STRLEN(PrintString) DO BEGIN
        CASE PointSize OF
          7:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 46;
              'i','j','l':
                OneCharLen := 55;
              '|':
                OneCharLen := 61;
              '!':
                OneCharLen := 63;
              ' ',',','.','/','\',':',';','I','[',']','f','t':
                OneCharLen := 68;
              '`','r','{','}','(',')','-':
                OneCharLen := 83;
              '"':
                OneCharLen := 87;
              '*':
                OneCharLen := 95;
              '^':
                OneCharLen := 115;
              'y':
                OneCharLen := 116;
              'v','x':
                OneCharLen := 121;
              'J','c','k','s','z':
                OneCharLen := 123;
              '+','<','>','=','~':
                OneCharLen := 145;
              'F','T','Z':
                OneCharLen := 151;
              'Y':
                OneCharLen := 159;
              '&','A','B','E','K','P','S','V','X':
                OneCharLen := 164;
              'C','D','H','w':
                OneCharLen := 174;
              'N','R','U':
                OneCharLen := 178;
              Char127:
                OneCharLen := 185;
              'G':
                OneCharLen := 190;
              'Q':
                OneCharLen := 192;
              '%','M','O','m':
                OneCharLen := 200;
              'W':
                OneCharLen := 238;
              '@':
                OneCharLen := 250;
              ELSE  {all digits, many lower case letters, etc}
                OneCharLen := 138;
            END;
          8:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 54;
              'i','j','l':
                OneCharLen := 64;
              '|','!':
                OneCharLen := 72;
              ' ',',','.','/','\',':',';','I','[',']','f','t':
                OneCharLen := 78;
              '`','r','{','}','(',')','-':
                OneCharLen := 94;
              '"':
                OneCharLen := 100;
              '*':
                OneCharLen := 110;
              '^':
                OneCharLen := 130;
              'y':
                OneCharLen := 138;
              'x':
                OneCharLen := 140;
              'J','c','k','s','v','z':
                OneCharLen := 144;
              '+','<','>','=','~':
                OneCharLen := 166;
              'F','T','Z':
                OneCharLen := 172;
              'Y':
                OneCharLen := 186;
              '&','A','B','E','K','P','S','V','X':
                OneCharLen := 190;
              'C','D','H','N','R','U','w':
                OneCharLen := 204;
              Char127:
                OneCharLen := 212;
              'G','O','Q':
                OneCharLen := 220;
              'M','m':
                OneCharLen := 236;
              '%':
                OneCharLen := 250;
              'W':
                OneCharLen := 270;
              '@':
                OneCharLen := 288;
              ELSE  {all digits, many lower case letters, etc}
                OneCharLen := 158;
            END;
          9:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 62;
              'i','j','l':
                OneCharLen := 70;
              '|':
                OneCharLen := 78;
              '!':
                OneCharLen := 82;
              ' ',',','.','/','\',':',';','I','[',']','f','t':
                OneCharLen := 88;
              '`','r','{','}','(',')','-':
                OneCharLen := 106;
              '"':
                OneCharLen := 112;
              '*':
                OneCharLen := 124;
              '^':
                OneCharLen := 144;
              'y':
                OneCharLen := 156;
              'x':
                OneCharLen := 158;
              'J','c','k','s','v','z':
                OneCharLen := 160;
              '+','<','>','=','~':
                OneCharLen := 186;
              'F','T','Z':
                OneCharLen := 196;
              'X':
                OneCharLen := 210;
              'Y':
                OneCharLen := 212;
              '&','A','B','E','K','P','S','V':
                OneCharLen := 212;
              'w':
                OneCharLen := 224;
              'C','D','H','N','R','U':
                OneCharLen := 230;
              Char127:
                OneCharLen := 240;
              'G','O','Q':
                OneCharLen := 250;
              'M','m':
                OneCharLen := 266;
              '%':
                OneCharLen := 282;
              'W':
                OneCharLen := 302;
              '@':
                OneCharLen := 322;
              ELSE  {all digits, many lower case letters, etc}
                OneCharLen := 176;
            END;
          10:
            CASE PrintString[i] OF
              SingleQuote:
                OneCharLen := 68;
              'i','j','l':
                OneCharLen := 78;
              '|':
                OneCharLen := 88;
              '!',',','.',':',';':
                OneCharLen := 96;
              ' ','/','\','I','[',']','f','t':
                OneCharLen := 98;
              '`','r','{','}','(',')','-':
                OneCharLen := 116;
              '"':
                OneCharLen := 126;
              '*':
                OneCharLen := 138;
              '^':
                OneCharLen := 166;
              'y':
                OneCharLen := 174;
              'J','c','k','s','v','x','z':
                OneCharLen := 176;
              '+','<','>','=','~':
                OneCharLen := 206;
              'F','T','Z':
                OneCharLen := 214;
              '&','A','B','E','K','P','S','V','X','Y':
                OneCharLen := 236;
              'C','D','H','N','R','U','w':
                OneCharLen := 254;
              Char127:
                OneCharLen := 266;
              'G','O','Q':
                OneCharLen := 274;
              'M','m':
                OneCharLen := 292;
              '%':
                OneCharLen := 314;
              'W':
                OneCharLen := 332;
              '@':
                OneCharLen := 358;
              ELSE  {all digits, many lower case letters, etc}
                OneCharLen := 196;
            END;
          ELSE
            ERROR(Text000);
        END;
        Length := Length + OneCharLen;
      END;
      EXIT((Length + 80) DIV 100);
    END;

    PROCEDURE SplitPrintLine@3(VAR PrintString@1000 : Text[250];VAR PrintString2@1001 : Text[250];SpaceOnPrintLine@1002 : Integer;PointSize@1003 : Integer);
    VAR
      OneWord@1004 : Text[250];
      s@1005 : Integer;
      e@1006 : Integer;
    BEGIN
      // This function splits the print line passed in as PrintString so that it
      // will fit within SpaceOnPrintLine (in millimeters) on the printer,
      // assuming the passed-in PointSize. If the PrintString fits, it will be
      // returned unchanged and PrintString2 will be cleared. If it does not fit,
      // one word at a time (words are separated by spaces) is transferred to
      // PrintString2 from the beginning of PrintString until PrintString fits
      // or until PrintString2 would not fit if the next word were added.
      PrintString2 := '';
      WHILE StringPrintLength(PrintString,PointSize) > SpaceOnPrintLine DO BEGIN
        IF PrintString2 = '' THEN BEGIN  // transfer leading spaces to other string
          s := 1;                        // this will keep indentation even
          WHILE (s < STRLEN(PrintString)) AND (PrintString[s] = ' ') DO BEGIN
            PrintString2 := PrintString2 + ' ';
            s := s + 1;
          END;
        END ELSE BEGIN                   // skip the leading spaces
          s := 1;
          WHILE (s < STRLEN(PrintString)) AND (PrintString[s] = ' ') DO
            s := s + 1;
        END;
        IF PrintString[s] = ' ' THEN     // string consists solely of spaces
          EXIT;
        OneWord := '';                   // Copy out one word
        e := s;
        WHILE (e < STRLEN(PrintString)) AND (PrintString[e] <> ' ') DO BEGIN
          OneWord := OneWord + COPYSTR(PrintString,e,1);
          e := e + 1;
        END;
        IF PrintString[e] <> ' ' THEN
          EXIT;
        IF StringPrintLength(PrintString2 + OneWord,PointSize) > SpaceOnPrintLine THEN
          EXIT;
        PrintString2 := PrintString2 + OneWord + ' ';
        WHILE (e < STRLEN(PrintString)) AND (PrintString[e] = ' ') DO
          e := e + 1;
        PrintString := DELSTR(PrintString,s,e - s);
      END;
    END;

    PROCEDURE SplitPrintLineDown@4(VAR PrintString@1000 : Text[250];VAR PrintString2@1001 : Text[250];SpaceOnPrintLine@1002 : Integer;PointSize@1003 : Integer);
    VAR
      OneWord@1004 : Text[250];
      LeadingSpaces@1005 : Text[250];
      s@1006 : Integer;
      e@1007 : Integer;
    BEGIN
      // This function splits the print line passed in as PrintString so that it
      // will fit within SpaceOnPrintLine (in millimeters) on the printer,
      // assuming the passed-in PointSize. If the PrintString fits, it will be
      // returned unchanged and PrintString2 will be cleared. If it does not fit,
      // one word at a time (words are separated by spaces) is transferred to
      // PrintString2 from the end of PrintString until PrintString fits.
      PrintString2 := '';
      LeadingSpaces := '';
      WHILE StringPrintLength(PrintString,PointSize) > SpaceOnPrintLine DO BEGIN
        IF PrintString2 = '' THEN BEGIN  // transfer leading spaces to other string
          s := 1;                        // this will keep indentation even
          WHILE (s < STRLEN(PrintString)) AND (PrintString[s] = ' ') DO BEGIN
            LeadingSpaces := LeadingSpaces + ' ';
            s := s + 1;
          END;
          IF PrintString[s] = ' ' THEN     // string consists solely of spaces
            EXIT;
        END;
        OneWord := '';                   // Copy out one word
        e := STRLEN(PrintString);
        WHILE (e > 1) AND (PrintString[e] = ' ') DO    // cut out trailing spaces
          e := e - 1;
        IF e = 1 THEN
          IF PrintString[e] = ' ' THEN
            e := e - 1;
        IF e = 0 THEN BEGIN                // string consists solely of spaces
          PrintString2 := LeadingSpaces + PrintString2;
          EXIT;
        END;
        s := e;
        WHILE (s > 1) AND (PrintString[s] <> ' ') DO BEGIN
          OneWord := COPYSTR(PrintString,s,1) + OneWord;
          s := s - 1;
        END;
        IF s = 1 THEN
          IF PrintString[s] <> ' ' THEN BEGIN
            OneWord := COPYSTR(PrintString,s,1) + OneWord;
            s := s - 1;
          END;
        IF s = 0 THEN BEGIN
          PrintString2 := LeadingSpaces + PrintString2;
          EXIT;
        END;
        PrintString2 := OneWord + ' ' + PrintString2;
        PrintString := DELSTR(PrintString,s);
      END;
      PrintString2 := LeadingSpaces + PrintString2;
    END;

    PROCEDURE PadStrProportional@5(String@1001 : Text[250];Length@1002 : Integer;PointSize@1003 : Integer;FillCharacter@1004 : Text[1]) NewString@1000 : Text[250];
    VAR
      TenCharLen@1005 : Integer;
      FillTenChar@1006 : Text[10];
    BEGIN
      // This function performs the same function as the PADSTR intrinsic, with
      // two exceptions:  1) The Length parameter refers to length in millimeters
      // rather than string length; and 2) There is an additional PointSize parameter,
      // which indicates the font's point size.
      IF FillCharacter = '' THEN
        FillCharacter := ' ';      // defaults to space, just like intrinsic
      FillTenChar := PADSTR('',10,FillCharacter);
      TenCharLen := StringPrintLength(FillTenChar,PointSize);
      NewString := String;
      WHILE TRUE DO BEGIN
        IF StringPrintLength(NewString + FillCharacter,PointSize) > Length THEN
          EXIT(NewString);
        IF StringPrintLength(NewString,PointSize) + TenCharLen < Length THEN
          NewString := NewString + FillTenChar
        ELSE
          NewString := NewString + FillCharacter;
      END;
    END;

    BEGIN
    END.
  }
}

