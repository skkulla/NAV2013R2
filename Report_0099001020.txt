OBJECT Report 99001020 Carry Out Action Msg. - Plan.
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Carry Out Action Msg. - Plan.;
               ESM=Ejecutar mensajes acci¢n-Plan.;
               FRC=Traiter msg. action - Planning;
               ENC=Carry Out Action Msg. - Plan.];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 3754;    ;DataItem;                    ;
               DataItemTable=Table246;
               ReqFilterHeadingML=[ENU=Planning Line;
                                   ESM=L¡n. planificaci¢n;
                                   FRC=Ligne de planification;
                                   ENC=Planning Line];
               OnPreDataItem=BEGIN
                               LOCKTABLE;

                               SetReqLineFilters;
                               IF NOT FIND('-') THEN
                                 ERROR(Text000);

                               IF PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" THEN
                                 CheckCopyToWksh(ReqWkshTemp,ReqWksh);
                               IF TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh" THEN
                                 CheckCopyToWksh(TransWkshTemp,TransWkshName);
                               IF ProdOrderChoice = ProdOrderChoice::"Copy to Req. Wksh" THEN
                                 CheckCopyToWksh(ProdWkshTempl,ProdWkshName);

                               Window.OPEN(Text012);
                               CheckPreconditions;
                               CounterTotal := COUNT;
                             END;

               OnAfterGetRecord=BEGIN
                                  WindowUpdate;

                                  IF NOT "Accept Action Message" THEN
                                    CurrReport.SKIP;
                                  LOCKTABLE;

                                  COMMIT;
                                  CASE "Ref. Order Type" OF
                                    "Ref. Order Type"::"Prod. Order":
                                      IF ProdOrderChoice <> ProdOrderChoice::" " THEN
                                        CarryOutActions(2,ProdOrderChoice,ProdWkshTempl,ProdWkshName);
                                    "Ref. Order Type"::Purchase:
                                      IF PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh" THEN
                                        CarryOutActions(0,PurchOrderChoice,ReqWkshTemp,ReqWksh);
                                    "Ref. Order Type"::Transfer:
                                      IF TransOrderChoice <> TransOrderChoice::" " THEN BEGIN
                                        CarryOutAction.SetSplitTransferOrders(NOT CombineTransferOrders);
                                        CarryOutActions(1,TransOrderChoice,TransWkshTemp,TransWkshName);
                                      END;
                                    "Ref. Order Type"::Assembly:
                                      IF AsmOrderChoice <> AsmOrderChoice::" " THEN
                                        CarryOutActions(3,AsmOrderChoice,'','');
                                    ELSE
                                      CurrReport.SKIP;
                                  END;
                                  COMMIT;
                                END;

               OnPostDataItem=BEGIN
                                Window.CLOSE;

                                IF PurchOrderChoice IN [PurchOrderChoice::"Make Purch. Orders",
                                                        PurchOrderChoice::"Make Purch. Orders & Print"]
                                THEN BEGIN
                                  SETRANGE("Accept Action Message",TRUE);

                                  IF PurchaseSuggestionExists("Requisition Line") THEN BEGIN
                                    PurchOrderHeader."Order Date" := WORKDATE;
                                    PurchOrderHeader."Posting Date" := WORKDATE;
                                    PurchOrderHeader."Expected Receipt Date" := WORKDATE;

                                    EndOrderDate := WORKDATE;

                                    PrintOrders := (PurchOrderChoice = PurchOrderChoice::"Make Purch. Orders & Print");

                                    CLEAR(ReqWkshMakeOrders);
                                    ReqWkshMakeOrders.Set(PurchOrderHeader,EndOrderDate,PrintOrders);
                                    IF NOT NoPlanningResiliency THEN
                                      ReqWkshMakeOrders.SetPlanningResiliency;
                                    ReqWkshMakeOrders.CarryOutBatchAction("Requisition Line");
                                    CounterFailed := CounterFailed + ReqWkshMakeOrders.GetFailedCounter;
                                  END;
                                END;

                                IF ReserveforPlannedProd THEN
                                  MESSAGE(Text010);

                                IF CounterFailed > 0 THEN
                                  MESSAGE(Text013,CounterFailed);
                              END;
                               }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               TransNameEnable := TRUE;
               TransTempEnable := TRUE;
               ReqNameEnable := TRUE;
               ReqTempEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   ReqTempEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   ReqNameEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                   TransTempEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                   TransNameEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1   ;2   ;Field     ;
                  Name=ProductionOrder;
                  CaptionML=[ENU=Production Order;
                             ESM=Orden producci¢n;
                             FRC=Bon de production;
                             ENC=Production Order];
                  OptionCaptionML=[ENU=" ,Planned,Firm Planned,Firm Planned & Print";
                                   ESM=" ,Planificada,Planif. en firme,Planif. firme e impr.";
                                   FRC=" ,Planifi‚,Planifi‚ ferme,Planifi‚ ferme & imprimer";
                                   ENC=" ,Planned,Firm Planned,Firm Planned & Print"];
                  SourceExpr=ProdOrderChoice }

      { 14  ;2   ;Field     ;
                  CaptionML=[ENU=Assembly Order;
                             ESM=Pedido de ensamblado;
                             FRC=Ordre d'assemblage;
                             ENC=Assembly Order];
                  OptionCaptionML=[ENU=" ,Make Assembly Orders,Make Assembly Orders & Print";
                                   ESM=" ,Realizar pedidos de ensamblado,Realizar pedidos de ensamblado e imprimir";
                                   FRC=" ,Cr‚er des ordres d'assemblage,Cr‚er des ordres d'assemblage et les imprimer";
                                   ENC=" ,Make Assembly Orders,Make Assembly Orders & Print"];
                  SourceExpr=AsmOrderChoice }

      { 2   ;2   ;Field     ;
                  Name=PurchaseOrder;
                  CaptionML=[ENU=Purchase Order;
                             ESM=Pedido compra;
                             FRC=Bon de commande;
                             ENC=Purchase Order];
                  OptionCaptionML=[ENU=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh";
                                   ESM=" ,Crear ped. compra,Crear ped. compra e imprimir,Copiar a hoja deman.";
                                   FRC=" ,Cr‚er bons cde,Cr‚er bons cde & imprimer,Copier vers dem. achat";
                                   ENC=" ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh"];
                  SourceExpr=PurchOrderChoice;
                  OnValidate=BEGIN
                               ReqTempEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                               ReqNameEnable := PurchOrderChoice = PurchOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 9   ;2   ;Group     ;
                  GroupType=GridLayout;
                  Layout=Rows }

      { 13  ;3   ;Field     ;
                  Visible=FALSE }

      { 10  ;3   ;Group     ;
                  CaptionML=[ENU=Req. Worksheet;
                             ESM=Hoja demanda;
                             FRC=Feuille de r‚quisition;
                             ENC=Req. Worksheet];
                  GroupType=Group }

      { 11  ;4   ;Field     ;
                  Name=ReqTemp;
                  CaptionML=[ENU=Req. Wksh. Template;
                             ESM=Libro hoja demanda;
                             FRC=ModŠle feuille de r‚quisition;
                             ENC=Req. Wksh. Template];
                  SourceExpr=ReqWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=ReqTempEnable;
                  OnValidate=BEGIN
                               ReqWksh := '';
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 12  ;4   ;Field     ;
                  Name=ReqName;
                  CaptionML=[ENU=Req. Wksh. Name;
                             ESM=Nombre hoja de demanda;
                             FRC=Nom feuille de r‚quisition;
                             ENC=Req. Wksh. Name];
                  SourceExpr=ReqWksh;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=ReqNameEnable;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",ReqWkshTemp);
                             IF PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshName.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 6   ;2   ;Field     ;
                  CaptionML=[ENU=Transfer Order;
                             ESM=Ped. transfer.;
                             FRC=Ordre de transfert;
                             ENC=Transfer Order];
                  OptionCaptionML=[ENU=" ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh";
                                   ESM=" ,Crear ped. transf.,Crear ped. transf. e impr.,Copiar a hoja dem.";
                                   FRC=" ,Cr‚er ordres transfert,Cr‚er ordres transfert & imprimer,Copier vers dem. achat";
                                   ENC=" ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh"];
                  SourceExpr=TransOrderChoice;
                  OnValidate=BEGIN
                               TransTempEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                               TransNameEnable := TransOrderChoice = TransOrderChoice::"Copy to Req. Wksh";
                             END;
                              }

      { 7   ;2   ;Group     ;
                  GroupType=GridLayout;
                  Layout=Rows }

      { 8   ;3   ;Field     ;
                  Visible=FALSE }

      { 3   ;3   ;Group     ;
                  CaptionML=[ENU=Req. Worksheet;
                             ESM=Hoja demanda;
                             FRC=Feuille de r‚quisition;
                             ENC=Req. Worksheet];
                  GroupType=Group }

      { 15  ;4   ;Field     ;
                  Name=TransTemp;
                  CaptionML=[ENU=Req. Wksh. Template;
                             ESM=Libro hoja demanda;
                             FRC=ModŠle feuille de r‚quisition;
                             ENC=Req. Wksh. Template];
                  SourceExpr=TransWkshTemp;
                  TableRelation="Req. Wksh. Template";
                  Enabled=TransTempEnable;
                  OnValidate=BEGIN
                               TransWkshName := '';
                             END;

                  OnLookup=BEGIN
                             IF PAGE.RUNMODAL(PAGE::"Req. Worksheet Templates",ReqWkshTmpl) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshTmpl.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 16  ;4   ;Field     ;
                  Name=TransName;
                  CaptionML=[ENU=Req. Wksh. Name;
                             ESM=Nombre hoja de demanda;
                             FRC=Nom feuille de r‚quisition;
                             ENC=Req. Wksh. Name];
                  SourceExpr=TransWkshName;
                  TableRelation="Requisition Wksh. Name".Name;
                  Enabled=TransNameEnable;
                  OnLookup=BEGIN
                             ReqWkshName.SETFILTER("Worksheet Template Name",TransWkshTemp);
                             IF PAGE.RUNMODAL(PAGE::"Req. Wksh. Names",ReqWkshName) = ACTION::LookupOK THEN BEGIN
                               Text := ReqWkshName.Name;
                               EXIT(TRUE);
                             END;
                             EXIT(FALSE);
                           END;
                            }

      { 5   ;2   ;Group     ;
                  GroupType=GridLayout;
                  Layout=Rows }

      { 18  ;3   ;Group     ;
                  CaptionML=[ENU=Combine Transfer Orders;
                             ESM=Combinar pedidos de transferencia;
                             FRC=Combiner les ordres de transfert;
                             ENC=Combine Transfer Orders];
                  GroupType=Group }

      { 4   ;4   ;Field     ;
                  SourceExpr=CombineTransferOrders }

      { 17  ;2   ;Field     ;
                  CaptionML=[ENU=Stop and Show First Error;
                             ESM=Parar y mostrar primer error;
                             FRC=Arrˆter et montrer la premiŠre erreur;
                             ENC=Stop and Show First Error];
                  SourceExpr=NoPlanningResiliency }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1029 : TextConst 'ENU=There are no planning lines to make orders for.;ESM=No hay l¡neas de programaci¢n para crear pedidos.;FRC=Aucune ligne de planification … partir de laquelle cr‚er des commandes.;ENC=There are no planning lines to make orders for.';
      Text007@1000 : TextConst 'ENU="This template and worksheet are currently active. ";ESM="Esta plantilla y hoja est n activas. ";FRC="Ce modŠle et cette feuille sont actuellement actifs. ";ENC="This template and worksheet are currently active. "';
      Text008@1001 : TextConst 'ENU=You must select a different template name or worksheet name to copy to.;ESM=Debe seleccionar un nombre de plantilla u hoja diferente donde copiar.;FRC=S‚lectionnez un nom de modŠle ou de feuille diff‚rent dans le champ Copier vers.;ENC=You must select a different template name or worksheet name to copy to.';
      PurchOrderHeader@1017 : Record 38;
      ReqWkshTmpl@1002 : Record 244;
      ReqWkshName@1003 : Record 245;
      ReqLineFilters@1026 : Record 246;
      CarryOutAction@1005 : Codeunit 99000813;
      ReqWkshMakeOrders@1018 : Codeunit 333;
      Window@1035 : Dialog;
      ReqWkshTemp@1007 : Code[10];
      ReqWksh@1008 : Code[10];
      TransWkshTemp@1009 : Code[10];
      TransWkshName@1010 : Code[10];
      ProdWkshTempl@1028 : Code[10];
      ProdWkshName@1027 : Code[10];
      CurrReqWkshTemp@1015 : Code[10];
      CurrReqWkshName@1014 : Code[10];
      ProdOrderChoice@1011 : ' ,Planned,Firm Planned,Firm Planned & Print,Copy to Req. Wksh';
      PurchOrderChoice@1012 : ' ,Make Purch. Orders,Make Purch. Orders & Print,Copy to Req. Wksh';
      TransOrderChoice@1013 : ' ,Make Trans. Orders,Make Trans. Orders & Print,Copy to Req. Wksh';
      Text009@1016 : TextConst 'ENU=You must select a worksheet to copy to;ESM=Debe seleccionar la hoja donde copiar;FRC=S‚lectionnez la feuille vers laquelle vous souhaitez copier les donn‚es.;ENC=You must select a worksheet to copy to';
      AsmOrderChoice@1004 : ' ,Make Assembly Orders,Make Assembly Orders & Print';
      PrintOrders@1019 : Boolean;
      CombineTransferOrders@1006 : Boolean;
      ReserveforPlannedProd@1033 : Boolean;
      NoPlanningResiliency@1031 : Boolean;
      Text010@1030 : TextConst 'ENU=Components were not reserved for orders with status Planned.;ESM=No se reservaron componentes para los pedidos con estado Planificada.;FRC=Les composants n''ont pas ‚t‚ r‚serv‚s pour les commandes ayant l''‚tat Planifi‚.;ENC=Components were not reserved for orders with status Planned.';
      Text011@1032 : TextConst 'ENU=You must make order for both line %1 and %2 because they are associated.;ESM=Las l¡neas %1 y %2 est n asociadas. Debe crear pedidos para ambas.;FRC=Vous devez cr‚er un commande pour les lignes %1 et %2 car elles sont associ‚es.;ENC=You must make order for both line %1 and %2 because they are associated.';
      Text012@1034 : TextConst 'ENU=Carrying Out Actions  #1########## @2@@@@@@@@@@@@@;ESM=Ejecutando acciones  #1########## @2@@@@@@@@@@@@@;FRC=Ex‚cuter les actions  #1########## @2@@@@@@@@@@@@@;ENC=Carrying Out Actions  #1########## @2@@@@@@@@@@@@@';
      Counter@1036 : Integer;
      CounterTotal@1037 : Integer;
      CounterFailed@1038 : Integer;
      Text013@1039 : TextConst 'ENU=Not all Requistion Lines were carried out.\A total of %1 lines were not carried out due to errors encountered.;ESM=No se ejecutaron todas las l¡neas de demanda.\No se ejecutaron un total de %1 l¡neas por errores detectados.;FRC=Les lignes de r‚quisition n''ont pas toutes ‚t‚ ex‚cut‚es.\%1 lignes au total n''ont pas ‚t‚ ex‚cut‚es en raison d''erreurs.;ENC=Not all Requistion Lines were carried out.\A total of %1 lines were not carried out due to errors encountered.';
      EndOrderDate@1022 : Date;
      ReqTempEnable@19040225 : Boolean INDATASET;
      ReqNameEnable@19051726 : Boolean INDATASET;
      TransTempEnable@19079481 : Boolean INDATASET;
      TransNameEnable@19074510 : Boolean INDATASET;

    PROCEDURE CarryOutActions@20(SourceType@1004 : 'Purchase,Transfer,Production,Assembly';Choice@1002 : Option;WkshTempl@1001 : Code[10];WkshName@1000 : Code[10]) : Boolean;
    BEGIN
      IF NoPlanningResiliency THEN BEGIN
        CarryOutAction.SetTryParameters(SourceType,Choice,WkshTempl,WkshName);
        CarryOutAction.RUN("Requisition Line");
      END ELSE
        IF NOT CarryOutAction.TryCarryOutAction(SourceType,"Requisition Line",Choice,WkshTempl,WkshName) THEN
          CounterFailed := CounterFailed + 1;
    END;

    PROCEDURE SetReqWkshLine@1(VAR CurrentReqLine@1000 : Record 246);
    BEGIN
      CurrReqWkshTemp := CurrentReqLine."Worksheet Template Name";
      CurrReqWkshName := CurrentReqLine."Journal Batch Name";
      ReqLineFilters.COPY(CurrentReqLine);
    END;

    PROCEDURE SetDemandOrder@3(VAR ReqLine@1005 : Record 246;MfgUserTempl@1000 : Record 5525);
    BEGIN
      SetReqWkshLine(ReqLine);

      InitializeRequest(
        MfgUserTempl."Create Production Order",
        MfgUserTempl."Create Purchase Order",
        MfgUserTempl."Create Transfer Order",
        MfgUserTempl."Create Assembly Order");

      ReqWkshTemp := MfgUserTempl."Purchase Req. Wksh. Template";
      ReqWksh := MfgUserTempl."Purchase Wksh. Name";
      ProdWkshTempl := MfgUserTempl."Prod. Req. Wksh. Template";
      ProdWkshName := MfgUserTempl."Prod. Wksh. Name";
      TransWkshTemp := MfgUserTempl."Transfer Req. Wksh. Template";
      TransWkshName := MfgUserTempl."Transfer Wksh. Name";

      WITH ReqLineFilters DO
        CASE MfgUserTempl."Make Orders" OF
          MfgUserTempl."Make Orders"::"The Active Line":
            BEGIN
              ReqLineFilters := ReqLine;
              SETRECFILTER;
            END;
          MfgUserTempl."Make Orders"::"The Active Order":
            BEGIN
              SETCURRENTKEY(
                "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              COPYFILTERS(ReqLine);
              SETRANGE("Demand Type",ReqLine."Demand Type");
              SETRANGE("Demand Subtype",ReqLine."Demand Subtype");
              SETRANGE("Demand Order No.",ReqLine."Demand Order No.");
            END;
          MfgUserTempl."Make Orders"::"All Lines":
            BEGIN
              SETCURRENTKEY(
                "User ID","Worksheet Template Name","Journal Batch Name","Line No.");
              COPY(ReqLine);
            END;
        END;
    END;

    PROCEDURE InitializeRequest@2(NewProdOrderChoice@1002 : Option;NewPurchOrderChoice@1001 : Option;NewTransOrderChoice@1000 : Option;NewAsmOrderChoice@1003 : Option);
    BEGIN
      ProdOrderChoice := NewProdOrderChoice;
      PurchOrderChoice := NewPurchOrderChoice;
      TransOrderChoice := NewTransOrderChoice;
      AsmOrderChoice := NewAsmOrderChoice;
    END;

    PROCEDURE InitializeRequest2@11(NewProdOrderChoice@1006 : Option;NewPurchOrderChoice@1005 : Option;NewTransOrderChoice@1004 : Option;NewAsmOrderChoice@1007 : Option;NewReqWkshTemp@1002 : Code[10];NewReqWksh@1001 : Code[10];NewTransWkshTemp@1000 : Code[10];NewTransWkshName@1003 : Code[10]);
    BEGIN
      InitializeRequest(NewProdOrderChoice,NewPurchOrderChoice,NewTransOrderChoice,NewAsmOrderChoice);
      ReqWkshTemp := NewReqWkshTemp;
      ReqWksh := NewReqWksh;
      TransWkshTemp := NewTransWkshTemp;
      TransWkshName := NewTransWkshName;
    END;

    PROCEDURE SetReqLineFilters@5();
    BEGIN
      WITH "Requisition Line" DO BEGIN
        IF ReqLineFilters.GETFILTERS <> '' THEN
          COPY(ReqLineFilters);
        SETRANGE("Worksheet Template Name",CurrReqWkshTemp);
        SETRANGE("Journal Batch Name",CurrReqWkshName);
        SETRANGE(Type,Type::Item);
        SETFILTER("Action Message",'<>%1',"Action Message"::" ");
      END;
    END;

    PROCEDURE CheckCopyToWksh@4(ToReqWkshTempl@1000 : Code[10];ToReqWkshName@1001 : Code[10]);
    VAR
      ReqLine@1002 : Record 246;
    BEGIN
      IF (ToReqWkshTempl <> '') AND
         (CurrReqWkshTemp = ToReqWkshTempl) AND
         (CurrReqWkshName = ToReqWkshName)
      THEN
        ERROR(Text007 + Text008);

      IF (ToReqWkshTempl = '') OR (ToReqWkshName = '') THEN
        ERROR(Text009);

      WITH ReqLine DO BEGIN
        IF "Requisition Line"."Planning Line Origin" = "Planning Line Origin"::"Order Planning" THEN
          EXIT;

        SETRANGE("Worksheet Template Name",ToReqWkshTempl);
        SETRANGE("Journal Batch Name",ToReqWkshName);
        DELETEALL(TRUE);
      END;
    END;

    PROCEDURE CheckPreconditions@6();
    BEGIN
      WITH "Requisition Line" DO
        REPEAT
          CheckLine;
        UNTIL NEXT = 0;
    END;

    PROCEDURE CheckLine@7();
    VAR
      SalesLine@1000 : Record 37;
      ProdOrderComp@1001 : Record 5407;
      ServLine@1006 : Record 5902;
      JobPlanningLine@1007 : Record 1003;
      AsmLine@1002 : Record 901;
      ReqLine2@1003 : Record 246;
    BEGIN
      WITH "Requisition Line" DO BEGIN
        IF "Planning Line Origin" <> "Planning Line Origin"::"Order Planning" THEN
          EXIT;

        CheckAssociations("Requisition Line");

        IF "Planning Level" > 0 THEN
          EXIT;

        IF "Replenishment System" IN ["Replenishment System"::Purchase,
                                      "Replenishment System"::Transfer]
        THEN
          TESTFIELD("Supply From");

        CASE "Demand Type" OF
          DATABASE::"Sales Line":
            BEGIN
              SalesLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              SalesLine.TESTFIELD(Type,SalesLine.Type::Item);
              IF NOT (("Demand Date" = WORKDATE) AND (SalesLine."Shipment Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",SalesLine."Shipment Date");
              TESTFIELD("No.",SalesLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",SalesLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",SalesLine."Variant Code");
              TESTFIELD("Location Code",SalesLine."Location Code");
              SalesLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -SalesLine.SignedXX(SalesLine."Outstanding Qty. (Base)" - SalesLine."Reserved Qty. (Base)"))
            END;
          DATABASE::"Prod. Order Component":
            BEGIN
              ProdOrderComp.GET("Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
              TESTFIELD("No.",ProdOrderComp."Item No.");
              IF NOT (("Demand Date" = WORKDATE) AND (ProdOrderComp."Due Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",ProdOrderComp."Due Date");
              TESTFIELD("Qty. per UOM (Demand)",ProdOrderComp."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",ProdOrderComp."Variant Code");
              TESTFIELD("Location Code",ProdOrderComp."Location Code");
              ProdOrderComp.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                ProdOrderComp."Remaining Qty. (Base)" - ProdOrderComp."Reserved Qty. (Base)");
              IF (ProdOrderChoice = ProdOrderChoice::Planned) AND Reserve THEN
                ReserveforPlannedProd := TRUE;
            END;
          DATABASE::"Service Line":
            BEGIN
              ServLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              ServLine.TESTFIELD(Type,ServLine.Type::Item);
              IF NOT (("Demand Date" = WORKDATE) AND (ServLine."Needed by Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",ServLine."Needed by Date");
              TESTFIELD("No.",ServLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",ServLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",ServLine."Variant Code");
              TESTFIELD("Location Code",ServLine."Location Code");
              ServLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -ServLine.SignedXX(ServLine."Outstanding Qty. (Base)" - ServLine."Reserved Qty. (Base)"))
            END;
          DATABASE::"Job Planning Line":
            BEGIN
              JobPlanningLine.SETRANGE("Job Contract Entry No.","Demand Line No.");
              JobPlanningLine.FINDFIRST;
              JobPlanningLine.TESTFIELD(Type,JobPlanningLine.Type::Item);
              JobPlanningLine.TESTFIELD("Job No.");
              JobPlanningLine.TESTFIELD(Status,JobPlanningLine.Status::Order);
              IF NOT (("Demand Date" = WORKDATE) AND (JobPlanningLine."Planning Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",JobPlanningLine."Planning Date");
              TESTFIELD("No.",JobPlanningLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",JobPlanningLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",JobPlanningLine."Variant Code");
              TESTFIELD("Location Code",JobPlanningLine."Location Code");
              JobPlanningLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                JobPlanningLine."Remaining Qty. (Base)" - JobPlanningLine."Reserved Qty. (Base)")
            END;
          DATABASE::"Assembly Line":
            BEGIN
              AsmLine.GET("Demand Subtype","Demand Order No.","Demand Line No.");
              AsmLine.TESTFIELD(Type,AsmLine.Type::Item);
              IF NOT (("Demand Date" = WORKDATE) AND (AsmLine."Due Date" IN [0D,WORKDATE])) THEN
                TESTFIELD("Demand Date",AsmLine."Due Date");
              TESTFIELD("No.",AsmLine."No.");
              TESTFIELD("Qty. per UOM (Demand)",AsmLine."Qty. per Unit of Measure");
              TESTFIELD("Variant Code",AsmLine."Variant Code");
              TESTFIELD("Location Code",AsmLine."Location Code");
              AsmLine.CALCFIELDS("Reserved Qty. (Base)");
              TESTFIELD(
                "Demand Quantity (Base)",
                -AsmLine.SignedXX(AsmLine."Remaining Quantity (Base)" - AsmLine."Reserved Qty. (Base)"))
            END;
        END;

        ReqLine2.SETCURRENTKEY(
          "User ID","Demand Type","Demand Subtype","Demand Order No.","Demand Line No.","Demand Ref. No.");
        ReqLine2.SETFILTER("User ID",'<>%1',USERID);
        ReqLine2.SETRANGE("Demand Type","Demand Type");
        ReqLine2.SETRANGE("Demand Subtype","Demand Subtype");
        ReqLine2.SETRANGE("Demand Order No.","Demand Order No.");
        ReqLine2.SETRANGE("Demand Line No.","Demand Line No.");
        ReqLine2.SETRANGE("Demand Ref. No.","Demand Ref. No.");
        ReqLine2.DELETEALL(TRUE);
      END;
    END;

    PROCEDURE CheckAssociations@8(VAR ReqLine@1000 : Record 246);
    VAR
      ReqLine2@1002 : Record 246;
      ReqLine3@1001 : Record 246;
    BEGIN
      WITH ReqLine DO BEGIN
        ReqLine3.COPY(ReqLine);
        ReqLine2 := ReqLine;

        IF ReqLine2."Planning Level" > 0 THEN
          WHILE (ReqLine2.NEXT(-1) <> 0) AND (ReqLine2."Planning Level" > 0) DO;

        REPEAT
          ReqLine3 := ReqLine2;
          IF NOT ReqLine3.FIND THEN
            ERROR(Text011,"Line No.",ReqLine2."Line No.");
        UNTIL (ReqLine2.NEXT = 0) OR (ReqLine2."Planning Level" = 0)
      END;
    END;

    PROCEDURE WindowUpdate@9();
    BEGIN
      Counter := Counter + 1;
      Window.UPDATE(1,"Requisition Line"."No.");
      Window.UPDATE(2,ROUND(Counter / CounterTotal * 10000,1));
    END;

    LOCAL PROCEDURE PurchaseSuggestionExists@10(VAR RequisitionLine@1001 : Record 246) : Boolean;
    VAR
      StopLoop@1000 : Boolean;
      PurchaseExists@1002 : Boolean;
    BEGIN
      WITH RequisitionLine DO BEGIN
        IF FINDSET THEN
          REPEAT
            PurchaseExists := "Ref. Order Type" = "Ref. Order Type"::Purchase;
            IF NOT PurchaseExists THEN
              StopLoop := NEXT = 0
            ELSE
              StopLoop := TRUE;
          UNTIL StopLoop;
        IF PurchaseExists THEN
          SETRANGE("Ref. Order Type","Ref. Order Type"::Purchase);
      END;
      EXIT(PurchaseExists);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

