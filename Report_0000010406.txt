OBJECT Report 10406 Bank Rec. Process Lines
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVNA7.10;
  }
  PROPERTIES
  {
    Permissions=TableData 271=rm,
                TableData 272=rm;
    CaptionML=[ENU=Bank Rec. Process Lines;
               ESM=L¡neas proceso concil.;
               FRC=Lignes de traitement du rappr. bancaire;
               ENC=Bank Rec. Process Lines];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 8875;    ;DataItem;                    ;
               DataItemTable=Table10120;
               DataItemTableView=SORTING(Bank Account No.,Statement No.);
               MaxIteration=1;
               OnPreDataItem=BEGIN
                               SETRANGE("Bank Account No.",DoBankAcct);
                               SETRANGE("Statement No.",DoStatementNo);
                             END;
                              }

    { 1224;1   ;DataItem;                    ;
               DataItemTable=Table10121;
               DataItemTableView=SORTING(Bank Account No.,Statement No.,Record Type,Line No.);
               MaxIteration=0;
               ReqFilterFields=Posting Date,Document Type,Document No.;
               DataItemLink=Bank Account No.=FIELD(Bank Account No.),
                            Statement No.=FIELD(Statement No.) }

    { 5692;1   ;DataItem;RunProcesses        ;
               DataItemTable=Table2000000026;
               DataItemTableView=SORTING(Number);
               MaxIteration=1;
               OnAfterGetRecord=BEGIN
                                  IF DoSuggestLines THEN
                                    SuggestLines;

                                  IF DoMarkLines THEN
                                    MarkLines;

                                  IF DoAdjLines THEN
                                    RecordAdjustmentLines;

                                  IF DoClearLines THEN
                                    ClearLines;
                                END;
                                 }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               MarkAsClearedVisible := TRUE;
               ReplaceLinesVisible := TRUE;
             END;

      OnOpenPage=BEGIN
                   ReplaceLinesVisible := DoSuggestLines;
                   MarkAsClearedVisible := DoMarkLines;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1020002;2;Field     ;
                  CaptionML=[ENU=Record type to process;
                             ESM=Tipo registro para procesar;
                             FRC=Type d'enregistrement … traiter;
                             ENC=Record type to process];
                  OptionCaptionML=[ENU=Checks,Deposits,Both;
                                   ESM=Cheques,Dep¢sitos,Ambos;
                                   FRC=ChŠques,D‚p“ts,Les deux;
                                   ENC=Cheques,Deposits,Both];
                  SourceExpr=RecordTypeToProcess }

      { 1020006;2;Field     ;
                  Name=MarkAsCleared;
                  CaptionML=[ENU=Mark lines as cleared;
                             ESM=Marcar l¡neas como borradas;
                             FRC=Marquer les lignes comme effac‚es;
                             ENC=Mark lines as cleared];
                  SourceExpr=MarkCleared;
                  Visible=MarkAsClearedVisible }

      { 1020000;2;Field     ;
                  Name=ReplaceLines;
                  CaptionML=[ENU=Replace existing lines;
                             ESM=Reemplazar l¡ns. existentes;
                             FRC=Remplacer les lignes existantes;
                             ENC=Replace existing lines];
                  SourceExpr=ReplaceExisting;
                  Visible=ReplaceLinesVisible }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      DoSuggestLines@1020009 : Boolean;
      DoMarkLines@1020011 : Boolean;
      DoAdjLines@1020018 : Boolean;
      DoClearLines@1020022 : Boolean;
      ReplaceExisting@1020005 : Boolean;
      MarkCleared@1020010 : Boolean;
      RecordTypeToProcess@1020008 : 'Checks,Deposits,Both';
      LastLineNo@1020004 : Integer;
      AdjAmount@1020015 : Decimal;
      DoBankAcct@1020020 : Code[20];
      DoStatementNo@1020021 : Code[20];
      GLSetup@1020014 : Record 98;
      BankRecLine@1020002 : Record 10121;
      Window@1020001 : Dialog;
      Text001@1020006 : TextConst 'ENU=Processing bank account           #1####################\\;ESM=Procesando cuentas                 #1####################\\;FRC=Traitement du compte bancaire                    #1####################\\;ENC=Processing bank account            #1####################\\';
      Text002@1020003 : TextConst 'ENU=Reading bank ledger entries       #2##########\;ESM=Leyendo movs. banco                #2##########\;FRC=Lecture des ‚critures du grand livre de banque   #2##########\;ENC=Reading bank ledger entries        #2##########\';
      Text003@1020000 : TextConst 'ENU=Reading check ledger entries      #3##########\;ESM=Leyendo movs. cheques              #3##########\;FRC=Lecture des ‚critures du grand livre de contr“le #3##########\;ENC=Reading cheque ledger entries      #3##########\';
      Text004@1020012 : TextConst 'ENU="                      Statement   #2####################\";ESM="                      Est. cta.    #2####################\";FRC="                      Relev‚                     #2####################\";ENC="                      Statement    #2####################\"';
      Text005@1020007 : TextConst 'ENU="                  Marking lines   #3####################";ESM="                  Marcando l¡neas  #3####################";FRC="                  Marquage des lignes            #3####################";ENC="                  Marking lines    #3####################"';
      Text006@1020016 : TextConst 'ENU="              Processing lines    #3####################";ESM="              Procesando l¡neas    #3####################";FRC="              Traitement des lignes              #3####################";ENC="              Processing lines     #3####################"';
      Text007@1020013 : TextConst 'ENU="                  Clearing lines  #3####################";ESM="                  Borrando l¡neas  #3####################";FRC="                  Suppression des lignes         #3####################";ENC="                  Clearing lines   #3####################"';
      Text008@1480000 : TextConst 'ENU=Collapsing Deposit Lines...;ESM=Contrayendo l¡neas dep¢sito...;FRC=R‚duire les lignes de d‚p“t...;ENC=Collapsing Deposit Lines...';
      ReplaceLinesVisible@19078467 : Boolean INDATASET;
      MarkAsClearedVisible@19051436 : Boolean INDATASET;

    PROCEDURE SetDoSuggestLines@1020004(UseDo@1020000 : Boolean;UseBankAcct@1020001 : Code[20];UseStatementNo@1020002 : Code[20]);
    BEGIN
      DoSuggestLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    PROCEDURE SetDoMarkLines@1020005(UseDo@1020000 : Boolean;UseBankAcct@1020002 : Code[20];UseStatementNo@1020001 : Code[20]);
    BEGIN
      DoMarkLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    PROCEDURE SetDoAdjLines@1020009(UseDo@1020000 : Boolean;UseBankAcct@1020002 : Code[20];UseStatementNo@1020001 : Code[20]);
    BEGIN
      DoAdjLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    PROCEDURE SetDoClearLines@1020012(UseDo@1020000 : Boolean;UseBankAcct@1020002 : Code[20];UseStatementNo@1020001 : Code[20]);
    BEGIN
      DoClearLines := UseDo;
      DoBankAcct := UseBankAcct;
      DoStatementNo := UseStatementNo;
    END;

    PROCEDURE SuggestLines@1020000();
    VAR
      RecordType@1020005 : 'Check,Deposit,Adjustment';
      BankLedger@1020004 : Record 271;
      CheckLedger@1020003 : Record 272;
      BankRecLine2@1480000 : Record 10121;
    BEGIN
      Window.OPEN(Text001 + Text002 + Text003);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");

      IF ReplaceExisting THEN BEGIN
        BankRecLine.SETCURRENTKEY("Bank Account No.","Statement No.");
        BankRecLine.SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
        BankRecLine.SETRANGE("Statement No.","Bank Rec. Header"."Statement No.");
        IF RecordTypeToProcess <> RecordTypeToProcess::Both THEN
          BankRecLine.SETRANGE("Record Type",RecordTypeToProcess);
        BankRecLine.DELETEALL(TRUE);
        BankRecLine.RESET;
      END;

      WITH BankLedger DO BEGIN
        SETCURRENTKEY("Bank Account No.","Posting Date","Statement Status");
        SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
        SETRANGE("Statement Status","Statement Status"::Open);
        IF "Bank Rec. Line".GETFILTER("Posting Date") = '' THEN
          SETRANGE("Posting Date",0D,"Bank Rec. Header"."Statement Date")
        ELSE
          "Bank Rec. Line".COPYFILTER("Posting Date","Posting Date");
        "Bank Rec. Line".COPYFILTER("Document Type","Document Type");
        "Bank Rec. Line".COPYFILTER("Document No.","Document No.");
        "Bank Rec. Line".COPYFILTER("External Document No.","External Document No.");
        IF FIND('-') THEN
          REPEAT
            Window.UPDATE(2,"Entry No.");
            CheckLedger.SETCURRENTKEY("Bank Account Ledger Entry No.");
            CheckLedger.SETRANGE("Bank Account Ledger Entry No.","Entry No.");
            CheckLedger.SETRANGE("Statement Status","Statement Status"::Open);
            IF CheckLedger.FIND('-') THEN BEGIN
              REPEAT
                Window.UPDATE(3,CheckLedger."Entry No.");
                IF RecordTypeToProcess IN [RecordTypeToProcess::Both,RecordTypeToProcess::Checks] THEN
                  WriteLine("Bank Rec. Header",
                    BankRecLine,
                    ReplaceExisting,
                    RecordType::Check,
                    CheckLedger."Document Type",
                    CheckLedger."Check No.",
                    CheckLedger.Description,
                    CheckLedger.Amount,
                    CheckLedger."External Document No.",
                    "Entry No.",
                    CheckLedger."Entry No.",
                    CheckLedger."Posting Date",
                    "Global Dimension 1 Code",
                    "Global Dimension 2 Code",
                    "Dimension Set ID");

              UNTIL CheckLedger.NEXT = 0;
            END ELSE BEGIN
              IF RecordTypeToProcess IN [RecordTypeToProcess::Both,RecordTypeToProcess::Deposits] THEN
                WriteLine("Bank Rec. Header",
                  BankRecLine,
                  ReplaceExisting,
                  RecordType::Deposit,
                  "Document Type",
                  "Document No.",
                  Description,
                  Amount,
                  "External Document No.",
                  "Entry No.",
                  0,
                  "Posting Date",
                  "Global Dimension 1 Code",
                  "Global Dimension 2 Code",
                  "Dimension Set ID");
            END;
          UNTIL NEXT = 0;
      END;
      Window.CLOSE;
      IF RecordTypeToProcess IN [RecordTypeToProcess::Both,RecordTypeToProcess::Deposits] THEN BEGIN
        Window.OPEN(Text008);
        WITH BankRecLine DO BEGIN
          RESET;
          SETCURRENTKEY("Bank Account No.","Statement No.","Record Type");
          SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
          SETRANGE("Statement No.","Bank Rec. Header"."Statement No.");
          SETRANGE("Record Type","Record Type"::Deposit);
          SETRANGE("Collapse Status","Collapse Status"::"Expanded Deposit Line");
          IF FIND('-') THEN
            REPEAT
              BankRecLine2 := BankRecLine;
              CollapseLines(BankRecLine2);
            UNTIL NEXT = 0;
          RESET;
        END;
        Window.CLOSE;
      END;
    END;

    PROCEDURE MarkLines@1020003();
    BEGIN
      Window.OPEN(Text001 + Text004 + Text005);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");
      Window.UPDATE(2,"Bank Rec. Header"."Statement No.");

      BankRecLine.COPYFILTERS("Bank Rec. Line");
      IF RecordTypeToProcess = RecordTypeToProcess::Both THEN
        BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check,
          BankRecLine."Record Type"::Deposit)
      ELSE
        IF RecordTypeToProcess = RecordTypeToProcess::Checks THEN
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check)
        ELSE
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Deposit);

      IF BankRecLine.FIND('-') THEN
        REPEAT
          BankRecLine.VALIDATE(Cleared,MarkCleared);
          BankRecLine.MODIFY;
          Window.UPDATE(3,BankRecLine."Line No.");
        UNTIL BankRecLine.NEXT = 0;

      Window.CLOSE;
    END;

    PROCEDURE RecordAdjustmentLines@1020008();
    VAR
      UseRecordType@1020001 : 'Check,Deposit,Adjustment';
      NewBankRecLine@1020000 : Record 10121;
    BEGIN
      Window.OPEN(Text001 + Text004 + Text006);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");
      Window.UPDATE(2,"Bank Rec. Header"."Statement No.");

      GLSetup.GET;

      WITH BankRecLine DO BEGIN
        RESET;
        SETCURRENTKEY("Bank Account No.",
          "Statement No.",
          "Record Type",
          Cleared);
        SETRANGE("Bank Account No.","Bank Rec. Header"."Bank Account No.");
        SETRANGE("Statement No.","Bank Rec. Header"."Statement No.");
        IF RecordTypeToProcess <> RecordTypeToProcess::Both THEN
          SETRANGE("Record Type",RecordTypeToProcess);
        SETRANGE(Cleared,TRUE);

        IF FIND('-') THEN
          REPEAT
            Window.UPDATE(3,"Line No.");
            IF "Record Type" = "Record Type"::Check THEN
              AdjAmount := -("Cleared Amount" - Amount)
            ELSE
              AdjAmount := "Cleared Amount" - Amount;
            IF AdjAmount <> 0 THEN BEGIN
              WriteAdjLine("Bank Rec. Header",
                NewBankRecLine,
                UseRecordType::Adjustment,
                "Document Type",
                "Document No.",
                Description,
                AdjAmount,
                "External Document No.",
                "Record Type",
                "Dimension Set ID");
              MODIFY;
            END;
          UNTIL NEXT = 0;
      END;
      Window.CLOSE;
    END;

    PROCEDURE ClearLines@1020010();
    BEGIN
      Window.OPEN(Text001 + Text004 + Text007);
      Window.UPDATE(1,"Bank Rec. Header"."Bank Account No.");
      Window.UPDATE(2,"Bank Rec. Header"."Statement No.");

      BankRecLine.COPYFILTERS("Bank Rec. Line");
      IF RecordTypeToProcess = RecordTypeToProcess::Both THEN
        BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check,
          BankRecLine."Record Type"::Deposit)
      ELSE
        IF RecordTypeToProcess = RecordTypeToProcess::Checks THEN
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Check)
        ELSE
          BankRecLine.SETRANGE("Record Type",BankRecLine."Record Type"::Deposit);

      IF BankRecLine.FIND('-') THEN
        REPEAT
          BankRecLine.DELETE(TRUE);
          Window.UPDATE(3,BankRecLine."Line No.");
        UNTIL BankRecLine.NEXT = 0;

      Window.CLOSE;
    END;

    LOCAL PROCEDURE WriteLine@1020002(BankRecHdr2@1020002 : Record 10120;VAR BankRecLine2@1020010 : Record 10121;UseReplaceExisting@1020003 : Boolean;UseRecordType@1020004 : 'Check,Deposit,Adjustment';UseDocumentType@1020006 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';UseDocumentNo@1020007 : Code[20];UseDescription@1020009 : Text[50];UseAmount@1020008 : Decimal;UseExtDocNo@1020000 : Code[35];UseBankLedgerEntryNo@1020011 : Integer;UseCheckLedgerEntryNo@1020012 : Integer;UsePostingDate@1020014 : Date;UseDimCode1@1480001 : Code[20];UseDimCode2@1480000 : Code[20];UseDimSetID@1020005 : Integer);
    VAR
      Ok@1020001 : Boolean;
    BEGIN
      IF (RecordTypeToProcess = RecordTypeToProcess::Both) OR
         (UseRecordType = RecordTypeToProcess)
      THEN
        WITH BankRecHdr2 DO BEGIN
          BankRecLine2.SETCURRENTKEY("Bank Account No.","Statement No.");
          BankRecLine2.SETRANGE("Bank Account No.","Bank Account No.");
          BankRecLine2.SETRANGE("Statement No.","Statement No.");
          IF BankRecLine2.FIND('+') THEN
            LastLineNo := BankRecLine2."Line No."
          ELSE
            LastLineNo := 0;
          BankRecLine2.RESET;

          BankRecLine2.INIT;
          BankRecLine2."Bank Account No." := "Bank Account No.";
          BankRecLine2."Statement No." := "Statement No.";
          BankRecLine2."Record Type" := UseRecordType;
          BankRecLine2."Posting Date" := UsePostingDate;
          BankRecLine2."Document Type" := UseDocumentType;
          BankRecLine2."Document No." := UseDocumentNo;
          BankRecLine2.Description := UseDescription;
          BankRecLine2.Amount := UseAmount;
          BankRecLine2.VALIDATE("Currency Code","Currency Code");
          BankRecLine2."External Document No." := UseExtDocNo;
          BankRecLine2."Bank Ledger Entry No." := UseBankLedgerEntryNo;
          BankRecLine2."Check Ledger Entry No." := UseCheckLedgerEntryNo;
          BankRecLine2."Shortcut Dimension 1 Code" := UseDimCode1;
          BankRecLine2."Shortcut Dimension 2 Code" := UseDimCode2;
          BankRecLine2."Dimension Set ID" := UseDimSetID;
          IF (UseRecordType = UseRecordType::Deposit) AND (UseExtDocNo <> '') THEN
            BankRecLine2."Collapse Status" := BankRecLine2."Collapse Status"::"Expanded Deposit Line";

          IF UseReplaceExisting THEN
            InsertLine(BankRecLine2)
          ELSE BEGIN
            BankRecLine2.SETCURRENTKEY("Bank Account No.",
              "Statement No.",
              "Posting Date",
              "Document Type",
              "Document No.",
              "External Document No.");
            BankRecLine2.SETRANGE("Bank Account No.","Bank Account No.");
            BankRecLine2.SETRANGE("Statement No.","Statement No.");
            BankRecLine2.SETRANGE("Bank Ledger Entry No.",UseBankLedgerEntryNo);
            BankRecLine2.SETRANGE("Check Ledger Entry No.",UseCheckLedgerEntryNo);
            Ok := BankRecLine2.FIND('-');
            IF Ok THEN BEGIN
              BankRecLine2.Description := UseDescription;
              BankRecLine2.Amount := UseAmount;
              BankRecLine2.VALIDATE("Currency Code","Currency Code");
              BankRecLine2.MODIFY;
            END ELSE
              InsertLine(BankRecLine2);
          END;
        END;
    END;

    LOCAL PROCEDURE InsertLine@1020001(VAR BankRecLine3@1020001 : Record 10121);
    VAR
      Ok@1020000 : Boolean;
    BEGIN
      REPEAT
        LastLineNo := LastLineNo + 10000;
        BankRecLine3."Line No." := LastLineNo;
        Ok := BankRecLine3.INSERT(TRUE);
      UNTIL Ok
    END;

    LOCAL PROCEDURE WriteAdjLine@1020007(BankRecHdr2@1020002 : Record 10120;VAR BankRecLine2@1020010 : Record 10121;UseRecordType@1020004 : 'Check,Deposit,Adjustment';UseDocumentType@1020006 : ' ,Payment,Invoice,Credit Memo,Finance Charge Memo,Reminder,Refund';UseDocumentNo@1020007 : Code[20];UseDescription@1020009 : Text[50];UseAmount@1020008 : Decimal;UseExtDocNo@1020000 : Code[35];UseSourceType@1020003 : 'Check,Deposit,Adjustment';DimSetID@1020011 : Integer);
    VAR
      Ok@1020001 : Boolean;
      WorkDocumentNo@1020012 : Code[20];
      NoSeriesMgmnt@1020005 : Codeunit 396;
    BEGIN
      WITH BankRecHdr2 DO BEGIN
        IF BankRecLine2.FIND('+') THEN
          LastLineNo := BankRecLine2."Line No."
        ELSE
          LastLineNo := 0;

        NoSeriesMgmnt.InitSeries(GLSetup."Bank Rec. Adj. Doc. Nos.",'',"Statement Date",WorkDocumentNo,
          BankRecLine2."Adj. No. Series");

        BankRecLine2.INIT;
        BankRecLine2."Bank Account No." := "Bank Account No.";
        BankRecLine2."Statement No." := "Statement No.";
        BankRecLine2."Record Type" := UseRecordType;
        BankRecLine2."Posting Date" := "Statement Date";
        BankRecLine2."Document Type" := UseDocumentType;
        BankRecLine2."Document No." := WorkDocumentNo;
        BankRecLine2."Dimension Set ID" := DimSetID;
        BankRecLine2.Description := COPYSTR(STRSUBSTNO('Adjustment to %1',UseDescription),1,50);
        BankRecLine2.Cleared := TRUE;
        BankRecLine2.Amount := UseAmount;
        BankRecLine2."Cleared Amount" := BankRecLine2.Amount;
        BankRecLine2.VALIDATE("Currency Code","Currency Code");
        BankRecLine2."External Document No." := UseExtDocNo;
        BankRecLine2."Account Type" := BankRecLine2."Account Type"::"Bank Account";
        BankRecLine2."Account No." := "Bank Account No.";
        BankRecLine2."Adj. Source Record ID" := UseSourceType;
        BankRecLine2."Adj. Source Document No." := UseDocumentNo;

        REPEAT
          LastLineNo := LastLineNo + 10000;
          BankRecLine2."Line No." := LastLineNo;
          Ok := BankRecLine2.INSERT;
        UNTIL Ok
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

