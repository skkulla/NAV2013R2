OBJECT Page 1040 Copy Job
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Copy Job;
               ESM=Copiar proyecto;
               FRC=Copier projet;
               ENC=Copy Job];
    PageType=StandardDialog;
    OnOpenPage=BEGIN
                 PlanningLineType := PlanningLineType::"Schedule+Contract";
                 LedgerEntryType := LedgerEntryType::"Usage+Sale";
                 ValidateSource;
               END;

    OnQueryClosePage=BEGIN
                       IF CloseAction IN [ACTION::OK,ACTION::LookupOK] THEN BEGIN
                         ValidateUserInput;
                         CopyJob.SetCopyOptions(CopyJobPrices,CopyQuantity,CopyDimensions,Source,PlanningLineType,LedgerEntryType);
                         CopyJob.SetJobTaskRange(FromJobTaskNo,ToJobTaskNo);
                         CopyJob.SetJobTaskDateRange(FromDate,ToDate);
                         CopyJob.CopyJob(SourceJob,TargetJobNo,TargetJobDescription,TargetBillToCustomerNo);
                         MESSAGE(Text001);
                       END
                     END;

  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 15  ;1   ;Group     ;
                CaptionML=[ENU=Copy from;
                           ESM=Copiar desde;
                           FRC=Copier de;
                           ENC=Copy from] }

    { 11  ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           ESM=Nß proyecto;
                           FRC=N¯ projet;
                           ENC=Job No.];
                SourceExpr=SourceJobNo;
                TableRelation=Job;
                OnValidate=BEGIN
                             IF (SourceJobNo <> '') AND NOT SourceJob.GET(SourceJobNo) THEN
                               ERROR(Text003,SourceJob.TABLECAPTION,SourceJobNo);
                             TargetJobDescription := SourceJob.Description;
                             TargetBillToCustomerNo := SourceJob."Bill-to Customer No.";

                             FromJobTaskNo := '';
                             ToJobTaskNo := '';
                           END;
                            }

    { 9   ;2   ;Field     ;
                CaptionML=[ENU=Job Task No. from;
                           ESM=Nß tarea proyecto desde;
                           FRC=N¯ tÉche projet de;
                           ENC=Job Task No. from];
                SourceExpr=FromJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (FromJobTaskNo <> '') AND NOT JobTask.GET(SourceJob."No.",FromJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,FromJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJob."No." <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJob."No.");
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               FromJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 18  ;2   ;Field     ;
                CaptionML=[ENU=Job Task No. to;
                           ESM=Nß tarea proyecto hasta;
                           FRC=N¯ tÉche projet vers;
                           ENC=Job Task No. to];
                SourceExpr=ToJobTaskNo;
                OnValidate=VAR
                             JobTask@1000 : Record 1001;
                           BEGIN
                             IF (ToJobTaskNo <> '') AND NOT JobTask.GET(SourceJobNo,ToJobTaskNo) THEN
                               ERROR(Text003,JobTask.TABLECAPTION,ToJobTaskNo);
                           END;

                OnLookup=VAR
                           JobTask@1000 : Record 1001;
                         BEGIN
                           IF SourceJobNo <> '' THEN BEGIN
                             JobTask.SETRANGE("Job No.",SourceJobNo);
                             IF PAGE.RUNMODAL(PAGE::"Job Task List",JobTask) = ACTION::LookupOK THEN
                               ToJobTaskNo := JobTask."Job Task No.";
                           END;
                         END;
                          }

    { 13  ;2   ;Field     ;
                Name=From Source;
                CaptionML=[ENU=Source;
                           ESM=Origen;
                           FRC=Origine;
                           ENC=Source];
                OptionCaptionML=[ENU=Job Planning Lines,Job Ledger Entries,None;
                                 ESM=L°neas planificaci¢n proyecto,Movs. proyectos,Ninguno;
                                 FRC=Lignes planification projet,êcritures de grand livre projet,Aucun;
                                 ENC=Job Planning Lines,Job Ledger Entries,None];
                SourceExpr=Source;
                OnValidate=BEGIN
                             ValidateSource;
                           END;
                            }

    { 23  ;2   ;Field     ;
                Name=Planning Line Type;
                CaptionML=[ENU=Incl. Planning Line Type;
                           ESM=Incl. tipo l°nea planificaci¢n;
                           FRC=Type lignes planification Ö inclure;
                           ENC=Incl. Planning Line Type];
                OptionCaptionML=[ENU=Schedule+Contract,Schedule,Contract;
                                 ESM=Previsi¢n+Contrato,Previsi¢n,Contrato;
                                 FRC=Calendrier+Contrat,Calendrier,Contrat;
                                 ENC=Schedule+Contract,Schedule,Contract];
                SourceExpr=PlanningLineType;
                Enabled=PlanningLineTypeEnable }

    { 25  ;2   ;Field     ;
                Name=Ledger Entry Line Type;
                CaptionML=[ENU=Incl. Ledger Entry Line Type;
                           ESM=Incl. tipo l°nea mov.;
                           FRC=Inclure ligne Çcritures type;
                           ENC=Incl. Ledger Entry Line Type];
                OptionCaptionML=[ENU=Usage+Sale,Usage,Sale;
                                 ESM=Consumo+Venta,Consumo,Venta;
                                 FRC=Utilisation+Vente,Utilisation,Vente;
                                 ENC=Usage+Sale,Usage,Sale];
                SourceExpr=LedgerEntryType;
                Enabled=LedgerEntryLineTypeEnable }

    { 7   ;2   ;Field     ;
                CaptionML=[ENU=Starting Date;
                           ESM=Fecha inicial;
                           FRC=Date dÇbut;
                           ENC=Starting Date];
                SourceExpr=FromDate }

    { 20  ;2   ;Field     ;
                CaptionML=[ENU=Ending Date;
                           ESM=Fecha final;
                           FRC=Date fin;
                           ENC=Ending Date];
                SourceExpr=ToDate }

    { 5   ;1   ;Group     ;
                CaptionML=[ENU=Copy to;
                           ESM=Copiar a;
                           FRC=Copier vers;
                           ENC=Copy to] }

    { 3   ;2   ;Field     ;
                CaptionML=[ENU=Job No.;
                           ESM=Nß proyecto;
                           FRC=N¯ projet;
                           ENC=Job No.];
                SourceExpr=TargetJobNo }

    { 31  ;2   ;Field     ;
                CaptionML=[ENU=Job Description;
                           ESM=Descripci¢n proyecto;
                           FRC=Description de projet;
                           ENC=Job Description];
                SourceExpr=TargetJobDescription }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Bill-To Customer No.;
                           ESM=Factura-a Nß cliente;
                           FRC=N¯ client facturÇ;
                           ENC=Bill-To Customer No.];
                SourceExpr=TargetBillToCustomerNo;
                TableRelation=Customer }

    { 6   ;1   ;Group     ;
                CaptionML=[ENU=Apply;
                           ESM=Aplicar;
                           FRC=Affecter;
                           ENC=Apply] }

    { 16  ;2   ;Field     ;
                CaptionML=[ENU=Copy Job Prices;
                           ESM=Copiar precios proyecto;
                           FRC=Copier prix projet;
                           ENC=Copy Job Prices];
                SourceExpr=CopyJobPrices }

    { 26  ;2   ;Field     ;
                CaptionML=[ENU=Copy Quantity;
                           ESM=Copiar cantidad;
                           FRC=Copier quantitÇ;
                           ENC=Copy Quantity];
                SourceExpr=CopyQuantity }

    { 28  ;2   ;Field     ;
                CaptionML=[ENU=Copy Dimensions;
                           ESM=Copiar dimensiones;
                           FRC=Copier dimensions;
                           ENC=Copy Dimensions];
                SourceExpr=CopyDimensions }

  }
  CODE
  {
    VAR
      SourceJob@1010 : Record 167;
      CopyJob@1013 : Codeunit 1006;
      SourceJobNo@1017 : Code[20];
      FromJobTaskNo@1009 : Code[20];
      ToJobTaskNo@1004 : Code[20];
      TargetJobNo@1008 : Code[20];
      TargetJobDescription@1007 : Text[50];
      TargetBillToCustomerNo@1014 : Code[20];
      FromDate@1006 : Date;
      ToDate@1005 : Date;
      Source@1003 : 'Job Planning Lines,Job Ledger Entries,None';
      PlanningLineType@1002 : 'Schedule+Contract,Schedule,Contract';
      LedgerEntryType@1001 : 'Usage+Sale,Usage,Sale';
      Text001@1016 : TextConst 'ENU=The job was successfully copied.;ESM=El proyecto se copi¢ correctamente.;FRC=Le projet a ÇtÇ copiÇ avec succäs.;ENC=The job was successfully copied.';
      Text002@1019 : TextConst 'ENU=Job No. %1 will be assigned to the new Job. Do you want to continue?;ESM=El Nß proyecto %1 se asignar† al trabajo nuevo. ®Desea continuar?;FRC=Le n¯ projet %1 sera affectÇ au nouveau projet. “tes-vous certain de vouloir continuerˇ?;ENC=Job No. %1 will be assigned to the new Job. Do you want to continue?';
      Text003@1018 : TextConst '@@@=Job Task 1000 does not exist.;ENU=%1 %2 does not exist.;ESM=No existe %1 %2.;FRC=%1 %2 n''existe pas.;ENC=%1 %2 does not exist.';
      CopyJobPrices@1012 : Boolean;
      CopyQuantity@1011 : Boolean;
      CopyDimensions@1000 : Boolean;
      PlanningLineTypeEnable@1020 : Boolean INDATASET;
      LedgerEntryLineTypeEnable@1021 : Boolean INDATASET;
      Text004@1015 : TextConst 'ENU=Provide a valid source %1.;ESM=Proporcione un origen v†lido %1.;FRC=Fournissez une source %1 valide.;ENC=Provide a valid source %1.';

    LOCAL PROCEDURE ValidateUserInput@1();
    VAR
      JobsSetup@1001 : Record 315;
      NoSeriesManagement@1000 : Codeunit 396;
    BEGIN
      IF (SourceJobNo = '') OR NOT SourceJob.GET(SourceJob."No.") THEN
        ERROR(Text004,SourceJob.TABLECAPTION);

      IF TargetJobNo = '' THEN BEGIN
        JobsSetup.GET;
        JobsSetup.TESTFIELD("Job Nos.");
        TargetJobNo := NoSeriesManagement.GetNextNo(JobsSetup."Job Nos.",0D,TRUE);
        IF NOT CONFIRM(Text002,TRUE,TargetJobNo) THEN BEGIN
          TargetJobNo := '';
          ERROR('');
        END;
      END;
    END;

    LOCAL PROCEDURE ValidateSource@2();
    BEGIN
      CASE TRUE OF
        Source = Source::"Job Planning Lines":
          BEGIN
            PlanningLineTypeEnable := TRUE;
            LedgerEntryLineTypeEnable := FALSE;
          END;
        Source = Source::"Job Ledger Entries":
          BEGIN
            PlanningLineTypeEnable := FALSE;
            LedgerEntryLineTypeEnable := TRUE;
          END;
        Source = Source::None:
          BEGIN
            PlanningLineTypeEnable := FALSE;
            LedgerEntryLineTypeEnable := FALSE;
          END;
      END;
    END;

    PROCEDURE SetFromJob@3(SourceJob2@1000 : Record 167);
    BEGIN
      SourceJob := SourceJob2;
      SourceJobNo := SourceJob."No.";
      TargetJobDescription := SourceJob.Description;
      TargetBillToCustomerNo := SourceJob."Bill-to Customer No.";
    END;

    BEGIN
    END.
  }
}

