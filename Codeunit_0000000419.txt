OBJECT Codeunit 419 File Management
{
  OBJECT-PROPERTIES
  {
    Date=03/13/14;
    Time=12:00:00 PM;
    Version List=NAVW17.10.00.36281;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text001@1004 : TextConst 'ENU=Default;ESM=Gen‚rico;FRC=Par d‚faut;ENC=Default';
      Text002@1001 : TextConst 'ENU=You must enter a file path.;ESM=Debe insertar una ruta de archivo.;FRC=Vous devez entrer un chemin d''accŠs au fichier.;ENC=You must enter a file path.';
      Text003@1005 : TextConst 'ENU=You must enter a file name.;ESM=Debe introd. nombre fichero.;FRC=Vous devez entrer un nom de fichier.;ENC=You must enter a file name.';
      Text004@1007 : TextConst 'ENU=The file %1 does not exist.;ESM=El fichero %1 no existe.;FRC=Le fichier %1 n''existe pas.;ENC=The file %1 does not exist.';
      Text006@1003 : TextConst 'ENU=Export;ESM=Exportar;FRC=Exporter;ENC=Export';
      Text007@1002 : TextConst 'ENU=Import;ESM=Importar;FRC=Importer;ENC=Import';
      PathHelper@1011 : DotNet "'mscorlib'.System.IO.Path";
      ClientFileHelper@1012 : DotNet "'mscorlib'.System.IO.File" RUNONCLIENT;
      ServerFileHelper@1015 : DotNet "'mscorlib'.System.IO.File";
      DirectoryHelper@1013 : DotNet "'mscorlib'.System.IO.Directory" RUNONCLIENT;
      Text010@1008 : TextConst 'ENU=The file %1 has not been uploaded.;ESM=No se ha cargado el archivo %1.;FRC=Le fichier %1 n''a pas ‚t‚ t‚l‚charg‚.;ENC=The file %1 has not been uploaded.';
      Text011@1009 : TextConst 'ENU=You must specify a source file name.;ESM=Debe especificar un nombre de archivo de origen.;FRC=Vous devez sp‚cifier un nom de fichier source.;ENC=You must specify a source file name.';
      Text012@1010 : TextConst 'ENU=You must specify a target file name.;ESM=Debe especificar un nombre de archivo de destino.;FRC=Vous devez sp‚cifier un nom de fichier cible.;ENC=You must specify a target file name.';
      Text013@1014 : TextConst 'ENU=The file name %1 already exists.;ESM=El nombre de archivo %1 ya existe.;FRC=Le nom de fichier %1 existe d‚j….;ENC=The file name %1 already exists.';
      CreatePathQst@1028 : TextConst 'ENU=The path %1 does not exist. Do you want to add it now?;ESM=La ruta de acceso %1 no existe. ¨Desea agregarla ahora?;FRC=Le chemin d''accŠs %1 n''existe pas. Souhaitez-vous l''ajouter maintenant?;ENC=The path %1 does not exist. Do you want to add it now?';
      AllFilesFilterTxt@1000 : TextConst '@@@={Locked};ENU=*.*;ESM=*.*;FRC=*.*;ENC=*.*';
      AllFilesDescriptionTxt@1024 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=All Files (*.*)|*.*;ESM=Todos los archivos (*.*)|*.*;FRC=Tous les fichiers (*.*)|*.*;ENC=All Files (*.*)|*.*';
      XMLFileType@1006 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=XML Files (*.xml)|*.xml;ESM=Archivos XML (*.xml)|*.xml;FRC=Fichiers XML (*.xml)|*.xml;ENC=XML Files (*.xml)|*.xml';
      WordFileType@1016 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Word Files (*.doc)|*.doc;ESM=Archivos de Word (*.doc)|*.doc;FRC=Fichiers Word (*.doc)|*.doc;ENC=Word Files (*.doc)|*.doc';
      Word2007FileType@1017 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Word Files (*.doc*)|*.doc*;ESM=Archivos de Word (*.doc*)|*.doc*;FRC=Fichiers Word (*.doc*)|*.doc*;ENC=Word Files (*.doc*)|*.doc*';
      ExcelFileType@1018 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Excel Files (*.xls)|*.xls;ESM=Archivos de Excel (*.xls)|*.xls;FRC=Fichiers Excel (*.xls)|*.xls;ENC=Excel Files (*.xls)|*.xls';
      Excel2007FileType@1019 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Excel Files (*.xls*)|*.xls*;ESM=Archivos de Excel (*.xls*)|*.xls*;FRC=Fichiers Excel (*.xls*)|*.xls*;ENC=Excel Files (*.xls*)|*.xls*';
      XSDFileType@1020 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=XSD Files (*.xsd)|*.xsd;ESM=Archivos XSD (*.xsd)|*.xsd;FRC=Fichiers XSD (*.xsd)|*.xsd;ENC=XSD Files (*.xsd)|*.xsd';
      HTMFileType@1021 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=HTM Files (*.htm)|*.htm;ESM=Archivos HTM (*.htm)|*.htm;FRC=Fichiers HTM (*.htm)|*.htm;ENC=HTM Files (*.htm)|*.htm';
      XSLTFileType@1022 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=XSLT Files (*.xslt)|*.xslt;ESM=Archivos XSLT (*.xslt)|*.xslt;FRC=Fichiers XSLT (*.xslt)|*.xslt;ENC=XSLT Files (*.xslt)|*.xslt';
      TXTFileType@1023 : TextConst '@@@="{Split=r''\|''}{Locked=s''1''}";ENU=Text Files (*.txt)|*.txt;ESM=Archivos de texto (*.txt)|*.txt;FRC=Fichiers texte (*.txt)|*.txt;ENC=Text Files (*.txt)|*.txt';
      UnsupportedFileExtErr@1025 : TextConst 'ENU=Unsupported file extension (.%1). The supported file extensions are (%2).;ESM=Extensi¢n de archivo no admitida (.%1). Las extensiones de archivo admitidas son (%2).;FRC=Extension de fichier non prise en charge (.%1). Les extensions de fichier prises en charge sont (%2).;ENC=Unsupported file extension (.%1). The supported file extensions are (%2).';
      SingleFilterErr@1026 : TextConst 'ENU=Please specify a file filter and an extension filter when using this function.;ESM=Especifique un filtro de archivo y un filtro de extensi¢n al usar est  funci¢n.;FRC=Veuillez sp‚cifier un filtre de fichier et un filtre d''extension lors de l''utilisation de cette fonction.;ENC=Please specify a file filter and an extension filter when using this function.';
      InvalidWindowsChrStringTxt@1027 : TextConst '@@@={Locked};ENU="""#%&*:<>?\/{|}~";ESM="""#%&*:<>?\/{|}~";FRC="""#%&*:<>?\/{|}~";ENC="""#%&*:<>?\/{|}~"';

    PROCEDURE BLOBImport@3(VAR BLOBRef@1000 : TEMPORARY Record 99008535;Name@1002 : Text) : Text;
    BEGIN
      EXIT(BLOBImportWithFilter(BLOBRef,Text007,Name,AllFilesDescriptionTxt,AllFilesFilterTxt));
    END;

    PROCEDURE BLOBImportWithFilter@27(VAR TempBlob@1000 : Record 99008535;DialogCaption@1005 : Text;Name@1002 : Text;FileFilter@1003 : Text;ExtFilter@1008 : Text) : Text;
    VAR
      NVInStream@1001 : InStream;
      NVOutStream@1004 : OutStream;
      UploadResult@1006 : Boolean;
      ErrorMessage@1007 : Text;
    BEGIN
      // ExtFilter examples: 'csv,txt' if you only accept *.csv and *.txt or '*.*' if you accept any extensions
      CLEARLASTERROR;

      IF (FileFilter = '') XOR (ExtFilter = '') THEN
        ERROR(SingleFilterErr);

      // There is no way to check if NVInStream is null before using it after calling the
      // UPLOADINTOSTREAM therefore if result is false this is the only way we can throw the error.
      UploadResult := UPLOADINTOSTREAM(DialogCaption,'',FileFilter,Name,NVInStream);
      IF UploadResult THEN
        ValidateFileExtension(Name,ExtFilter);
      IF UploadResult THEN BEGIN
        TempBlob.Blob.CREATEOUTSTREAM(NVOutStream);
        COPYSTREAM(NVOutStream,NVInStream);
        EXIT(Name);
      END;
      ErrorMessage := GETLASTERRORTEXT;
      IF ErrorMessage <> '' THEN
        ERROR(ErrorMessage);

      EXIT('');
    END;

    PROCEDURE BLOBExport@4(VAR BLOBRef@1002 : TEMPORARY Record 99008535;Name@1001 : Text;CommonDialog@1000 : Boolean) : Text;
    VAR
      NVInStream@1003 : InStream;
      ToFile@1004 : Text;
      Path@1006 : Text;
      IsDownloaded@1007 : Boolean;
    BEGIN
      BLOBRef.Blob.CREATEINSTREAM(NVInStream);
      IF CommonDialog THEN BEGIN
        IF STRPOS(Name,'*') = 0 THEN
          ToFile := Name
        ELSE
          ToFile := DELCHR(INSSTR(Name,Text001,1),'=','*');
        ToFile := GetFileName(ToFile);
      END ELSE BEGIN
        ToFile := ClientTempFileName(GetExtension(Name));
        Path := Magicpath;
      END;
      IsDownloaded := DOWNLOADFROMSTREAM(NVInStream,Text006,Path,GetToFilterText('',Name),ToFile);
      IF IsDownloaded THEN
        EXIT(ToFile);
      EXIT('');
    END;

    PROCEDURE ServerTempFileName@5(FileExtension@1002 : Text) FileName : Text;
    VAR
      TempFile@1000 : File;
    BEGIN
      TempFile.CREATETEMPFILE;
      FileName := TempFile.NAME + '.' + FileExtension;
      TempFile.CLOSE;
    END;

    PROCEDURE ClientTempFileName@6(FileExtension@1002 : Text) ClientFileName : Text;
    VAR
      TempFile@1004 : File;
      ClientTempPath@1000 : Text;
    BEGIN
      IF ClientTempPath = '' THEN BEGIN
        TempFile.CREATETEMPFILE;
        ClientFileName := TempFile.NAME + '.' + FileExtension;
        TempFile.CLOSE;
        TempFile.CREATE(ClientFileName);
        TempFile.CLOSE;
        ClientTempPath := GetDirectoryName(DownloadTempFile(ClientFileName));
      END;
      ClientFileName := ClientTempPath + '\' + FORMAT(CREATEGUID) + '.' + FileExtension;
    END;

    PROCEDURE DownloadTempFile@7(ServerFileName@1001 : Text) : Text;
    VAR
      FileName@1102601003 : Text;
      Path@1102601004 : Text;
    BEGIN
      FileName := ServerFileName;
      Path := Magicpath;
      DOWNLOAD(ServerFileName,'',Path,AllFilesDescriptionTxt,FileName);
      EXIT(FileName);
    END;

    PROCEDURE UploadFileSilent@10(ClientFilePath@1001 : Text) : Text;
    VAR
      ClientFileAttributes@1004 : DotNet "'mscorlib'.System.IO.FileAttributes";
      ServerFileName@1006 : Text;
      TempClientFile@1000 : Text;
      FileName@1002 : Text;
      FileExtension@1003 : Text;
    BEGIN
      IF NOT ClientFileHelper.Exists(ClientFilePath) THEN
        ERROR(Text004,ClientFilePath);
      FileName := GetFileName(ClientFilePath);
      FileExtension := GetExtension(FileName);

      TempClientFile := ClientTempFileName(FileExtension);
      ClientFileHelper.Copy(ClientFilePath,TempClientFile,TRUE);

      ServerFileName := ServerTempFileName(FileExtension);

      IF NOT UPLOAD('',Magicpath,AllFilesDescriptionTxt,GetFileName(TempClientFile),ServerFileName) THEN
        ERROR(Text010,ClientFilePath);

      ClientFileHelper.SetAttributes(TempClientFile,ClientFileAttributes.Normal);
      ClientFileHelper.Delete(TempClientFile);
      EXIT(ServerFileName);
    END;

    PROCEDURE UploadFile@21(WindowTitle@1003 : Text[50];ClientFileName@1001 : Text) ServerFileName : Text;
    VAR
      Filter@1005 : Text;
    BEGIN
      Filter := GetToFilterText('',ClientFileName);

      IF PathHelper.GetFileNameWithoutExtension(ClientFileName) = '' THEN
        ClientFileName := '';

      ServerFileName := UploadFileWithFilter(WindowTitle,ClientFileName,Filter,AllFilesFilterTxt);
    END;

    PROCEDURE UploadFileWithFilter@25(WindowTitle@1003 : Text[50];ClientFileName@1001 : Text;FileFilter@1000 : Text;ExtFilter@1004 : Text) ServerFileName : Text;
    VAR
      Uploaded@1002 : Boolean;
    BEGIN
      CLEARLASTERROR;

      IF (FileFilter = '') XOR (ExtFilter = '') THEN
        ERROR(SingleFilterErr);

      Uploaded := UPLOAD(WindowTitle,'',FileFilter,ClientFileName,ServerFileName);
      IF Uploaded THEN
        ValidateFileExtension(ClientFileName,ExtFilter);
      IF Uploaded THEN
        EXIT(ServerFileName);

      IF GETLASTERRORTEXT <> '' THEN
        ERROR('%1',GETLASTERRORTEXT);

      EXIT('');
    END;

    PROCEDURE Magicpath@9() : Text;
    BEGIN
      EXIT('<TEMP>');   // MAGIC PATH makes sure we don't get a prompt
    END;

    PROCEDURE DownloadHandler@2(FromFile@1000 : Text;DialogTitle@1001 : Text;ToFolder@1002 : Text;ToFilter@1003 : Text;ToFile@1004 : Text) : Boolean;
    VAR
      Downloaded@1005 : Boolean;
    BEGIN
      CLEARLASTERROR;
      Downloaded := DOWNLOAD(FromFile,DialogTitle,ToFolder,ToFilter,ToFile);
      IF NOT Downloaded THEN
        IF GETLASTERRORTEXT <> '' THEN
          ERROR('%1',GETLASTERRORTEXT);
      EXIT(Downloaded);
    END;

    PROCEDURE DownloadToFile@13(ServerFileName@1002 : Text;ClientFileName@1000 : Text);
    VAR
      TempClientFileName@1001 : Text;
    BEGIN
      ValidateFileNames(ServerFileName,ClientFileName);
      TempClientFileName := DownloadTempFile(ServerFileName);
      MoveFile(TempClientFileName,ClientFileName);
    END;

    PROCEDURE AppendAllTextToClientFile@44(ServerFileName@1001 : Text;ClientFileName@1000 : Text);
    BEGIN
      ValidateFileNames(ServerFileName,ClientFileName);
      ClientFileHelper.AppendAllText(ClientFileName,ServerFileHelper.ReadAllText(ServerFileName));
    END;

    PROCEDURE MoveAndRenameClientFile@11(OldFilePath@1001 : Text;NewFileName@1004 : Text;NewSubDirectoryName@1002 : Text) NewFilePath : Text;
    VAR
      directory@1003 : Text;
    BEGIN
      IF OldFilePath = '' THEN
        ERROR(Text002);

      IF NewFileName = '' THEN
        ERROR(Text003);

      IF NOT ClientFileHelper.Exists(OldFilePath) THEN
        ERROR(Text004,OldFilePath);

      // Get the directory from the OldFilePath, if directory is empty it will just use the current location.
      directory := GetDirectoryName(OldFilePath);

      // create the sub directory name is name is given
      IF NewSubDirectoryName <> '' THEN BEGIN
        directory := PathHelper.Combine(directory,NewSubDirectoryName);
        DirectoryHelper.CreateDirectory(directory);
      END;

      NewFilePath := PathHelper.Combine(directory,NewFileName);
      MoveFile(OldFilePath,NewFilePath);

      EXIT(NewFilePath);
    END;

    PROCEDURE DeleteClientFile@12(FilePath@1001 : Text) : Boolean;
    BEGIN
      IF NOT ClientFileHelper.Exists(FilePath) THEN
        EXIT(FALSE);

      ClientFileHelper.Delete(FilePath);
      EXIT(TRUE);
    END;

    PROCEDURE CopyClientFile@43(SourceFileName@1000 : Text;DestFileName@1001 : Text;OverWrite@1002 : Boolean);
    BEGIN
      ClientFileHelper.Copy(SourceFileName,DestFileName,OverWrite);
    END;

    PROCEDURE ClientFileExists@14(FilePath@1001 : Text) : Boolean;
    BEGIN
      EXIT(ClientFileHelper.Exists(FilePath));
    END;

    PROCEDURE ClientDirectoryExists@42(DirectoryPath@1001 : Text) : Boolean;
    BEGIN
      EXIT(DirectoryHelper.Exists(DirectoryPath));
    END;

    PROCEDURE MoveFile@15(SourceFileName@1001 : Text;TargetFileName@1002 : Text);
    BEGIN
      // System.IO.File.Move is not used due to a known issue in KB310316

      IF NOT ClientFileHelper.Exists(SourceFileName) THEN
        ERROR(Text004,SourceFileName);

      ValidatePath(GetDirectoryName(TargetFileName));

      DeleteClientFile(TargetFileName);
      ClientFileHelper.Copy(SourceFileName,TargetFileName);
      ClientFileHelper.Delete(SourceFileName);
    END;

    PROCEDURE CopyServerFile@32(SourceFileName@1001 : Text;TargetFileName@1002 : Text;Overwrite@1000 : Boolean);
    BEGIN
      ServerFileHelper.Copy(SourceFileName,TargetFileName,Overwrite);
    END;

    PROCEDURE ServerFileExists@33(FilePath@1001 : Text) : Boolean;
    BEGIN
      EXIT(EXISTS(FilePath));
    END;

    PROCEDURE DeleteServerFile@34(FilePath@1001 : Text) : Boolean;
    BEGIN
      IF NOT EXISTS(FilePath) THEN
        EXIT(FALSE);

      ServerFileHelper.Delete(FilePath);
      EXIT(TRUE);
    END;

    PROCEDURE GetFileName@16(FilePath@1001 : Text) : Text;
    BEGIN
      EXIT(PathHelper.GetFileName(FilePath));
    END;

    PROCEDURE GetDirectoryName@8(FileName@1001 : Text) : Text;
    BEGIN
      IF FileName = '' THEN
        EXIT(FileName);

      FileName := DELCHR(FileName,'<');
      EXIT(PathHelper.GetDirectoryName(FileName));
    END;

    PROCEDURE BLOBImportFromServerFile@17(VAR TempBlob@1001 : Record 99008535;FilePath@1000 : Text);
    VAR
      OutStream@1004 : OutStream;
      InStream@1003 : InStream;
      InputFile@1002 : File;
    BEGIN
      IF NOT FILE.EXISTS(FilePath) THEN
        ERROR(Text004,FilePath);

      InputFile.OPEN(FilePath);
      InputFile.CREATEINSTREAM(InStream);
      TempBlob.Blob.CREATEOUTSTREAM(OutStream);
      COPYSTREAM(OutStream,InStream);
      InputFile.CLOSE;
    END;

    PROCEDURE BLOBExportToServerFile@18(VAR TempBlob@1001 : Record 99008535;FilePath@1000 : Text);
    VAR
      OutStream@1004 : OutStream;
      InStream@1003 : InStream;
      OutputFile@1002 : File;
    BEGIN
      IF FILE.EXISTS(FilePath) THEN
        ERROR(Text013,FilePath);

      OutputFile.WRITEMODE(TRUE);
      OutputFile.CREATE(FilePath);
      OutputFile.CREATEOUTSTREAM(OutStream);
      TempBlob.Blob.CREATEINSTREAM(InStream);
      COPYSTREAM(OutStream,InStream);
      OutputFile.CLOSE;
    END;

    PROCEDURE GetToFilterText@19(FilterString@1002 : Text;FileName@1000 : Text) : Text;
    VAR
      OutExt@1001 : Text;
    BEGIN
      IF FilterString <> '' THEN
        EXIT(FilterString);

      CASE UPPERCASE(GetExtension(FileName)) OF
        'DOC':
          OutExt := WordFileType;
        'DOCX':
          OutExt := Word2007FileType;
        'XLS':
          OutExt := ExcelFileType;
        'XLSX':
          OutExt := Excel2007FileType;
        'XSLT':
          OutExt := XSLTFileType;
        'XML':
          OutExt := XMLFileType;
        'XSD':
          OutExt := XSDFileType;
        'HTM':
          OutExt := HTMFileType;
        'TXT':
          OutExt := TXTFileType;
      END;
      IF OutExt = '' THEN
        EXIT(AllFilesDescriptionTxt);
      EXIT(OutExt + '|' + AllFilesDescriptionTxt);  // Also give the option of the general selection
    END;

    PROCEDURE GetExtension@20(Name@1000 : Text) : Text;
    VAR
      FileExtension@1002 : Text;
    BEGIN
      FileExtension := PathHelper.GetExtension(Name);

      IF FileExtension <> '' THEN
        FileExtension := DELCHR(FileExtension,'<','.');

      EXIT(FileExtension);
    END;

    PROCEDURE OpenFileDialog@1(WindowTitle@1000 : Text[50];DefaultFileName@1001 : Text;FilterString@1002 : Text) : Text;
    VAR
      OpenFileDialog@1006 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.OpenFileDialog" RUNONCLIENT;
      DialagResult@1003 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.DialogResult" RUNONCLIENT;
    BEGIN
      OpenFileDialog := OpenFileDialog.OpenFileDialog;
      OpenFileDialog.ShowReadOnly := FALSE;
      OpenFileDialog.FileName := GetFileName(DefaultFileName);
      OpenFileDialog.Title := WindowTitle;
      OpenFileDialog.Filter := GetToFilterText(FilterString,DefaultFileName);
      OpenFileDialog.InitialDirectory := GetDirectoryName(DefaultFileName);

      DialagResult := OpenFileDialog.ShowDialog;
      IF DialagResult.CompareTo(DialagResult.OK) = 0 THEN
        EXIT(OpenFileDialog.FileName);
      EXIT('');
    END;

    PROCEDURE SaveFileDialog@23(WindowTitle@1000 : Text[50];DefaultFileName@1001 : Text;FilterString@1002 : Text) : Text;
    VAR
      SaveFileDialog@1008 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.SaveFileDialog" RUNONCLIENT;
      DialagResult@1003 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.DialogResult" RUNONCLIENT;
    BEGIN
      SaveFileDialog := SaveFileDialog.SaveFileDialog;
      SaveFileDialog.CheckPathExists := TRUE;
      SaveFileDialog.OverwritePrompt := TRUE;
      SaveFileDialog.FileName := GetFileName(DefaultFileName);
      SaveFileDialog.Title := WindowTitle;
      SaveFileDialog.Filter := GetToFilterText(FilterString,DefaultFileName);
      SaveFileDialog.InitialDirectory := GetDirectoryName(DefaultFileName);

      DialagResult := SaveFileDialog.ShowDialog;
      IF DialagResult.CompareTo(DialagResult.OK) = 0 THEN
        EXIT(SaveFileDialog.FileName);
      EXIT('');
    END;

    PROCEDURE CanRunDotNetOnClient@41() : Boolean;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) THEN
        EXIT(ActiveSession."Client Type" IN [ActiveSession."Client Type"::"Windows Client",ActiveSession."Client Type"::Unknown]);

      EXIT(FALSE);
    END;

    PROCEDURE IsWebClient@46() : Boolean;
    VAR
      ActiveSession@1000 : Record 2000000110;
    BEGIN
      IF ActiveSession.GET(SERVICEINSTANCEID,SESSIONID) THEN
        EXIT(ActiveSession."Client Type" = ActiveSession."Client Type"::"Web Client");

      EXIT(FALSE);
    END;

    PROCEDURE IsValidFileName@22(FileName@1000 : Text) : Boolean;
    VAR
      String@1001 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.String";
    BEGIN
      IF FileName = '' THEN
        EXIT(FALSE);

      String := GetFileName(FileName);
      IF String.IndexOfAny(PathHelper.GetInvalidFileNameChars) <> -1 THEN
        EXIT(FALSE);

      String := GetDirectoryName(FileName);
      IF String.IndexOfAny(PathHelper.GetInvalidPathChars) <> -1 THEN
        EXIT(FALSE);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE ValidateFileNames@24(ServerFileName@1000 : Text;ClientFileName@1001 : Text);
    BEGIN
      IF NOT IsValidFileName(ServerFileName) THEN
        ERROR(Text011);

      IF NOT IsValidFileName(ClientFileName) THEN
        ERROR(Text012);
    END;

    PROCEDURE ValidateFileExtension@26(FilePath@1000 : Text;ValidExtensions@1001 : Text);
    VAR
      FileExt@1003 : Text;
      LowerValidExts@1004 : Text;
    BEGIN
      IF STRPOS(ValidExtensions,AllFilesFilterTxt) <> 0 THEN
        EXIT;

      FileExt := LOWERCASE(GetExtension(GetFileName(FilePath)));
      LowerValidExts := LOWERCASE(ValidExtensions);

      IF STRPOS(LowerValidExts,FileExt) = 0 THEN
        ERROR(STRSUBSTNO(UnsupportedFileExtErr,FileExt,LowerValidExts));
    END;

    LOCAL PROCEDURE ValidatePath@45(FilePath@1000 : Text);
    BEGIN
      IF FilePath = '' THEN
        EXIT;
      IF DirectoryHelper.Exists(FilePath) THEN
        EXIT;

      IF CONFIRM(CreatePathQst,TRUE,FilePath) THEN
        DirectoryHelper.CreateDirectory(FilePath)
      ELSE
        ERROR('');
    END;

    PROCEDURE Ansi2SystemEncoding@28(Destination@1000 : OutStream;Source@1001 : InStream);
    VAR
      StreamReader@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamReader";
      Encoding@1003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
      EncodedTxt@1002 : Text;
    BEGIN
      StreamReader := StreamReader.StreamReader(Source,Encoding.Default,TRUE);
      EncodedTxt := StreamReader.ReadToEnd();
      Destination.WRITETEXT(EncodedTxt);
    END;

    PROCEDURE Ansi2SystemEncodingTxt@29(Destination@1001 : OutStream;Source@1000 : Text);
    VAR
      StreamWriter@1004 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.StreamWriter";
      Encoding@1003 : DotNet "'mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Text.Encoding";
    BEGIN
      StreamWriter := StreamWriter.StreamWriter(Destination,Encoding.Default);
      StreamWriter.Write(Source);
      StreamWriter.Close();
    END;

    PROCEDURE BrowseForFolderDialog@30(WindowTitle@1000 : Text[50];DefaultFolderName@1001 : Text;ShowNewFolderButton@1002 : Boolean) : Text;
    VAR
      FolderBrowserDialog@1006 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.FolderBrowserDialog" RUNONCLIENT;
      DialagResult@1003 : DotNet "'System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Windows.Forms.DialogResult" RUNONCLIENT;
    BEGIN
      FolderBrowserDialog := FolderBrowserDialog.FolderBrowserDialog;
      FolderBrowserDialog.Description := WindowTitle;
      FolderBrowserDialog.SelectedPath := DefaultFolderName;
      FolderBrowserDialog.ShowNewFolderButton := ShowNewFolderButton;

      DialagResult := FolderBrowserDialog.ShowDialog;
      IF DialagResult.CompareTo(DialagResult.OK) = 0 THEN
        EXIT(FolderBrowserDialog.SelectedPath);
      EXIT(DefaultFolderName);
    END;

    PROCEDURE StripNotsupportChrInFileName@31(InText@1000 : Text) : Text;
    BEGIN
      EXIT(DELCHR(InText,'=',InvalidWindowsChrStringTxt));
    END;

    PROCEDURE IsGZip@40(ServerSideFileName@1000 : Text) : Boolean;
    VAR
      FileStream@1005 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileStream";
      FileMode@1006 : DotNet "'mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.IO.FileMode";
      ID@1007 : ARRAY [2] OF Integer;
    BEGIN
      FileStream := FileStream.FileStream(ServerSideFileName,FileMode.Open);
      ID[1] := FileStream.ReadByte();
      ID[2] := FileStream.ReadByte();
      FileStream.Close;

      // from GZIP file format specification version 4.3
      // Member header and trailer
      // ID1 (IDentification 1)
      // ID2 (IDentification 2)
      // These have the fixed values ID1 = 31 (0x1f, \037), ID2 = 139 (0x8b, \213), to identify the file as being in gzip format.

      EXIT((ID[1] = 31) AND (ID[2] = 139));
    END;

    BEGIN
    END.
  }
}

