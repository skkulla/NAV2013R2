OBJECT Codeunit 400 SMTP Mail
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    Permissions=TableData 409=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      SMTPMailSetup@1003 : Record 409;
      Mail@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage";
      Text001@1001 : TextConst 'ENU=The email address "%1" is invalid.;ESM=La direcci¢n de correo electr¢nico "%1" no es v lida.;FRC=L''adresse de courriel "%1" n''est pas valide.;ENC=The email address "%1" is invalid.';
      Text002@1002 : TextConst 'ENU=Attachment %1 does not exist or can not be accessed from the program.;ESM=El adjunto %1 no existe o no se puede obtener acceso a ‚ste desde el programa.;FRC=La piŠce jointe %1 n''existe pas ou ne peut pas ˆtre atteinte depuis le programme.;ENC=Attachment %1 does not exist or can not be accessed from the program.';
      Text003@1005 : TextConst 'ENU=The SMTP mail system returned the following error: "%1".;ESM=El sistema de correo SMTP devolvi¢ el siguiente error: "%1".;FRC=Le systŠme de messagerie SMTP a retourn‚ l''erreur suivanteÿ: ®ÿ%1ÿ¯.;ENC=The SMTP mail system returned the following error: "%1".';
      SendResult@1004 : Text;

    PROCEDURE CreateMessage@1(SenderName@1008 : Text;SenderAddress@1000 : Text;Recipients@1001 : Text;Subject@1004 : Text;Body@1005 : Text;HtmlFormatted@1006 : Boolean);
    BEGIN
      IF Recipients <> '' THEN
        CheckValidEmailAddresses(Recipients);
      CheckValidEmailAddresses(SenderAddress);
      SMTPMailSetup.GET;
      SMTPMailSetup.TESTFIELD("SMTP Server");
      IF NOT ISNULL(Mail) THEN BEGIN
        Mail.Dispose;
        CLEAR(Mail);
      END;
      SendResult := '';
      Mail := Mail.SmtpMessage;
      Mail.FromName := SenderName;
      Mail.FromAddress := SenderAddress;
      Mail."To" := Recipients;
      Mail.Subject := Subject;
      Mail.Body := Body;
      Mail.HtmlFormatted := HtmlFormatted;
    END;

    PROCEDURE TrySend@10() : Boolean;
    BEGIN
      SendResult := '';
      WITH SMTPMailSetup DO
        SendResult :=
          Mail.Send(
            "SMTP Server",
            "SMTP Server Port",
            Authentication <> Authentication::Anonymous,
            "User ID",
            Password,
            "Secure Connection");
      Mail.Dispose;
      CLEAR(Mail);

      EXIT(SendResult = '');
    END;

    PROCEDURE Send@3();
    BEGIN
      IF NOT TrySend THEN
        ERROR(Text003,SendResult);
    END;

    PROCEDURE AddRecipients@4(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddRecipients(Recipients);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddCC@5(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddCC(Recipients);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddBCC@6(Recipients@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      CheckValidEmailAddresses(Recipients);
      Result := Mail.AddBCC(Recipients);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AppendBody@7(BodyPart@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      Result := Mail.AppendBody(BodyPart);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddAttachment@2(Attachment@1000 : Text);
    VAR
      Result@1001 : Text;
    BEGIN
      IF Attachment = '' THEN
        EXIT;
      IF NOT EXISTS(Attachment) THEN
        ERROR(Text002,Attachment);
      Result := Mail.AddAttachments(Attachment);
      IF Result <> '' THEN
        ERROR(Text003,Result);
    END;

    PROCEDURE AddAttachmentStream@15(AttachmentStream@1000 : InStream;AttachmentName@1001 : Text);
    BEGIN
      Mail.AddAttachment(AttachmentStream,AttachmentName);
    END;

    LOCAL PROCEDURE CheckValidEmailAddresses@8(Recipients@1000 : Text);
    VAR
      TmpRecipients@1002 : Text;
    BEGIN
      IF Recipients = '' THEN
        ERROR(Text001,Recipients);

      TmpRecipients := Recipients;
      WHILE STRPOS(TmpRecipients,';') > 1 DO BEGIN
        CheckValidEmailAddress(COPYSTR(TmpRecipients,1,STRPOS(TmpRecipients,';') - 1));
        TmpRecipients := COPYSTR(TmpRecipients,STRPOS(TmpRecipients,';') + 1);
      END;
      CheckValidEmailAddress(TmpRecipients);
    END;

    LOCAL PROCEDURE CheckValidEmailAddress@12(EmailAddress@1000 : Text);
    VAR
      i@1001 : Integer;
      NoOfAtSigns@1002 : Integer;
    BEGIN
      IF EmailAddress = '' THEN
        ERROR(Text001,EmailAddress);

      IF (EmailAddress[1] = '@') OR (EmailAddress[STRLEN(EmailAddress)] = '@') THEN
        ERROR(Text001,EmailAddress);

      FOR i := 1 TO STRLEN(EmailAddress) DO BEGIN
        IF EmailAddress[i] = '@' THEN
          NoOfAtSigns := NoOfAtSigns + 1
        ELSE
          IF EmailAddress[i] = ' ' THEN
            ERROR(Text001,EmailAddress);
      END;

      IF NoOfAtSigns <> 1 THEN
        ERROR(Text001,EmailAddress);
    END;

    PROCEDURE GetLastSendMailErrorText@9() : Text;
    BEGIN
      EXIT(SendResult);
    END;

    PROCEDURE GetSMTPMessage@35(VAR SMTPMessage@1000 : DotNet "'Microsoft.Dynamics.Nav.SMTP, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.SMTP.SmtpMessage");
    BEGIN
      SMTPMessage := Mail;
    END;

    BEGIN
    END.
  }
}

