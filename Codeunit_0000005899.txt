OBJECT Codeunit 5899 Calc. Inventory Value-Check
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=TableData 5804=r;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text004@1000 : TextConst 'ENU=Checking items #1##########;ESM=Comprob. prods.#1##########;FRC=VÇrification des articles #1##########;ENC=Checking items #1##########';
      InvtSetup@1017 : Record 313;
      TempErrorBuf@1004 : TEMPORARY Record 5890;
      PostingDate@1008 : Date;
      CalculatePer@1001 : 'Item Ledger Entry,Item';
      ByLocation@1019 : Boolean;
      ByVariant@1018 : Boolean;
      Text007@1006 : TextConst 'ENU=You have to run the Adjust Cost - Item Entries batch job, before you can revalue item %1.;ESM=Debe ejecutar el proceso por lotes Valorar existencias - movs. producto antes de revalorizar el producto %1.;FRC=Vous devez exÇcuter le traitement en lot Ajuster coñts : êcr. article avant de pouvoir rÇÇvaluer l''article %1.;ENC=You have to run the Adjust Cost - Item Entries batch job, before you can revalue item %1.';
      Text009@1009 : TextConst 'ENU=You must not revalue items with Costing Method %1, if Calculate Per is Item Ledger Entry.;ESM=No debe revalorizar prods. con Valoraci¢n existencias %1, si Calcular por es Mov. producto.;FRC=Vous ne devez pas rÇÇvaluer les articles avec le mode Çvaluation stock %1 si le champ Calculer par indique êcriture article.;ENC=You must not revalue items with Costing Method %1, if Calculate Per is Item Ledger Entry.';
      Text011@1016 : TextConst 'ENU=You must not enter a %1 if you revalue items with Costing Method %2 and if Average Cost Calc. Type is %3 in Inventory Setup.;ESM=No debe especificar un %1 si revaloriza productos con Valuaci¢n de Inventarios %2 y si el Tipo c†lculo cto. promedio es %3 en Config. inventario.;FRC=Vous ne devez pas entrer un %1 si vous rÇÇvaluez des articles avec le mode Çvaluation inventaire %2 et si le type calcul coñt moyen est %3 dans Configuration inventaire.;ENC=You must not enter a %1 if you revalue items with Costing Method %2 and if Average Cost Calc. Type is %3 in Inventory Setup.';
      Text012@1015 : TextConst 'ENU=The By Location field must not be filled in if you revalue items with Costing Method %1 and if Average Cost Calc. Type is %2 in Inventory Setup.;ESM=El campo Por almacÇn no se debe rellenar si revaloriza productos con Valuaci¢n de Inventarios %1 y si el Tipo c†lculo cto. promedio es %2 en Config. inventario.;FRC=Le champ Par emplacement ne doit pas àtre renseignÇ si vous rÇÇvaluez des articles avec le mode Çvaluation stock %1 et si le type calcul coñt moyen est %2 dans Configuration inventaire.;ENC=The By Location field must not be filled in if you revalue items with Costing Method %1 and if Average Cost Calc. Type is %2 in Inventory Setup.';
      Text014@1013 : TextConst 'ENU=The By Variant field must not be filled in if you revalue items with Costing Method %1 and if Average Cost Calc. Type is %2 in Inventory Setup.;ESM=El campo Por variante no se debe rellenar si revaloriza productos con Valuaci¢n de Inventarios %1 y el Tipo c†lculo cto. promedio es %2 en Config. inventario.;FRC=Le champ Par variante ne doit pas àtre renseignÇ si vous rÇÇvaluez des articles avec le mode Çvaluation stock %1 et si le type calcul coñt moyen est %2 dans Configuration inventaire.;ENC=The By Variant field must not be filled in if you revalue items with Costing Method %1 and if Average Cost Calc. Type is %2 in Inventory Setup.';
      Text015@1012 : TextConst 'ENU=You must fill in a Location filter and a Variant filter or select the By Location field and the By Variant field, if you revalue items with Costing Method %1, and if Average Cost Calc. Type is %2 in Inventory Setup.;ESM=Debe especificar un filtro almacÇn y un filtro variante o seleccionar los campos Por almacÇn y Por variante si revaloriza productos con Valuaci¢n de Inventarios %1 y si el Tipo c†lculo cto. promedio es %2 en Config. inventario.;FRC=Vous devez renseigner un filtre emplacement et un filtre variante ou sÇlectionner le champ Par emplacement et le champ Par variante, si vous rÇÇvaluez des articles avec le mode Çvaluation stock %1 et si le type calcul coñt moyen est %2 dans Configuration inventaire.;ENC=You must fill in a Location filter and a Variant filter or select the By Location field and the By Variant field, if you revalue items with Costing Method %1, and if Average Cost Calc. Type is %2 in Inventory Setup.';
      ShowDialog@1002 : Boolean;
      Text018@1102601000 : TextConst 'ENU=The Item %1 cannot be revalued because there is at least one open outbound item ledger entry.;ESM=El producto %1 no se puede revalorizar porque hay al menos un movimiento de producto abierto.;FRC=Vous ne pouvez pas rÇÇvaluer l''article %1 car au moins une Çcriture article sortante est ouverte.;ENC=The Item %1 cannot be revalued because there is at least one open outbound item ledger entry.';
      TestMode@1003 : Boolean;
      ErrorCounter@1007 : Integer;
      Text020@1011 : TextConst 'ENU=Open Outbound Entry %1 found.;ESM=Se encontr¢ mov. producto salida abierto %1.;FRC=êcriture sortante ouverte %1 trouvÇe.;ENC=Open Outbound Entry %1 found.';

    PROCEDURE SetProperties@1(NewPostingDate@1000 : Date;NewCalculatePer@1003 : Option;NewByLocation@1002 : Boolean;NewByVariant@1001 : Boolean;NewShowDialog@1005 : Boolean;NewTestMode@1006 : Boolean);
    BEGIN
      TempErrorBuf.DELETEALL;
      CLEARALL;

      PostingDate := NewPostingDate;
      CalculatePer := NewCalculatePer;
      ByLocation := NewByLocation;
      ByVariant := NewByVariant;
      ShowDialog := NewShowDialog;
      TestMode := NewTestMode;

      InvtSetup.GET;
    END;

    PROCEDURE RunCheck@3(VAR Item@1000 : Record 27;VAR NewErrorBuf@1002 : Record 5890);
    VAR
      Item2@1004 : Record 27;
      Window@1001 : Dialog;
    BEGIN
      WITH Item2 DO BEGIN
        COPY(Item);

        CheckCalculatePer(Item2);

        IF FINDSET THEN BEGIN
          IF ShowDialog THEN
            Window.OPEN(Text004,"No.");
          REPEAT
            IF ShowDialog THEN
              Window.UPDATE(1,"No.");

            IF FindOpenOutboundEntry(Item2,GETFILTER("Location Filter"),GETFILTER("Variant Filter")) THEN
              IF NOT TestMode THEN
                ERROR(Text018,"No.");
            IF NOT Adjusted(Item2) THEN
              AddError(
                STRSUBSTNO(Text007,"No."),DATABASE::Item,"No.",0);
          UNTIL NEXT = 0;
          IF ShowDialog THEN
            Window.CLOSE;
        END;
      END;

      TempErrorBuf.RESET;
      IF TempErrorBuf.FINDSET THEN
        REPEAT
          NewErrorBuf := TempErrorBuf;
          NewErrorBuf.INSERT;
        UNTIL TempErrorBuf.NEXT = 0;
    END;

    LOCAL PROCEDURE Adjusted@10(Item@1000 : Record 27) : Boolean;
    VAR
      AvgCostAdjmt@1002 : Record 5804;
    BEGIN
      IF Item."Costing Method" = Item."Costing Method"::Average THEN BEGIN
        AvgCostAdjmt.SETCURRENTKEY("Item No.","Cost Is Adjusted");
        AvgCostAdjmt.SETFILTER("Item No.",Item."No.");
        AvgCostAdjmt.SETRANGE("Cost Is Adjusted",FALSE);
        AvgCostAdjmt.SETRANGE("Valuation Date",0D,PostingDate);
        IF AvgCostAdjmt.FINDFIRST THEN
          EXIT(FALSE);
      END;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE CheckCalculatePer@6(VAR Item@1000 : Record 27);
    VAR
      Item2@1001 : Record 27;
    BEGIN
      WITH Item2 DO BEGIN
        COPYFILTERS(Item);

        FILTERGROUP(2);
        SETRANGE("Costing Method","Costing Method"::Average);
        FILTERGROUP(0);

        IF FINDFIRST THEN
          CASE CalculatePer OF
            CalculatePer::"Item Ledger Entry":
              AddError(
                STRSUBSTNO(Text009,"Costing Method"),DATABASE::Item,"No.",0);
            CalculatePer::Item:
              BEGIN
                IF InvtSetup."Average Cost Calc. Type" = InvtSetup."Average Cost Calc. Type"::Item THEN BEGIN
                  IF GETFILTER("Location Filter") <> '' THEN
                    AddError(
                      STRSUBSTNO(
                        Text011,
                        FIELDCAPTION("Location Filter"),"Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                  IF GETFILTER("Variant Filter") <> '' THEN
                    AddError(
                      STRSUBSTNO(
                        Text011,
                        FIELDCAPTION("Variant Filter"),"Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                  IF ByLocation THEN
                    AddError(
                      STRSUBSTNO(
                        Text012,
                        "Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                  IF ByVariant THEN
                    AddError(
                      STRSUBSTNO(
                        Text014,
                        "Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
                END ELSE
                  IF ((GETFILTER("Location Filter") = '') AND (NOT ByLocation)) OR
                     ((GETFILTER("Variant Filter") = '') AND (NOT ByVariant))
                  THEN
                    AddError(
                      STRSUBSTNO(
                        Text015,
                        "Costing Method",InvtSetup."Average Cost Calc. Type"),DATABASE::Item,"No.",0);
              END;
          END;
      END;
    END;

    PROCEDURE FindOpenOutboundEntry@1102601000(Item@1102601001 : Record 27;LocationCode@1102601002 : Code[10];VariantCode@1102601003 : Code[10]) : Boolean;
    VAR
      ItemLedgEntry@1102601000 : Record 32;
    BEGIN
      ItemLedgEntry.RESET;
      ItemLedgEntry.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
      ItemLedgEntry.SETRANGE("Item No.",Item."No.");
      ItemLedgEntry.SETRANGE(Open,TRUE);
      IF VariantCode <> '' THEN
        ItemLedgEntry.SETRANGE("Variant Code",VariantCode);
      ItemLedgEntry.SETRANGE(Positive,FALSE);
      IF LocationCode <> '' THEN
        ItemLedgEntry.SETRANGE("Location Code",LocationCode);
      ItemLedgEntry.SETRANGE("Posting Date",0D,PostingDate);
      IF ItemLedgEntry.FINDSET THEN BEGIN
        REPEAT
          AddError(
            STRSUBSTNO(Text020,ItemLedgEntry."Entry No."),
            DATABASE::"Item Ledger Entry",ItemLedgEntry."Item No.",ItemLedgEntry."Entry No.");
        UNTIL ItemLedgEntry.NEXT = 0;
        EXIT(TRUE);
      END;

      EXIT(FALSE);
    END;

    PROCEDURE AddError@4(Text@1000 : Text[250];SourceTable@1001 : Integer;SourceNo@1002 : Code[20];SourceRefNo@1003 : Integer);
    BEGIN
      IF TestMode THEN BEGIN
        ErrorCounter := ErrorCounter + 1;
        TempErrorBuf.INIT;
        TempErrorBuf."Error No." := ErrorCounter;
        TempErrorBuf."Error Text" := Text;
        TempErrorBuf."Source Table" := SourceTable;
        TempErrorBuf."Source No." := SourceNo;
        TempErrorBuf."Source Ref. No." := SourceRefNo;
        TempErrorBuf.INSERT;
      END ELSE
        ERROR(Text);
    END;

    BEGIN
    END.
  }
}

