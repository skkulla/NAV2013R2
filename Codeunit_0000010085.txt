OBJECT Codeunit 10085 A/P Magnetic Media Management
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVNA7.10.00.36040;
  }
  PROPERTIES
  {
    OnRun=BEGIN
            { Fill in the Codes used for 1099's }
            CLEAR(Codes);

            Codes[1,1] := 'MISC-01';
            Codes[1,2] := 'MISC-02';
            Codes[1,3] := 'MISC-03';
            Codes[1,4] := 'MISC-04';
            Codes[1,5] := 'MISC-05';
            Codes[1,6] := 'MISC-06';
            Codes[1,7] := 'MISC-07';
            Codes[1,8] := 'MISC-08';
            Codes[1,9] := 'MISC-09';
            Codes[1,10] := 'MISC-10';
            Codes[1,11] := 'MISC-11';
            Codes[1,13] := 'MISC-13';
            Codes[1,14] := 'MISC-14';
            Codes[1,15] := 'MISC-15-A';
            Codes[1,16] := 'MISC-15-B';
            Codes[1,17] := 'MISC-16';

            Codes[2,1] := 'DIV-01-A';
            Codes[2,2] := 'DIV-01-B';
            Codes[2,3] := 'DIV-02-A';
            Codes[2,4] := 'DIV-02-B';
            Codes[2,5] := 'DIV-02-C';
            Codes[2,6] := 'DIV-02-D';
            Codes[2,9] := 'DIV-03';
            Codes[2,10] := 'DIV-04';
            Codes[2,11] := 'DIV-05';
            Codes[2,12] := 'DIV-06';
            Codes[2,13] := 'DIV-07';
            Codes[2,14] := 'DIV-08';
            Codes[2,15] := 'DIV-09';

            Codes[3,1] := 'INT-01';
            Codes[3,2] := 'INT-02';
            Codes[3,3] := 'INT-03';
            Codes[3,4] := 'INT-04';
            Codes[3,5] := 'INT-05';
            Codes[3,6] := 'INT-06';
            Codes[3,8] := 'INT-08';
            Codes[3,9] := 'INT-09';
          END;

  }
  CODE
  {
    VAR
      Codes@1000 : ARRAY [3,30] OF Code[10];
      Amounts@1002 : ARRAY [3,30] OF Decimal;
      FormatAddress@1004 : Codeunit 365;
      Totals@1005 : ARRAY [3,30] OF Decimal;
      FormBox@1006 : Record 10010;

    PROCEDURE GetAmt@4(Code@1000 : Code[10];i@1001 : Integer;EndLine@1002 : Integer) : Decimal;
    VAR
      j@1003 : Integer;
    BEGIN
      j := 1;
      WHILE (Codes[i,j] <> Code) AND (j <= EndLine) DO
        j := j + 1;

      IF (Codes[i,j] = Code) AND (j <= EndLine) THEN
        EXIT(Amounts[i,j]);

      ERROR('Misc. code %1 has not been setup in the initialization',Code);
    END;

    PROCEDURE UpdateLines@3(InvoiceEntry@1000 : Record 25;i@1001 : Integer;EndLine@1002 : Integer;Code@1003 : Code[10];Amount@1004 : Decimal) : Integer;
    VAR
      j@1005 : Integer;
    BEGIN
      j := 1;
      WHILE (Codes[i,j] <> Code) AND (j <= EndLine) DO
        j := j + 1;

      IF (Codes[i,j] = Code) AND (j <= EndLine) THEN BEGIN
        Amounts[i,j] := Amounts[i,j] + Amount;
        Totals[i,j] := Totals[i,j] + Amount;
      END ELSE
        ERROR('Invoice %1 on vendor %2 has unknown 1099 code  %3',
          InvoiceEntry."Entry No.",InvoiceEntry."Vendor No.",Code);
      EXIT(j);   {returns code index found}
    END;

    PROCEDURE AnyAmount@5(i@1000 : Integer;EndLine@1001 : Integer) : Boolean;
    VAR
      j@1002 : Integer;
    BEGIN
      { any amounts? }
      FOR j := 1 TO EndLine DO BEGIN
        IF FormBox.GET(Codes[i,j]) THEN BEGIN
          IF FormBox."Minimum Reportable" < 0.0 THEN BEGIN
            IF Amounts[i,j] <> 0.0 THEN BEGIN
              Amounts[i,j] := -Amounts[i,j];
              EXIT(TRUE);
            END;
          END ELSE BEGIN   { ie Minimum Reportable >= 0.0 }
            IF Amounts[i,j] <> 0 THEN
              IF Amounts[i,j] >= FormBox."Minimum Reportable" THEN BEGIN
                EXIT(TRUE);
              END ELSE BEGIN
                Totals[i,j] := Totals[i,j] - Amounts[i,j];
                Amounts[i,j] := 0;
              END;
          END;
        END;
      END;
      EXIT(FALSE);
    END;

    PROCEDURE FormatMoneyAmount@9(Amount@1000 : Decimal;Length@1001 : Integer) : Text[250];
    VAR
      AmtStr@1002 : Text[32];
    BEGIN
      AmtStr := StripNonNumerics(FORMAT(ROUND(ABS(Amount) * 100,1)));

      // left zero-padding
      IF Length - STRLEN(AmtStr) > 0 THEN
        AmtStr := '0000000000000000000' + AmtStr;
      AmtStr := DELSTR(AmtStr,1,STRLEN(AmtStr) - Length);
      EXIT(AmtStr);
    END;

    PROCEDURE FormatAmount@2(Amount@1000 : Integer;Length@1001 : Integer) : Text[250];
    VAR
      AmtStr@1002 : Text[30];
    BEGIN
      AmtStr := FORMAT(Amount);

      // left zero-padding
      IF Length - STRLEN(AmtStr) > 0 THEN
        AmtStr := '000000000000000000' + AmtStr;
      AmtStr := DELSTR(AmtStr,1,STRLEN(AmtStr) - Length);
      EXIT(AmtStr);
    END;

    PROCEDURE StripNonNumerics@10(Text@1000 : Text[80]) : Text[250];
    BEGIN
      EXIT(DELCHR(Text,'=','-,. '));
    END;

    PROCEDURE EditCompanyInfo@11(VAR CompInfo@1000 : Record 79);
    BEGIN
      WITH CompInfo DO
        "Federal ID No." := StripNonNumerics("Federal ID No.");
    END;

    PROCEDURE SwitchZipCodeParts@13(VAR ZIP@1000 : Code[20]);
    BEGIN
      IF STRLEN(ZIP) > 5 THEN
        ZIP := PADSTR(COPYSTR(ZIP,6),5) + COPYSTR(ZIP,1,5)
      ELSE
        ZIP := '     ' + ZIP;
    END;

    PROCEDURE FormatCompanyAddress@1(VAR CompanyInfo@1000 : Record 79;VAR CompanyAddress@1001 : ARRAY [8] OF Text[30]);
    BEGIN
      WITH CompanyInfo DO BEGIN
        GET;
        FormatAddress.Company(CompanyAddress,CompanyInfo);
      END;
    END;

    PROCEDURE BuildAddressLine@8(CompanyInfo@1000 : Record 79) : Text[40];
    VAR
      "Address 3"@1001 : Text[40];
    BEGIN
      WITH CompanyInfo DO BEGIN
        { Format City/State/Zip address line }
        IF STRLEN(City + ', ' + County + '  ' + "Post Code") > MAXSTRLEN("Address 3") THEN
          "Address 3" := City
        ELSE
          IF (City <> '') AND (County <> '') THEN
            "Address 3" := City + ', ' + County + '  ' + "Post Code"
          ELSE
            "Address 3" := DELCHR(City + ' ' + County + ' ' + "Post Code",'<>');
      END;
      EXIT("Address 3");
    END;

    PROCEDURE ClearAmts@6();
    BEGIN
      CLEAR(Amounts);
    END;

    PROCEDURE AmtCodes@7(VAR CodeNos@1000 : Text[12];i@1001 : Integer;EndLine@1002 : Integer);
    VAR
      j@1003 : Integer;
    BEGIN
      CLEAR(CodeNos);

      CASE i OF
        1:   {MISC}
          FOR j := 1 TO EndLine DO BEGIN
            IF Amounts[i,j] <> 0.0 THEN
              CASE j OF
                10:
                  CodeNos := INSSTR(CodeNos,'A',10); // Crop Insurance Proceeds
                13:
                  CodeNos := INSSTR(CodeNos,'B',11); // excess golden parachutes
                14:
                  CodeNos := INSSTR(CodeNos,'C',12); // gross legal proceeds
                15:
                  CodeNos := INSSTR(CodeNos,'D',13); // 409A deferral
                16:
                  CodeNos := INSSTR(CodeNos,'E',14); // 409A Income
                ELSE
                  CodeNos := INSSTR(CodeNos,FORMAT(j),j);
              END;
          END;
        2: {DIV}
          BEGIN
            IF EndLine > 1 THEN BEGIN
              // special check for DIV complex amounts
              IF GetTotalOrdinaryDividendsAmt <> 0 THEN
                CodeNos := INSSTR(CodeNos,FORMAT(1),1);
            END;
            AmtCodesDIVINT(CodeNos,i,2,EndLine);
          END;
        3: {INT}
          AmtCodesDIVINT(CodeNos,i,1,EndLine);
      END;
    END;

    LOCAL PROCEDURE AmtCodesDIVINT@1020001(VAR CodeNos@1020000 : Text[12];FormType@1020001 : Integer;StartLine@1020004 : Integer;EndLine@1020002 : Integer);
    VAR
      j@1020003 : Integer;
    BEGIN
      FOR j := StartLine TO EndLine DO BEGIN
        IF Amounts[FormType,j] <> 0.0 THEN
          CASE j OF
            10:
              CodeNos := INSSTR(CodeNos,'A',j); // FIT Withheld
            11:
              CodeNos := INSSTR(CodeNos,'B',j); // Investment expenses
            12:
              CodeNos := INSSTR(CodeNos,'C',j); // Foreign Tax Paid
            14:
              CodeNos := INSSTR(CodeNos,'D',j); // non-Cash liquidation
            15:
              CodeNos := INSSTR(CodeNos,'E',j); // non-Cash liquidation
            ELSE
              CodeNos := INSSTR(CodeNos,FORMAT(j),j);
          END;
      END;
    END;

    PROCEDURE GetTotal@12(Code@1000 : Code[10];i@1001 : Integer;EndLine@1002 : Integer) : Decimal;
    VAR
      j@1003 : Integer;
    BEGIN
      j := 1;
      WHILE (Codes[i,j] <> Code) AND (j <= EndLine) DO
        j := j + 1;

      IF (Codes[i,j] = Code) AND (j <= EndLine) THEN
        EXIT(Totals[i,j]);

      ERROR('1099 code %1 has not been setup in the initialization',Code);
    END;

    PROCEDURE ClearTotals@14();
    BEGIN
      CLEAR(Totals);
    END;

    PROCEDURE DirectSalesCheck@15(j@1000 : Integer) : Boolean;
    BEGIN
      IF FormBox.GET(Codes[1,j]) THEN
        IF Amounts[1,j] >= FormBox."Minimum Reportable" THEN
          EXIT(TRUE)
        ELSE
          EXIT(FALSE);
    END;

    LOCAL PROCEDURE GetTotalOrdinaryDividendsAmt@1020000() : Decimal;
    BEGIN
      EXIT(Amounts[2,1] + Amounts[2,2] + Amounts[2,11]);
    END;

    BEGIN
    END.
  }
}

