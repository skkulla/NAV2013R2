OBJECT Report 7391 Whse. Get Bin Content
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10.00.36040;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Whse. Get Bin Content;
               ESM=Alm. Tomar conten. ubicac.;
               FRC=Afficher contenu zone mag.;
               ENC=Whse. Get Bin Content];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 4810;    ;DataItem;                    ;
               DataItemTable=Table7302;
               OnPreDataItem=BEGIN
                               IF NOT ReportInitialized THEN
                                 ERROR(Text001);

                               Location.INIT;
                             END;

               OnAfterGetRecord=BEGIN
                                  IF BinType.Code <> "Bin Type Code" THEN
                                    BinType.GET("Bin Type Code");
                                  IF BinType.Receive AND NOT "Cross-Dock Bin" THEN
                                    CurrReport.SKIP;
                                  IF DestinationType2 = 3 THEN
                                    QtyToEmptyBase := CalcQtyAvailToPick(0)
                                  ELSE
                                    QtyToEmptyBase := CalcQtyAvailToTake(0);
                                  IF QtyToEmptyBase <= 0 THEN
                                    CurrReport.SKIP;

                                  CASE DestinationType2 OF
                                    0:
                                      InsertWWL;
                                    1:
                                      InsertWIPL;
                                    2:
                                      InsertItemJournalLine;
                                    3:
                                      BEGIN
                                        TransferHeader.TESTFIELD("Transfer-from Code","Location Code");
                                        InsertTransferLine;
                                      END;
                                    4:
                                      InsertIntMovementLine;
                                  END;

                                  GetSerialNoAndLotNo;
                                END;

               ReqFilterFields=Location Code,Zone Code,Bin Code,Item No.,Variant Code,Unit of Measure Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      OnInit=BEGIN
               DocNoEditable := TRUE;
               PostingDateEditable := TRUE;
             END;

      OnOpenPage=BEGIN
                   CASE DestinationType2 OF
                     2:
                       BEGIN
                         PostingDateEditable := TRUE;
                         DocNoEditable := TRUE;
                       END;
                     ELSE BEGIN
                       PostingDateEditable := FALSE;
                       DocNoEditable := FALSE;
                     END;
                   END;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1   ;2   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             ESM=Fecha registro;
                             FRC=Date de report;
                             ENC=Posting Date];
                  SourceExpr=PostingDate;
                  Editable=PostingDateEditable }

      { 3   ;2   ;Field     ;
                  Name=DocNo;
                  CaptionML=[ENU=Document No.;
                             ESM=N§ documento;
                             FRC=Nø de document;
                             ENC=Document No.];
                  SourceExpr=DocNo;
                  Editable=DocNoEditable }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      WWLine@1000 : Record 7326;
      WIPLine@1004 : Record 7332;
      ItemJournalLine@1007 : Record 83;
      TransferHeader@1011 : Record 5740;
      TransferLine@1010 : Record 5741;
      BinType@1006 : Record 7303;
      Location@1012 : Record 14;
      InternalMovementHeader@1013 : Record 7346;
      InternalMovementLine@1014 : Record 7347;
      QtyToEmptyBase@1001 : Decimal;
      ReportInitialized@1002 : Boolean;
      Text001@1003 : TextConst 'ENU=Report must be initialized.;ESM=Debe inicializar el informe.;FRC=Le rapport doit ˆtre initialis‚.;ENC=Report must be initialized.';
      DestinationType2@1005 : Option;
      PostingDate@1008 : Date;
      DocNo@1009 : Code[20];
      PostingDateEditable@19050785 : Boolean INDATASET;
      DocNoEditable@19079968 : Boolean INDATASET;

    PROCEDURE InitializeReport@1(WWL@1000 : Record 7326;WIPH@1001 : Record 7331;DestinationType@1002 : Option);
    BEGIN
      CASE DestinationType OF
        0:
          BEGIN
            WWLine := WWL;
            WWLine.SETCURRENTKEY("Worksheet Template Name",Name,"Location Code","Line No.");
            WWLine.SETRANGE("Worksheet Template Name",WWLine."Worksheet Template Name");
            WWLine.SETRANGE(Name,WWLine.Name);
            WWLine.SETRANGE("Location Code",WWLine."Location Code");
            IF WWLine.FINDLAST THEN;
          END;
        1:
          BEGIN
            WIPLine."No." := WIPH."No.";
            WIPLine.SETRANGE("No.",WIPLine."No.");
            IF WIPLine.FINDLAST THEN;
          END;
      END;

      DestinationType2 := DestinationType;
      ReportInitialized := TRUE;
    END;

    PROCEDURE InitializeItemJournalLine@3(ItemJournalLine2@1003 : Record 83);
    BEGIN
      ItemJournalLine := ItemJournalLine2;
      ItemJournalLine.SETRANGE("Journal Template Name",ItemJournalLine2."Journal Template Name");
      ItemJournalLine.SETRANGE("Journal Batch Name",ItemJournalLine2."Journal Batch Name");
      IF ItemJournalLine.FINDLAST THEN;

      PostingDate := ItemJournalLine2."Posting Date";
      DocNo := ItemJournalLine2."Document No.";

      DestinationType2 := 2;
      ReportInitialized := TRUE;
    END;

    PROCEDURE InitializeTransferHeader@5(TransferHeader2@1003 : Record 5740);
    BEGIN
      TransferLine.RESET;
      TransferLine.SETRANGE("Document No.",TransferHeader2."No.");
      IF NOT TransferLine.FINDLAST THEN BEGIN
        TransferLine.INIT;
        TransferLine."Document No." := TransferHeader2."No.";
      END;

      TransferHeader := TransferHeader2;

      DestinationType2 := 3;
      ReportInitialized := TRUE;
    END;

    PROCEDURE InitializeInternalMovement@12(InternalMovementHeader2@1000 : Record 7346);
    BEGIN
      InternalMovementLine.RESET;
      InternalMovementLine.SETRANGE("No.",InternalMovementHeader2."No.");
      IF NOT InternalMovementLine.FINDLAST THEN BEGIN
        InternalMovementLine.INIT;
        InternalMovementLine."No." := InternalMovementHeader2."No.";
      END;
      InternalMovementHeader := InternalMovementHeader2;

      DestinationType2 := 4;
      ReportInitialized := TRUE;
    END;

    PROCEDURE InsertWWL@2();
    BEGIN
      WITH WWLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("From Bin Code","Bin Content"."Bin Code");
        "From Zone Code" := "Bin Content"."Zone Code";
        VALIDATE("From Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per From Unit of Measure"));
        IF QtyToEmptyBase <> (Quantity * "Qty. per From Unit of Measure") THEN BEGIN
          "Qty. (Base)" := QtyToEmptyBase;
          "Qty. Outstanding (Base)" := QtyToEmptyBase;
          "Qty. to Handle (Base)" := QtyToEmptyBase;
        END;
        "Whse. Document Type" := "Whse. Document Type"::"Whse. Mov.-Worksheet";
        "Whse. Document No." := Name;
        "Whse. Document Line No." := "Line No.";
        INSERT;
      END;
    END;

    PROCEDURE InsertWIPL@13();
    BEGIN
      WITH WIPLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("From Bin Code","Bin Content"."Bin Code");
        "From Zone Code" := "Bin Content"."Zone Code";
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        IF QtyToEmptyBase <> (Quantity * "Qty. per Unit of Measure") THEN BEGIN
          "Qty. (Base)" := QtyToEmptyBase;
          "Qty. Outstanding (Base)" := QtyToEmptyBase;
        END;
        INSERT;
      END;
    END;

    PROCEDURE InsertItemJournalLine@4();
    VAR
      ItemJournalTempl@1000 : Record 82;
    BEGIN
      WITH ItemJournalLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Entry Type","Entry Type"::Transfer);
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Posting Date",PostingDate);
        VALIDATE("Document No.",DocNo);
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("New Location Code","Bin Content"."Location Code");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("Bin Code","Bin Content"."Bin Code");
        VALIDATE("New Bin Code",'');
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        ItemJournalTempl.GET("Journal Template Name");
        "Source Code" := ItemJournalTempl."Source Code";
        INSERT;
      END;
    END;

    PROCEDURE InsertTransferLine@9();
    BEGIN
      WITH TransferLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("Transfer-from Bin Code","Bin Content"."Bin Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        INSERT;
      END;
    END;

    PROCEDURE InsertIntMovementLine@11();
    BEGIN
      WITH InternalMovementLine DO BEGIN
        INIT;
        "Line No." := "Line No." + 10000;
        VALIDATE("Location Code","Bin Content"."Location Code");
        VALIDATE("Item No.","Bin Content"."Item No.");
        VALIDATE("Variant Code","Bin Content"."Variant Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE("From Bin Code","Bin Content"."Bin Code");
        VALIDATE("To Bin Code",InternalMovementHeader."To Bin Code");
        VALIDATE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        VALIDATE(Quantity,CalcQtyUOM(QtyToEmptyBase,"Qty. per Unit of Measure"));
        INSERT;
      END;
    END;

    PROCEDURE GetSerialNoAndLotNo@6();
    VAR
      WarehouseEntry@1000 : Record 7312;
      TempTrackingSpecification@1006 : TEMPORARY Record 336;
      ItemTrackingMgt@1002 : Codeunit 6500;
      ReserveItemJnlLine@1001 : Codeunit 99000835;
      ReserveTransferLine@1005 : Codeunit 99000836;
      Direction@1008 : 'Outbound,Inbound';
      SNRequired@1004 : Boolean;
      LNRequired@1003 : Boolean;
    BEGIN
      CLEAR(ItemTrackingMgt);
      ItemTrackingMgt.CheckWhseItemTrkgSetup("Bin Content"."Item No.",SNRequired,LNRequired,FALSE);
      IF NOT (SNRequired OR LNRequired) THEN
        EXIT;

      WITH WarehouseEntry DO BEGIN
        RESET;
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Variant Code","Unit of Measure Code","Lot No.","Serial No.");
        SETRANGE("Item No.","Bin Content"."Item No.");
        SETRANGE("Bin Code","Bin Content"."Bin Code");
        SETRANGE("Location Code","Bin Content"."Location Code");
        SETRANGE("Variant Code","Bin Content"."Variant Code");
        SETRANGE("Unit of Measure Code","Bin Content"."Unit of Measure Code");
        IF FIND('-') THEN
          REPEAT
            IF ("Lot No." <> '') OR ("Serial No." <> '') THEN BEGIN
              IF "Lot No." <> '' THEN
                SETRANGE("Lot No.","Lot No.");
              IF "Serial No." <> '' THEN
                SETRANGE("Serial No.","Serial No.");
              CALCSUMS("Qty. (Base)");
              QtyToEmptyBase := "Qty. (Base)";
              IF QtyToEmptyBase > 0 THEN BEGIN
                GetLocation("Location Code",Location);
                ItemTrackingMgt.GetWhseExpirationDate("Item No.","Variant Code",Location,"Lot No.","Serial No.","Expiration Date");

                CASE DestinationType2 OF
                  0:
                    BEGIN
                      IF NOT OutstandingWhseActiveLineExists(WarehouseEntry,QtyToEmptyBase) THEN
                        WWLine.SetItemTrackingLines("Serial No.","Lot No.","Expiration Date",QtyToEmptyBase);
                    END;
                  1:
                    BEGIN
                      IF NOT OutstandingWhseActiveLineExists(WarehouseEntry,QtyToEmptyBase) THEN
                        WIPLine.SetItemTrackingLines("Serial No.","Lot No.","Expiration Date",QtyToEmptyBase);
                    END;
                  2:
                    ReserveItemJnlLine.InitTrackingSpecification(ItemJournalLine,TempTrackingSpecification);
                  3:
                    ReserveTransferLine.InitTrackingSpecification(
                      TransferLine,TempTrackingSpecification,TransferLine."Shipment Date",Direction::Outbound);
                  4:
                    InternalMovementLine.SetItemTrackingLines("Serial No.","Lot No.","Expiration Date",QtyToEmptyBase);
                END;
              END;
              FIND('+');
              SETRANGE("Lot No.");
              SETRANGE("Serial No.");
            END;
            IF DestinationType2 IN [2,3] THEN
              InsertTempTrackingSpec(WarehouseEntry,QtyToEmptyBase,TempTrackingSpecification);
          UNTIL NEXT = 0;
        CASE DestinationType2 OF
          2:
            ReserveItemJnlLine.RegisterBinContentItemTracking(ItemJournalLine,TempTrackingSpecification);
          3:
            ReserveTransferLine.RegisterBinContentItemTracking(TransferLine,TempTrackingSpecification);
        END;
      END;
    END;

    LOCAL PROCEDURE GetLocation@8(LocationCode@1001 : Code[10];VAR Location@1000 : Record 14);
    BEGIN
      IF LocationCode = Location.Code THEN
        EXIT;

      IF LocationCode = '' THEN
        Location.INIT
      ELSE
        Location.GET(LocationCode);
    END;

    PROCEDURE InsertTempTrackingSpec@7(WarehouseEntry@1000 : Record 7312;QtyOnBin@1001 : Decimal;VAR TempTrackingSpecification@1002 : TEMPORARY Record 336);
    BEGIN
      WITH WarehouseEntry DO BEGIN
        TempTrackingSpecification.SetSkipSerialNoQtyValidation(TRUE);
        TempTrackingSpecification.VALIDATE("Serial No.","Serial No.");
        TempTrackingSpecification.SetSkipSerialNoQtyValidation(FALSE);
        TempTrackingSpecification."New Serial No." := "Serial No.";
        TempTrackingSpecification.VALIDATE("Lot No.","Lot No.");
        TempTrackingSpecification."New Lot No." := "Lot No.";
        TempTrackingSpecification."Quantity Handled (Base)" := 0;
        TempTrackingSpecification."Expiration Date" := "Expiration Date";
        TempTrackingSpecification."New Expiration Date" := "Expiration Date";
        TempTrackingSpecification.VALIDATE("Quantity (Base)",QtyOnBin);
        TempTrackingSpecification."Entry No." += 1;
        TempTrackingSpecification.INSERT;
      END;
    END;

    LOCAL PROCEDURE CalcQtyUOM@10(QtyBase@1000 : Decimal;QtyPerUOM@1001 : Decimal) : Decimal;
    BEGIN
      IF QtyPerUOM = 0 THEN
        EXIT(0);

      EXIT(ROUND(QtyBase / QtyPerUOM,0.00001));
    END;

    LOCAL PROCEDURE OutstandingWhseActiveLineExists@14(WarehouseEntry@1000 : Record 7312;VAR QtyToInsert@1005 : Decimal) : Boolean;
    VAR
      WhseActivityLine@1004 : Record 5767;
    BEGIN
      WITH WhseActivityLine DO BEGIN
        SETCURRENTKEY(
          "Item No.","Bin Code","Location Code","Action Type",
          "Variant Code","Unit of Measure Code","Breakbulk No.",
          "Activity Type","Lot No.","Serial No.","Original Breakbulk");
        SETRANGE("Action Type","Action Type"::Take);
        SETRANGE("Item No.",WarehouseEntry."Item No.");
        SETRANGE("Location Code",WarehouseEntry."Location Code");
        SETRANGE("Bin Code",WarehouseEntry."Bin Code");
        SETRANGE("Variant Code",WarehouseEntry."Variant Code");
        SETRANGE("Unit of Measure Code",WarehouseEntry."Unit of Measure Code");
        IF WarehouseEntry."Lot No." <> '' THEN
          SETRANGE("Lot No.",WarehouseEntry."Lot No.");
        IF WarehouseEntry."Serial No." <> '' THEN
          SETRANGE("Serial No.",WarehouseEntry."Serial No.");
        CALCSUMS("Qty. Outstanding (Base)");
        IF "Qty. Outstanding (Base)" < QtyToInsert THEN
          QtyToInsert := QtyToInsert - "Qty. Outstanding (Base)"
        ELSE
          EXIT(TRUE);
      END;
      EXIT(FALSE);
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

