OBJECT Report 1495 Delete Check Ledger Entries
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=TableData 272=rimd,
                TableData 45=rimd,
                TableData 87=rimd;
    CaptionML=[ENU=Delete Check Ledger Entries;
               ESM=Eliminar movs. cheques;
               FRC=Supprimer les ‚critures du grand livre de contr“le;
               ENC=Delete Cheque Ledger Entries];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  CheckLedgEntryFilter := COPYSTR("Check Ledger Entry".GETFILTERS,1,MAXSTRLEN(DateComprReg.Filter));
                END;

  }
  DATASET
  {
    { 5439;    ;DataItem;Check Ledger Entry  ;
               DataItemTable=Table272;
               DataItemTableView=SORTING(Bank Account No.,Check Date)
                                 WHERE(Entry Status=FILTER(<>Printed));
               OnPreDataItem=BEGIN
                               IF NOT CONFIRM(Text000,FALSE) THEN
                                 CurrReport.BREAK;

                               IF EntrdDateComprReg."Ending Date" = 0D THEN
                                 ERROR(STRSUBSTNO(Text003,EntrdDateComprReg.FIELDCAPTION("Ending Date")));

                               Window.OPEN(Text004);

                               SourceCodeSetup.GET;
                               SourceCodeSetup.TESTFIELD("Compress Check Ledger");

                               CheckLedgEntry2.LOCKTABLE;
                               IF CheckLedgEntry3.FINDLAST THEN;
                               DateComprReg.LOCKTABLE;

                               SETRANGE("Check Date",EntrdDateComprReg."Starting Date",EntrdDateComprReg."Ending Date");
                               DateComprMgt.GetDateFilter(EntrdDateComprReg."Ending Date",EntrdDateComprReg,TRUE);

                               InitRegister;
                             END;

               OnAfterGetRecord=BEGIN
                                  CheckLedgEntry2 := "Check Ledger Entry";
                                  WITH CheckLedgEntry2 DO BEGIN
                                    SETCURRENTKEY("Bank Account No.","Check Date");
                                    COPYFILTERS("Check Ledger Entry");

                                    Window.UPDATE(1,"Bank Account No.");

                                    REPEAT
                                      DELETE;
                                      DateComprReg."No. Records Deleted" := DateComprReg."No. Records Deleted" + 1;
                                      Window.UPDATE(4,DateComprReg."No. Records Deleted");
                                    UNTIL NEXT = 0;
                                  END;

                                  IF DateComprReg."No. Records Deleted" >= NoOfDeleted + 10 THEN BEGIN
                                    NoOfDeleted := DateComprReg."No. Records Deleted";
                                    InsertRegisters(DateComprReg);
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF DateComprReg."No. Records Deleted" > NoOfDeleted THEN
                                  InsertRegisters(DateComprReg);
                              END;

               ReqFilterFields=Bank Account No.,Bank Payment Type }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   IF EntrdDateComprReg."Ending Date" = 0D THEN
                     EntrdDateComprReg."Ending Date" := TODAY;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 1   ;2   ;Field     ;
                  CaptionML=[ENU=Starting Date;
                             ESM=Fecha inicial;
                             FRC=Date d‚but;
                             ENC=Starting Date];
                  SourceExpr=EntrdDateComprReg."Starting Date" }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Ending Date;
                             ESM=Fecha final;
                             FRC=Date fin;
                             ENC=Ending Date];
                  SourceExpr=EntrdDateComprReg."Ending Date" }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?;ESM=Este trabajo por lotes borra movimientos. Por tanto, es muy importante realizar una copia de seguridad de la base de datos antes de ejecutar el trabajo por lotes.\\¨Desea eliminar las fechas de los movimientos?;FRC=Ce traitement en lot supprime des ‚critures. Par cons‚quent, il est important d''effectuer une sauvegarde de la base de donn‚es avant d''ex‚cuter le traitement en lot.\\Voulez-vous compresser les ‚crituresÿ?;ENC=This batch job deletes entries. Therefore, it is important that you make a backup of the database before you run the batch job.\\Do you want to date compress the entries?';
      Text003@1003 : TextConst 'ENU=%1 must be specified.;ESM=Se debe indicar %1.;FRC=%1 doit ˆtre sp‚cifi‚.;ENC=%1 must be specified.';
      Text004@1004 : TextConst 'ENU=Date compressing check ledger entries...\\Bank Account No.       #1##########\No. of entries deleted #4######;ESM=Comprimiendo por fechas movs. cheque...\\N.§ cuenta       #1##########\N.§ movs. eliminados #4######;FRC=Compression des ‚critures du grand livre de contr“le chŠque...\\Nø compte bancaire       #1##########\Nbre d''‚critures supprim‚es #4######;ENC=Date compressing check ledger entries...\\Bank Account No.       #1##########\No. of entries deleted #4######';
      Text007@1007 : TextConst 'ENU=All records deleted;ESM=Todos los movs. borrados;FRC=Tous les relev‚s supprim‚s;ENC=All records deleted';
      SourceCodeSetup@1008 : Record 242;
      DateComprReg@1009 : Record 87;
      EntrdDateComprReg@1010 : Record 87;
      CheckLedgEntry2@1011 : Record 272;
      CheckLedgEntry3@1012 : Record 272;
      DateComprMgt@1013 : Codeunit 356;
      Window@1014 : Dialog;
      CheckLedgEntryFilter@1015 : Text[250];
      NoOfDeleted@1016 : Integer;
      RegExists@1017 : Boolean;

    LOCAL PROCEDURE InitRegister@4();
    BEGIN
      IF DateComprReg.FINDLAST THEN;
      DateComprReg.INIT;
      DateComprReg."No." := DateComprReg."No." + 1;
      DateComprReg."Table ID" := DATABASE::"Check Ledger Entry";
      DateComprReg."Creation Date" := TODAY;
      DateComprReg."Starting Date" := EntrdDateComprReg."Starting Date";
      DateComprReg."Ending Date" := EntrdDateComprReg."Ending Date";
      DateComprReg."Period Length" := DateComprReg."Period Length"::Day;
      DateComprReg."Retain Field Contents" := Text007;
      DateComprReg.Filter := CheckLedgEntryFilter;
      DateComprReg."Register No." := 0;
      DateComprReg."Source Code" := SourceCodeSetup."Compress Check Ledger";
      DateComprReg."User ID" := USERID;

      RegExists := FALSE;
      NoOfDeleted := 0;
    END;

    LOCAL PROCEDURE InsertRegisters@1(DateComprReg@1000 : Record 87);
    BEGIN
      IF RegExists THEN BEGIN
        DateComprReg.MODIFY;
      END ELSE BEGIN
        DateComprReg.INSERT;
        RegExists := TRUE;
      END;
      COMMIT;

      CheckLedgEntry2.LOCKTABLE;
      IF CheckLedgEntry3.FINDLAST THEN;
      DateComprReg.LOCKTABLE;

      InitRegister;
    END;

    PROCEDURE InitializeRequest@2(StartingDate@1000 : Date;EndingDate@1001 : Date);
    BEGIN
      EntrdDateComprReg."Starting Date" := StartingDate;
      EntrdDateComprReg."Ending Date" := EndingDate;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

