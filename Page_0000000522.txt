OBJECT Page 522 View Applied Entries
{
  OBJECT-PROPERTIES
  {
    Date=09/07/12;
    Time=12:00:00 PM;
    Version List=NAVW17.00;
  }
  PROPERTIES
  {
    Permissions=TableData 339=rimd;
    CaptionML=[ENU=View Applied Entries;
               ESM=Ver movs. conciliados;
               FRC=Afficher les Çcritures affectÇes;
               ENC=View Applied Entries];
    SaveValues=Yes;
    InsertAllowed=No;
    DeleteAllowed=No;
    ModifyAllowed=Yes;
    SourceTable=Table32;
    DataCaptionExpr=CaptionExpr;
    PageType=Worksheet;
    SourceTableTemporary=Yes;
    OnInit=BEGIN
             RemoveAppButtonVisible := TRUE;
           END;

    OnOpenPage=BEGIN
                 CurrPage.LOOKUPMODE := NOT ShowApplied;
                 RemoveAppButtonVisible := ShowApplied;
                 Show;
               END;

    OnFindRecord=BEGIN
                   EXIT(FIND(Which));
                 END;

    OnAfterGetRecord=BEGIN
                       GetApplQty;
                     END;

    ActionList=ACTIONS
    {
      { 1900000003;0 ;ActionContainer;
                      ActionContainerType=RelatedInformation }
      { 36      ;1   ;ActionGroup;
                      CaptionML=[ENU=Ent&ry;
                                 ESM=&Movimiento;
                                 FRC=ê&criture;
                                 ENC=Ent&ry];
                      Image=Entry }
      { 37      ;2   ;Action    ;
                      ShortCutKey=Shift+Ctrl+D;
                      CaptionML=[ENU=Dimensions;
                                 ESM=Dimensiones;
                                 FRC=Dimensions;
                                 ENC=Dimensions];
                      Image=Dimensions;
                      OnAction=BEGIN
                                 ShowDimensions;
                               END;
                                }
      { 48      ;2   ;Action    ;
                      ShortCutKey=Ctrl+F7;
                      CaptionML=[ENU=&Value Entries;
                                 ESM=Movs. &valor;
                                 FRC=êcritures de &valeur;
                                 ENC=&Value Entries];
                      RunObject=Page 5802;
                      RunPageView=SORTING(Item Ledger Entry No.);
                      RunPageLink=Item Ledger Entry No.=FIELD(Entry No.);
                      Image=ValueLedger }
      { 38      ;2   ;Action    ;
                      CaptionML=[ENU=Reservation Entries;
                                 ESM=Movs. reserva;
                                 FRC=EntrÇes de rÇservation;
                                 ENC=Reservation Entries];
                      Image=ReservationLedger;
                      OnAction=BEGIN
                                 ShowReservationEntries(TRUE);
                               END;
                                }
      { 1900000004;0 ;ActionContainer;
                      ActionContainerType=ActionItems }
      { 1       ;1   ;Action    ;
                      Name=RemoveAppButton;
                      CaptionML=[ENU=Re&move Application;
                                 ESM=Eli&minar liquidaci¢n;
                                 FRC=Suppri&mer application;
                                 ENC=Re&move Application];
                      Promoted=Yes;
                      Visible=RemoveAppButtonVisible;
                      Image=Cancel;
                      PromotedCategory=Process;
                      OnAction=BEGIN
                                 UnapplyRec;
                               END;
                                }
    }
  }
  CONTROLS
  {
    { 1900000001;0;Container;
                ContainerType=ContentArea }

    { 2   ;1   ;Group     ;
                Editable=FALSE;
                GroupType=Repeater }

    { 3   ;2   ;Field     ;
                SourceExpr="Posting Date" }

    { 5   ;2   ;Field     ;
                SourceExpr="Entry Type" }

    { 7   ;2   ;Field     ;
                SourceExpr="Document Type" }

    { 9   ;2   ;Field     ;
                SourceExpr="Document No." }

    { 11  ;2   ;Field     ;
                SourceExpr="Document Line No.";
                Visible=FALSE }

    { 16  ;2   ;Field     ;
                SourceExpr="Item No.";
                Visible=FALSE }

    { 19  ;2   ;Field     ;
                SourceExpr="Variant Code";
                Visible=FALSE }

    { 21  ;2   ;Field     ;
                SourceExpr="Serial No.";
                Visible=FALSE }

    { 23  ;2   ;Field     ;
                SourceExpr="Lot No.";
                Visible=FALSE }

    { 25  ;2   ;Field     ;
                SourceExpr=Description;
                Visible=FALSE }

    { 27  ;2   ;Field     ;
                SourceExpr="Global Dimension 1 Code";
                Visible=FALSE }

    { 29  ;2   ;Field     ;
                SourceExpr="Global Dimension 2 Code";
                Visible=FALSE }

    { 31  ;2   ;Field     ;
                SourceExpr="Location Code";
                Visible=FALSE }

    { 33  ;2   ;Field     ;
                CaptionML=[ENU=Applied Quantity;
                           ESM=Cdad. liquidada;
                           FRC=QuantitÇ affectÇe;
                           ENC=Applied Quantity];
                DecimalPlaces=0:5;
                SourceExpr=ApplQty }

    { 35  ;2   ;Field     ;
                CaptionML=[ENU=Quantity;
                           ESM=Cantidad;
                           FRC=QuantitÇ;
                           ENC=Quantity];
                DecimalPlaces=0:5;
                SourceExpr=Qty }

    { 40  ;2   ;Field     ;
                SourceExpr="Cost Amount (Actual)" }

    { 42  ;2   ;Field     ;
                CaptionML=[ENU=Unit Cost($);
                           ESM=Costo unitario ($);
                           FRC=Coñt unitaire ($);
                           ENC=Unit Cost($)];
                SourceExpr=GetUnitCostLCY;
                Visible=FALSE }

    { 44  ;2   ;Field     ;
                SourceExpr="Invoiced Quantity";
                Visible=TRUE }

    { 46  ;2   ;Field     ;
                SourceExpr="Reserved Quantity" }

    { 49  ;2   ;Field     ;
                SourceExpr="Remaining Quantity";
                Visible=TRUE }

    { 1102601000;2;Field  ;
                CaptionML=[ENU=Quantity Available for Cost Applications;
                           ESM=Cantidad disponible para liquidaciones de costo;
                           FRC=QuantitÇ disponible pour les coñts appliquÇs;
                           ENC=Quantity Available for Cost Applications];
                DecimalPlaces=0:5;
                SourceExpr=CostAvailable(Rec) }

    { 51  ;2   ;Field     ;
                CaptionML=[ENU=Available for Quantity Application;
                           ESM=Disponible para aplicaci¢n cantidad;
                           FRC=Disponible pour quantitÇ appliquÇe;
                           ENC=Available for Quantity Application];
                DecimalPlaces=0:5;
                SourceExpr=QuantityAvailable(Rec) }

    { 53  ;2   ;Field     ;
                SourceExpr="Shipped Qty. Not Returned" }

    { 55  ;2   ;Field     ;
                SourceExpr=Open }

    { 57  ;2   ;Field     ;
                SourceExpr="Qty. per Unit of Measure";
                Visible=FALSE }

    { 59  ;2   ;Field     ;
                SourceExpr="Drop Shipment";
                Visible=FALSE }

    { 61  ;2   ;Field     ;
                SourceExpr="Applies-to Entry";
                Visible=FALSE }

    { 63  ;2   ;Field     ;
                SourceExpr="Applied Entry to Adjust";
                Visible=FALSE }

    { 4   ;2   ;Field     ;
                SourceExpr="Order Type" }

    { 65  ;2   ;Field     ;
                SourceExpr="Order No.";
                Visible=FALSE }

    { 67  ;2   ;Field     ;
                SourceExpr="Entry No." }

  }
  CODE
  {
    VAR
      AppliedRec@1001 : Record 32;
      ShowApplied@1002 : Boolean;
      ShowQuantity@1007 : Boolean;
      Apply@1003 : Codeunit 22;
      RecordToShow@1008 : Record 32;
      MaxToApply@1004 : Decimal;
      ApplQty@1005 : Decimal;
      Qty@1006 : Decimal;
      TotalApplied@1015 : Decimal;
      Text001@1000 : TextConst 'ENU=Applied Entries;ESM=Movs. conciliados;FRC=êcritures affectÇes;ENC=Applied Entries';
      Text002@1009 : TextConst 'ENU=Unapplied Entries;ESM=Movs. sin conciliar;FRC=êcritures non affectÇes;ENC=Unapplied Entries';
      RemoveAppButtonVisible@19026324 : Boolean INDATASET;

    PROCEDURE SetRecordToShow@7(VAR RecordToSet@1000 : Record 32;VAR ApplyCodeunit@1001 : Codeunit 22;newShowApplied@1002 : Boolean);
    BEGIN
      RecordToShow.COPY(RecordToSet);
      Apply := ApplyCodeunit;
      ShowApplied := newShowApplied;
    END;

    LOCAL PROCEDURE Show@8();
    VAR
      ItemLedgEntry@1000 : Record 32;
      Apprec@1102601000 : Record 339;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        GET(RecordToShow."Entry No.");
        ShowQuantity := NOT (("Entry Type" IN ["Entry Type"::Sale,"Entry Type"::Consumption,"Entry Type"::Output]) AND Positive);

        MaxToApply := 0;
        IF NOT ShowQuantity THEN
          MaxToApply := Quantity + Apprec.Returned("Entry No.");
      END;
      SetMyView(RecordToShow,ShowApplied,ShowQuantity,MaxToApply);
    END;

    LOCAL PROCEDURE SetMyView@22(ItemLedgEntry@1000 : Record 32;ShowApplied@1002 : Boolean;ShowQuantity@1004 : Boolean;MaxToApply@1005 : Decimal);
    BEGIN
      InitView;
      CASE ShowQuantity OF
        TRUE:
          CASE ShowApplied OF
            TRUE:
              ShowQuantityApplied(ItemLedgEntry);
            FALSE:
              BEGIN
                ShowQuantityOpen(ItemLedgEntry);
                ShowCostOpen(ItemLedgEntry,MaxToApply);
              END;
          END
          ;
        FALSE:
          CASE ShowApplied OF
            TRUE:
              ShowCostApplied(ItemLedgEntry);
            FALSE:
              ShowCostOpen(ItemLedgEntry,MaxToApply);
          END
          ;
      END;
    END;

    LOCAL PROCEDURE InitView@23();
    BEGIN
      DELETEALL;
    END;

    LOCAL PROCEDURE ShowQuantityApplied@20(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
    BEGIN
      InitApplied;
      WITH ItemLedgEntry DO
        IF Positive THEN BEGIN
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1&<>%2',"Entry No.",0);
          IF ItemApplnEntry.FIND('-') THEN
            REPEAT
              InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity,TRUE);
            UNTIL ItemApplnEntry.NEXT = 0;
        END ELSE BEGIN
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETRANGE("Item Ledger Entry No.","Entry No.");
          IF ItemApplnEntry.FIND('-') THEN
            REPEAT
              InsertTempEntry(ItemApplnEntry."Inbound Item Entry No.",-ItemApplnEntry.Quantity,TRUE);
            UNTIL ItemApplnEntry.NEXT = 0;
        END
        ;
    END;

    LOCAL PROCEDURE ShowQuantityOpen@19(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO
        IF "Remaining Quantity" <> 0 THEN BEGIN
          ItemLedgEntry2.SETCURRENTKEY("Item No.",Open,"Variant Code",Positive,"Location Code","Posting Date");
          ItemLedgEntry2.SETRANGE("Item No.","Item No.");
          ItemLedgEntry2.SETRANGE("Location Code" ,"Location Code");
          ItemLedgEntry2.SETRANGE(Positive,NOT Positive);
          ItemLedgEntry2.SETRANGE(Open,TRUE);
          IF ItemLedgEntry2.FIND('-') THEN
            REPEAT
              IF (QuantityAvailable(ItemLedgEntry2) <> 0) AND
                 NOT ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
              THEN
                InsertTempEntry(ItemLedgEntry2."Entry No.",0,TRUE);
            UNTIL ItemLedgEntry2.NEXT = 0;
        END;
    END;

    LOCAL PROCEDURE ShowCostApplied@18(ItemLedgEntry@1000 : Record 32);
    VAR
      ItemApplnEntry@1002 : Record 339;
    BEGIN
      InitApplied;
      WITH ItemLedgEntry DO
        IF Positive THEN BEGIN
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Inbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',"Entry No.");
          ItemApplnEntry.SETFILTER("Outbound Item Entry No.",'<>%1',0);
          ItemApplnEntry.SETRANGE("Cost Application",TRUE); // we want to show even average cost application
          IF ItemApplnEntry.FIND('-') THEN
            REPEAT
              InsertTempEntry(ItemApplnEntry."Outbound Item Entry No.",ItemApplnEntry.Quantity,FALSE);
            UNTIL ItemApplnEntry.NEXT = 0;
        END ELSE BEGIN
          ItemApplnEntry.RESET;
          ItemApplnEntry.SETCURRENTKEY("Outbound Item Entry No.","Item Ledger Entry No.","Cost Application");
          ItemApplnEntry.SETRANGE("Outbound Item Entry No.","Entry No.");
          ItemApplnEntry.SETFILTER("Item Ledger Entry No.",'<>%1',"Entry No.");
          ItemApplnEntry.SETRANGE("Cost Application",TRUE); // we want to show even average cost application
          IF ItemApplnEntry.FIND('-') THEN
            REPEAT
              InsertTempEntry(ItemApplnEntry."Inbound Item Entry No.",-ItemApplnEntry.Quantity,FALSE);
            UNTIL ItemApplnEntry.NEXT = 0;
        END
        ;
    END;

    LOCAL PROCEDURE ShowCostOpen@17(ItemLedgEntry@1000 : Record 32;MaxToApply@1003 : Decimal);
    VAR
      ItemApplnEntry@1002 : Record 339;
      ItemLedgEntry2@1001 : Record 32;
    BEGIN
      WITH ItemLedgEntry DO BEGIN
        ItemLedgEntry2.SETCURRENTKEY("Item No.",Positive,"Location Code","Variant Code");
        ItemLedgEntry2.SETRANGE("Item No.","Item No.");
        ItemLedgEntry2.SETRANGE("Location Code","Location Code");
        ItemLedgEntry2.SETRANGE(Positive,NOT Positive);
        ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<%1&>=%2',0,-MaxToApply);
        IF (MaxToApply <> 0) AND Positive THEN
          ItemLedgEntry2.SETFILTER("Shipped Qty. Not Returned",'<=%1',-MaxToApply);
        IF ItemLedgEntry2.FIND('-') THEN
          REPEAT
            IF (CostAvailable(ItemLedgEntry2) <> 0) AND
               NOT ItemApplnEntry.ExistsBetween("Entry No.",ItemLedgEntry2."Entry No.")
            THEN
              InsertTempEntry(ItemLedgEntry2."Entry No.",0,TRUE);
          UNTIL ItemLedgEntry2.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE InsertTempEntry@21(EntryNo@1000 : Integer;AppliedQty@1001 : Decimal;ShowQuantity@1003 : Boolean);
    VAR
      ItemLedgEntry@1002 : Record 32;
    BEGIN
      ItemLedgEntry.GET(EntryNo);

      IF ShowQuantity THEN
        IF AppliedQty * ItemLedgEntry.Quantity < 0 THEN
          EXIT;

      IF NOT GET(EntryNo) THEN BEGIN
        RESET;
        Rec := ItemLedgEntry;
        CALCFIELDS("Reserved Quantity");
        Quantity := AppliedQty;
        INSERT;
      END ELSE BEGIN
        Quantity := Quantity + AppliedQty;
        MODIFY;
      END;

      TotalApplied := TotalApplied + AppliedQty;
    END;

    LOCAL PROCEDURE InitApplied@13();
    BEGIN
      CLEAR(TotalApplied);
    END;

    LOCAL PROCEDURE RemoveApplications@1(Inbound@1000 : Integer;OutBound@1001 : Integer);
    VAR
      Application@1003 : Record 339;
    BEGIN
      Application.SETCURRENTKEY("Inbound Item Entry No.","Outbound Item Entry No.");
      Application.SETRANGE("Inbound Item Entry No.",Inbound);
      Application.SETRANGE("Outbound Item Entry No.",OutBound);
      IF Application.FIND('-') THEN
        REPEAT
          Apply.UnApply(Application);
        UNTIL Application.NEXT = 0;
    END;

    LOCAL PROCEDURE UnapplyRec@3();
    VAR
      LoopRec@1000 : Record 32;
      Applyrec@1001 : Record 32;
      AppliedRec@1002 : Record 32;
    BEGIN
      Applyrec.GET(RecordToShow."Entry No.");
      CurrPage.SETSELECTIONFILTER(LoopRec);
      IF LoopRec.FIND('-') THEN
        REPEAT
          AppliedRec := LoopRec;
          IF AppliedRec."Entry No." <> 0 THEN BEGIN
            IF Applyrec.Positive THEN
              RemoveApplications(Applyrec."Entry No.",AppliedRec."Entry No.")
            ELSE
              RemoveApplications(AppliedRec."Entry No.",Applyrec."Entry No.");
          END;
        UNTIL LoopRec.NEXT = 0;

      BlockItem(Applyrec."Item No.");
      Show;
    END;

    PROCEDURE ApplyRec@5();
    VAR
      Applyrec@1000 : Record 32;
      LoopRec@1001 : Record 32;
    BEGIN
      Applyrec.GET(RecordToShow."Entry No.");
      CurrPage.SETSELECTIONFILTER(LoopRec);
      IF LoopRec.FIND('-') THEN
        REPEAT
          AppliedRec := LoopRec;
          IF AppliedRec."Entry No." <> 0 THEN
            Apply.ReApply(Applyrec,AppliedRec."Entry No.");

        UNTIL LoopRec.NEXT = 0;

      IF Applyrec.Positive THEN
        RemoveDuplicateApplication(Applyrec."Entry No.");

      Show;
    END;

    LOCAL PROCEDURE RemoveDuplicateApplication@4(ItemLedgerEntryNo@1000 : Integer);
    VAR
      ItemApplicationEntry@1001 : Record 339;
    BEGIN
      WITH ItemApplicationEntry DO BEGIN
        SETCURRENTKEY("Inbound Item Entry No.","Item Ledger Entry No.","Outbound Item Entry No.","Cost Application");
        SETRANGE("Inbound Item Entry No.",ItemLedgerEntryNo);
        SETRANGE("Item Ledger Entry No.",ItemLedgerEntryNo);
        SETFILTER("Outbound Item Entry No.",'<>0');
        IF NOT ISEMPTY THEN BEGIN
          SETRANGE("Outbound Item Entry No.",0);
          DELETEALL;
        END
      END;
    END;

    PROCEDURE BlockItem@9(ItemNo@1000 : Code[20]);
    VAR
      Item@1001 : Record 27;
    BEGIN
      Item.GET(ItemNo);
      IF Item."Application Wksh. User ID" <> UPPERCASE(USERID) THEN
        Item.CheckBlockedByApplWorksheet;

      Item."Application Wksh. User ID" := USERID;
      Item.MODIFY(TRUE);
    END;

    LOCAL PROCEDURE GetApplQty@10();
    VAR
      ItemLedgEntry@1000 : Record 32;
    BEGIN
      ItemLedgEntry.GET("Entry No.");
      ApplQty := Quantity;
      Qty := ItemLedgEntry.Quantity;
    END;

    LOCAL PROCEDURE QuantityAvailable@11(ILE@1000 : Record 32) : Decimal;
    BEGIN
      WITH ILE DO BEGIN
        CALCFIELDS("Reserved Quantity");
        EXIT("Remaining Quantity" - "Reserved Quantity");
      END;
    END;

    LOCAL PROCEDURE CostAvailable@1102601000(ILE@1000 : Record 32) : Decimal;
    VAR
      Apprec@1102601000 : Record 339;
    BEGIN
      WITH ILE DO BEGIN
        IF "Shipped Qty. Not Returned" <> 0 THEN
          EXIT(-"Shipped Qty. Not Returned");

        EXIT("Remaining Quantity" + Apprec.Returned("Entry No."));
      END;
    END;

    LOCAL PROCEDURE CaptionExpr@2() : Text[250];
    BEGIN
      IF ShowApplied THEN
        EXIT(Text001);

      EXIT(Text002);
    END;

    BEGIN
    END.
  }
}

