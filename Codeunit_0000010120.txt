OBJECT Codeunit 10120 Bank Rec.-Post
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVNA7.10;
  }
  PROPERTIES
  {
    TableNo=10120;
    Permissions=TableData 270=rm,
                TableData 271=rm,
                TableData 272=rm,
                TableData 356=rimd,
                TableData 10120=rmd,
                TableData 10121=rmd,
                TableData 10122=rimd,
                TableData 10123=rimd,
                TableData 10124=rimd,
                TableData 10125=rimd;
    OnRun=BEGIN
            CLEARALL;

            BankRecHeader := Rec;
            WITH BankRecHeader DO BEGIN
              TESTFIELD("Statement Date");
              TESTFIELD("Statement No.");
              TESTFIELD("Bank Account No.");

              CalculateBalance;
              IF ("G/L Balance" +
                  ("Positive Adjustments" - "Negative Bal. Adjustments") +
                  ("Negative Adjustments" - "Positive Bal. Adjustments")) -
                 (("Statement Balance" + "Outstanding Deposits") - "Outstanding Checks") <> 0
              THEN
                ERROR(Text007);

              CALCFIELDS("Total Adjustments","Total Balanced Adjustments");
              IF ("Total Adjustments" - "Total Balanced Adjustments") <> 0 THEN
                ERROR(Text008);

              Window.OPEN(Text001 +
                Text002 +
                Text003 +
                Text004 +
                Text005 +
                Text006);

              Window.UPDATE(1,"Bank Account No.");
              Window.UPDATE(2,"Statement No.");

              GLSetup.GET;

              BankRecLine.LOCKTABLE;
              PostedBankRecLine.LOCKTABLE;

              SourceCodeSetup.GET;

              SETRANGE("Date Filter","Statement Date");
              CALCFIELDS("G/L Balance (LCY)");
              CalculateBalance;

              PostedBankRecHeader.INIT;
              PostedBankRecHeader.TRANSFERFIELDS(BankRecHeader,TRUE);
              PostedBankRecHeader."G/L Balance (LCY)" := "G/L Balance (LCY)";
              PostedBankRecHeader.INSERT;

              BankRecCommentLine.SETCURRENTKEY("Table Name",
                "Bank Account No.",
                "No.");
              BankRecCommentLine.SETRANGE("Table Name",BankRecCommentLine."Table Name"::"Bank Rec.");
              BankRecCommentLine.SETRANGE("Bank Account No.","Bank Account No.");
              BankRecCommentLine.SETRANGE("No.","Statement No.");
              IF BankRecCommentLine.FIND('-') THEN
                REPEAT BEGIN
                    Window.UPDATE(3,BankRecCommentLine."Line No.");

                    PostedBankRecCommentLine.INIT;
                    PostedBankRecCommentLine.TRANSFERFIELDS(BankRecCommentLine,TRUE);
                    PostedBankRecCommentLine."Table Name" := PostedBankRecCommentLine."Table Name"::"Posted Bank Rec.";
                    PostedBankRecCommentLine.INSERT;
                  END UNTIL BankRecCommentLine.NEXT = 0;
              BankRecCommentLine.DELETEALL;

              BankRecLine.RESET;
              BankRecLine.SETCURRENTKEY("Bank Account No.",
                "Statement No.");
              BankRecLine.SETRANGE("Bank Account No.","Bank Account No.");
              BankRecLine.SETRANGE("Statement No.","Statement No.");
              IF BankRecLine.FIND('-') THEN
                REPEAT BEGIN
                    Window.UPDATE(BankRecLine."Record Type" + 4,BankRecLine."Line No.");
                    IF BankRecLine."Record Type" = BankRecLine."Record Type"::Adjustment THEN
                      IF (GLSetup."Bank Rec. Adj. Doc. Nos." <> '') AND
                         (BankRecLine."Document No." <> NoSeriesMgt.GetNextNo(GLSetup."Bank Rec. Adj. Doc. Nos.",
                            "Posting Date",FALSE))
                      THEN
                        NoSeriesMgt.TestManual(GLSetup."Bank Rec. Adj. Doc. Nos.");

                    IF BankRecLine."Record Type" = BankRecLine."Record Type"::Adjustment THEN
                      PostAdjustmentToGL(BankRecLine)
                    ELSE
                      IF BankRecLine.Cleared THEN
                        UpdateLedgers(BankRecLine,SetStatus::Posted)
                      ELSE
                        UpdateLedgers(BankRecLine,SetStatus::Open);

                    PostedBankRecLine.INIT;
                    PostedBankRecLine.TRANSFERFIELDS(BankRecLine,TRUE);
                    PostedBankRecLine.INSERT;
                  END UNTIL BankRecLine.NEXT = 0;
              BankRecLine.DELETEALL;
              BankRecSubLine.RESET;
              BankRecSubLine.SETRANGE("Bank Account No.","Bank Account No.");
              BankRecSubLine.SETRANGE("Statement No.","Statement No.");
              BankRecSubLine.DELETEALL;

              BankAccount.GET("Bank Account No.");
              BankAccount."Last Statement No." := "Statement No.";
              BankAccount."Balance Last Statement" := "Statement Balance";
              BankAccount.MODIFY;

              DELETE;

              COMMIT;
              Window.CLOSE;
            END;
            IF GLSetup."Bank Rec. Adj. Doc. Nos." <> '' THEN
              NoSeriesMgt.SaveNoSeries;
            Rec := BankRecHeader;
            MESSAGE(Text009);
            UpdateAnalysisView.UpdateAll(0,TRUE);
          END;

  }
  CODE
  {
    VAR
      SetStatus@1020016 : 'Open,Cleared,Posted';
      BankRecHeader@1020000 : Record 10120;
      BankRecLine@1020001 : Record 10121;
      BankRecCommentLine@1020002 : Record 10122;
      BankRecSubLine@1480002 : Record 10126;
      PostedBankRecHeader@1020003 : Record 10123;
      PostedBankRecLine@1020004 : Record 10124;
      PostedBankRecCommentLine@1020007 : Record 10122;
      GLSetup@1033 : Record 98;
      SourceCodeSetup@1061 : Record 242;
      BankAccount@1020014 : Record 270;
      GenJnlPostLine@1020017 : Codeunit 12;
      UpdateAnalysisView@1480000 : Codeunit 410;
      Window@1097 : Dialog;
      Text001@1020005 : TextConst 'ENU=Posting Bank Account  #1#################### \\;ESM=Registrando cuenta    #1#################### \\;FRC=Compte bancaire de report  #1#################### \\;ENC=Posting Bank Account  #1#################### \\';
      Text002@1020006 : TextConst 'ENU=Statement             #2#################### \;ESM=Est. cta.             #2#################### \;FRC=Relev‚                     #2#################### \;ENC=Statement             #2#################### \';
      Text003@1020008 : TextConst 'ENU=Comment               #3########## \;ESM=Comentario            #3########## \;FRC=Commentaire                #3########## \;ENC=Comment               #3########## \';
      Text004@1020009 : TextConst 'ENU=Check                 #4########## \;ESM=Cheque                #4########## \;FRC=ChŠque                     #4########## \;ENC=Cheque                #4########## \';
      Text005@1020010 : TextConst 'ENU=Deposit               #5########## \;ESM=Dep¢sito              #5########## \;FRC=D‚p“t                      #5########## \;ENC=Deposit               #5########## \';
      Text006@1020011 : TextConst 'ENU=Adjustment            #6########## \;ESM=Ajuste                #6########## \;FRC=Rajustement                #6########## \;ENC=Adjustment            #6########## \';
      Text007@1020013 : TextConst 'ENU=Difference must be zero before the statement can be posted.;ESM=La diferencia debe ser cero para poder registrar el estado de cuenta.;FRC=La diff‚rence doit ˆtre de z‚ro avant de pouvoir reporter le relev‚.;ENC=Difference must be zero before the statement can be posted.';
      Text008@1020015 : TextConst 'ENU=Balance of adjustments must be zero before posting.;ESM=El saldo de los ajustes debe ser cero para poder registrar.;FRC=Le solde des ajustements doit ˆtre de z‚ro avant le report.;ENC=Balance of adjustments must be zero before posting.';
      Text009@1480001 : TextConst 'ENU=Statement successfully posted.;ESM=Declaraci¢n registrada con ‚xito.;FRC=Report du relev‚ r‚ussi.;ENC=Statement successfully posted.';
      NoSeriesMgt@1020018 : Codeunit 396;

    PROCEDURE UpdateLedgers@1020003(BankRecLine3@1020001 : Record 10121;UseStatus@1020003 : 'Open,Cleared,Posted');
    VAR
      BankLedgerEntry@1020000 : Record 271;
      CheckLedgerEntry@1020002 : Record 272;
      BankRecSubLine@1480000 : Record 10126;
      CheckLedgerEntry2@1480001 : Record 272;
    BEGIN
      IF (BankRecLine3."Bank Ledger Entry No." <> 0) AND (BankRecLine3."Check Ledger Entry No." = 0) THEN
        UpdateBankLedger(
          BankRecLine3."Bank Ledger Entry No.",UseStatus,
          BankRecLine3."Statement No.",BankRecLine3."Line No.");
      IF BankRecLine3."Check Ledger Entry No." <> 0 THEN BEGIN
        IF CheckLedgerEntry.GET(BankRecLine3."Check Ledger Entry No.") THEN BEGIN
          IF UseStatus = UseStatus::Posted THEN
            CheckLedgerEntry.Open := FALSE;
          CASE UseStatus OF
            UseStatus::Open:
              CheckLedgerEntry."Statement Status" := CheckLedgerEntry."Statement Status"::Open;
            UseStatus::Cleared:
              CheckLedgerEntry."Statement Status" := CheckLedgerEntry."Statement Status"::"Check Entry Applied";
            UseStatus::Posted:
              CheckLedgerEntry."Statement Status" := CheckLedgerEntry."Statement Status"::Closed;
          END;
          IF CheckLedgerEntry."Statement Status" = CheckLedgerEntry."Statement Status"::Open THEN BEGIN
            CheckLedgerEntry."Statement No." := '';
            CheckLedgerEntry."Statement Line No." := 0;
          END ELSE BEGIN
            CheckLedgerEntry."Statement No." := BankRecLine3."Statement No.";
            CheckLedgerEntry."Statement Line No." := BankRecLine3."Line No.";
          END;
          CheckLedgerEntry.MODIFY;
          IF (CheckLedgerEntry."Check Type" = CheckLedgerEntry."Check Type"::"Total Check") OR
             (UseStatus <> UseStatus::Posted)
          THEN
            UpdateBankLedger(
              BankRecLine3."Bank Ledger Entry No.",UseStatus,
              BankRecLine3."Statement No.",BankRecLine3."Line No.")
          ELSE BEGIN
            CheckLedgerEntry2.RESET;
            CheckLedgerEntry2.SETCURRENTKEY("Bank Account Ledger Entry No.");
            CheckLedgerEntry2.SETRANGE("Bank Account Ledger Entry No.",CheckLedgerEntry."Bank Account Ledger Entry No.");
            CheckLedgerEntry2.SETFILTER("Statement Status",'<>%1',CheckLedgerEntry."Statement Status"::Closed);
            IF CheckLedgerEntry2.FIND('-') THEN BEGIN
              IF BankLedgerEntry.GET(CheckLedgerEntry2."Bank Account Ledger Entry No.") THEN BEGIN
                BankLedgerEntry."Remaining Amount" := 0;
                REPEAT
                  BankLedgerEntry."Remaining Amount" :=
                    BankLedgerEntry."Remaining Amount" - CheckLedgerEntry2.Amount;
                UNTIL CheckLedgerEntry2.NEXT = 0;
                BankLedgerEntry.MODIFY;
              END;
            END ELSE
              UpdateBankLedger(
                BankRecLine3."Bank Ledger Entry No.",UseStatus,
                BankRecLine3."Statement No.",BankRecLine3."Line No.");
          END;
        END;
      END;
      IF BankRecLine3."Collapse Status" = BankRecLine3."Collapse Status"::"Collapsed Deposit" THEN BEGIN
        BankRecSubLine.SETRANGE("Bank Account No.",BankRecLine3."Bank Account No.");
        BankRecSubLine.SETRANGE("Statement No.",BankRecLine3."Statement No.");
        BankRecSubLine.SETRANGE("Bank Rec. Line No.",BankRecLine3."Line No.");
        IF BankRecSubLine.FIND('-') THEN
          REPEAT
            UpdateBankLedger(
              BankRecSubLine."Bank Ledger Entry No.",UseStatus,
              BankRecLine3."Statement No.",BankRecLine3."Line No.");
          UNTIL BankRecSubLine.NEXT = 0;
      END;
    END;

    LOCAL PROCEDURE UpdateBankLedger@1480000(BankLedgerEntryNo@1480000 : Integer;UseStatus@1480001 : 'Open,Cleared,Posted';StatementNo@1480003 : Code[20];StatementLineNo@1480004 : Integer);
    VAR
      BankLedgerEntry@1480002 : Record 271;
    BEGIN
      IF BankLedgerEntry.GET(BankLedgerEntryNo) THEN BEGIN
        IF UseStatus = UseStatus::Posted THEN BEGIN
          BankLedgerEntry.Open := FALSE;
          BankLedgerEntry."Remaining Amount" := 0;
        END;
        CASE UseStatus OF
          UseStatus::Open:
            BankLedgerEntry."Statement Status" := BankLedgerEntry."Statement Status"::Open;
          UseStatus::Cleared:
            BankLedgerEntry."Statement Status" := BankLedgerEntry."Statement Status"::"Bank Acc. Entry Applied";
          UseStatus::Posted:
            BankLedgerEntry."Statement Status" := BankLedgerEntry."Statement Status"::Closed;
        END;
        IF BankLedgerEntry."Statement Status" = BankLedgerEntry."Statement Status"::Open THEN BEGIN
          BankLedgerEntry."Statement No." := '';
          BankLedgerEntry."Statement Line No." := 0;
        END ELSE BEGIN
          BankLedgerEntry."Statement No." := StatementNo;
          BankLedgerEntry."Statement Line No." := StatementLineNo;
        END;
        BankLedgerEntry.MODIFY;
      END;
    END;

    LOCAL PROCEDURE PostAdjustmentToGL@1020000(BankRecLine2@1020002 : Record 10121);
    VAR
      GenJnlLine@1020000 : Record 81;
      GLEntry@1020001 : Record 17;
    BEGIN
      WITH BankRecLine2 DO
        IF Amount <> 0 THEN BEGIN
          GenJnlLine.INIT;
          GenJnlLine."Posting Date" := "Posting Date";
          GenJnlLine."Document Date" := "Posting Date";
          GenJnlLine.Description := Description;
          GenJnlLine."Account Type" := "Account Type";
          GenJnlLine."Account No." := "Account No.";
          GenJnlLine."Bal. Account Type" := "Bal. Account Type";
          GenJnlLine."Bal. Account No." := "Bal. Account No.";
          GenJnlLine."Document Type" := "Document Type";
          GenJnlLine."Document No." := "Document No.";
          GenJnlLine."External Document No." := "External Document No.";
          GenJnlLine."Currency Code" := "Currency Code";
          GenJnlLine."Currency Factor" := "Currency Factor";
          GenJnlLine."Source Currency Code" := "Currency Code";
          GenJnlLine."Source Currency Amount" := Amount;
          IF "Currency Code" = '' THEN
            GenJnlLine."Currency Factor" := 1
          ELSE
            GenJnlLine."Currency Factor" := "Currency Factor";
          GenJnlLine.VALIDATE(Amount,Amount);
          GenJnlLine."Source Type" := "Account Type";
          GenJnlLine."Source No." := "Account No.";
          GenJnlLine."Source Code" := SourceCodeSetup."Bank Rec. Adjustment";
          GenJnlLine."Shortcut Dimension 1 Code" := "Shortcut Dimension 1 Code";
          GenJnlLine."Shortcut Dimension 2 Code" := "Shortcut Dimension 2 Code";
          GenJnlLine."Dimension Set ID" := "Dimension Set ID";

          GenJnlPostLine.RunWithCheck(GenJnlLine);

          GLEntry.FINDLAST;
          IF GLEntry."Bal. Account Type" = GLEntry."Bal. Account Type"::"Bank Account" THEN
            "Bank Ledger Entry No." := GLEntry."Entry No." - 1
          ELSE
            "Bank Ledger Entry No." := GLEntry."Entry No.";
          "Check Ledger Entry No." := 0;
          MODIFY;
          UpdateLedgers(BankRecLine2,SetStatus::Posted);
        END;
    END;

    BEGIN
    END.
  }
}

