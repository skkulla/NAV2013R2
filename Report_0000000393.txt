OBJECT Report 393 Suggest Vendor Payments
{
  OBJECT-PROPERTIES
  {
    Date=03/13/14;
    Time=12:00:00 PM;
    Version List=NAVW17.10.00.36281,NAVNA7.10.00.36281;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Suggest Vendor Payments;
               ESM=Proponer pagos a proveedores;
               FRC=Proposer paiements fournisseur;
               ENC=Suggest Vendor Payments];
    ProcessingOnly=Yes;
    OnPreReport=BEGIN
                  VendorLedgEntryTemp.DELETEALL;
                  ShowPostingDateWarning := FALSE;
                END;

    OnPostReport=BEGIN
                   COMMIT;
                   IF NOT VendorLedgEntryTemp.ISEMPTY THEN
                     IF CONFIRM(Text024) THEN
                       PAGE.RUNMODAL(0,VendorLedgEntryTemp);
                 END;

  }
  DATASET
  {
    { 3182;    ;DataItem;                    ;
               DataItemTable=Table23;
               DataItemTableView=SORTING(No.)
                                 WHERE(Blocked=FILTER(=' '));
               OnPreDataItem=BEGIN
                               IF LastDueDateToPayReq = 0D THEN
                                 ERROR(Text000);
                               IF (PostingDate = 0D) AND (NOT UseDueDateAsPostingDate) THEN
                                 ERROR(Text001);

                               BankPmtType := GenJnlLine2."Bank Payment Type";
                               BalAccType := GenJnlLine2."Bal. Account Type";
                               BalAccNo := GenJnlLine2."Bal. Account No.";
                               GenJnlLineInserted := FALSE;
                               SeveralCurrencies := FALSE;
                               MessageText := '';

                               IF ((BankPmtType = BankPmtType::" ") OR
                                   SummarizePerVend) AND
                                  (NextDocNo = '')
                               THEN
                                 ERROR(Text002);

                               IF ((BankPmtType = BankPmtType::"Manual Check") AND
                                   NOT SummarizePerVend AND
                                   NOT DocNoPerLine)
                               THEN
                                 ERROR(Text017,GenJnlLine2.FIELDCAPTION("Bank Payment Type"),SELECTSTR(BankPmtType + 1,Text023));

                               IF UsePaymentDisc AND (LastDueDateToPayReq < WORKDATE) THEN
                                 IF NOT CONFIRM(Text003,FALSE,WORKDATE) THEN
                                   ERROR(Text005);

                               Vend2.COPYFILTERS(Vendor);

                               OriginalAmtAvailable := AmountAvailable;
                               IF UsePriority THEN BEGIN
                                 SETCURRENTKEY(Priority);
                                 SETRANGE(Priority,1,2147483647);
                                 UsePriority := TRUE;
                               END;
                               Window.OPEN(Text006);

                               SelectedDim.SETRANGE("User ID",USERID);
                               SelectedDim.SETRANGE("Object Type",3);
                               SelectedDim.SETRANGE("Object ID",REPORT::"Suggest Vendor Payments");
                               SummarizePerDim := SelectedDim.FIND('-') AND SummarizePerVend;

                               NextEntryNo := 1;
                             END;

               OnAfterGetRecord=BEGIN
                                  CLEAR(VendorBalance);
                                  CALCFIELDS("Balance (LCY)");
                                  VendorBalance := "Balance (LCY)";

                                  IF StopPayments THEN
                                    CurrReport.BREAK;
                                  Window.UPDATE(1,"No.");
                                  IF VendorBalance > 0 THEN BEGIN
                                    GetVendLedgEntries(TRUE,FALSE);
                                    GetVendLedgEntries(FALSE,FALSE);
                                    CheckAmounts(FALSE);
                                    ClearNegative;
                                  END;
                                END;

               OnPostDataItem=BEGIN
                                IF UsePriority AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  SETCURRENTKEY(Priority);
                                  SETRANGE(Priority,0);
                                  IF FIND('-') THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      IF VendorBalance > 0 THEN BEGIN
                                        Window.UPDATE(1,"No.");
                                        GetVendLedgEntries(TRUE,FALSE);
                                        GetVendLedgEntries(FALSE,FALSE);
                                        CheckAmounts(FALSE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                END;

                                IF UsePaymentDisc AND NOT StopPayments THEN BEGIN
                                  RESET;
                                  COPYFILTERS(Vend2);
                                  Window2.OPEN(Text007);
                                  IF FIND('-') THEN
                                    REPEAT
                                      CLEAR(VendorBalance);
                                      CALCFIELDS("Balance (LCY)");
                                      VendorBalance := "Balance (LCY)";
                                      Window2.UPDATE(1,"No.");
                                      PayableVendLedgEntry.SETRANGE("Vendor No.","No.");
                                      IF VendorBalance > 0 THEN BEGIN
                                        GetVendLedgEntries(TRUE,TRUE);
                                        GetVendLedgEntries(FALSE,TRUE);
                                        CheckAmounts(TRUE);
                                        ClearNegative;
                                      END;
                                    UNTIL (NEXT = 0) OR StopPayments;
                                  Window2.CLOSE;
                                END ELSE
                                  IF FIND('-') THEN
                                    REPEAT
                                      ClearNegative;
                                    UNTIL NEXT = 0;

                                DimSetEntry.LOCKTABLE;
                                GenJnlLine.LOCKTABLE;
                                GenJnlTemplate.GET(GenJnlLine."Journal Template Name");
                                GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
                                GenJnlLine.SETRANGE("Journal Template Name",GenJnlLine."Journal Template Name");
                                GenJnlLine.SETRANGE("Journal Batch Name",GenJnlLine."Journal Batch Name");
                                IF GenJnlLine.FINDLAST THEN BEGIN
                                  FirstLineNo := GenJnlLine."Line No.";
                                  LastLineNo := GenJnlLine."Line No.";
                                  GenJnlLine.INIT;
                                END;

                                Window2.OPEN(Text008);

                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,1,2147483647);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.SETRANGE(Priority,0);
                                MakeGenJnlLines;
                                PayableVendLedgEntry.RESET;
                                PayableVendLedgEntry.DELETEALL;

                                Window2.CLOSE;
                                Window.CLOSE;
                                ShowMessage(MessageText);
                              END;

               ReqFilterFields=No.,Payment Method Code }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnInit=BEGIN
               SummarizePerDimTextEnable := TRUE;
             END;

      OnOpenPage=BEGIN
                   IF PostingDate = 0D THEN
                     PostingDate := WORKDATE;
                   ValidatePostingDate;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options];
                  GroupType=Group }

      { 4   ;2   ;Group     ;
                  CaptionML=[ENU=Find Payments;
                             ESM=Buscar pagos;
                             FRC=Rechercher les paiements;
                             ENC=Find Payments];
                  GroupType=Group }

      { 1   ;3   ;Field     ;
                  Name=LastPaymentDate;
                  CaptionML=[ENU=Last Payment Date;
                             ESM=élt. fecha pago;
                             FRC=Date dernier paiement;
                             ENC=Last Payment Date];
                  SourceExpr=LastDueDateToPayReq }

      { 2   ;3   ;Field     ;
                  Name=FindPaymentDiscounts;
                  CaptionML=[ENU=Find Payment Discounts;
                             ESM=Buscar dtos. P.P.;
                             FRC=Trouver escompte de paiement;
                             ENC=Find Payment Discounts];
                  SourceExpr=UsePaymentDisc;
                  MultiLine=Yes;
                  OnValidate=BEGIN
                               IF UsePaymentDisc AND UseDueDateAsPostingDate THEN
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 3   ;3   ;Field     ;
                  Name=UseVendorPriority;
                  CaptionML=[ENU=Use Vendor Priority;
                             ESM=Utilizar prioridad prov.;
                             FRC=Utiliser priorit fournisseur;
                             ENC=Use Vendor Priority];
                  SourceExpr=UsePriority;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text011);
                             END;
                              }

      { 11  ;3   ;Field     ;
                  Name=Available Amount (LCY);
                  CaptionML=[ENU=Available Amount ($);
                             ESM=Importe disponible ($);
                             FRC=Montant disponible $;
                             ENC=Available Amount ($)];
                  SourceExpr=AmountAvailable;
                  OnValidate=BEGIN
                               IF AmountAvailable <> 0 THEN
                                 UsePriority := TRUE;
                             END;
                              }

      { 7   ;2   ;Group     ;
                  CaptionML=[ENU=Summarize Results;
                             ESM=Resumir resultados;
                             FRC=Rsumer les rsultats;
                             ENC=Summarize Results];
                  GroupType=Group }

      { 6   ;3   ;Field     ;
                  Name=SummarizePerVendor;
                  CaptionML=[ENU=Summarize per Vendor;
                             ESM=Una l¡nea por proveedor;
                             FRC=Sommaire par fournisseur;
                             ENC=Summarize per Vendor];
                  SourceExpr=SummarizePerVend;
                  OnValidate=BEGIN
                               IF SummarizePerVend AND UseDueDateAsPostingDate THEN
                                 ERROR(PmtDiscUnavailableErr);
                             END;
                              }

      { 17  ;3   ;Field     ;
                  Name=SummarizePerDimText;
                  CaptionML=[ENU=By Dimension;
                             ESM=Por dimensi¢n;
                             FRC=Par dimension;
                             ENC=By Dimension];
                  SourceExpr=SummarizePerDimText;
                  Enabled=SummarizePerDimTextEnable;
                  Editable=FALSE;
                  OnAssistEdit=VAR
                                 DimSelectionBuf@1001 : Record 368;
                               BEGIN
                                 DimSelectionBuf.SetDimSelectionMultiple(3,REPORT::"Suggest Vendor Payments",SummarizePerDimText);
                               END;
                                }

      { 8   ;2   ;Group     ;
                  CaptionML=[ENU=Fill in Journal Lines;
                             ESM=Rellenar l¡neas de diario;
                             FRC=Renseigner les lignes journal;
                             ENC=Fill in Journal Lines];
                  GroupType=Group }

      { 5   ;3   ;Field     ;
                  Name=PostingDate;
                  CaptionML=[ENU=Posting Date;
                             ESM=Fecha registro;
                             FRC=Date de report;
                             ENC=Posting Date];
                  SourceExpr=PostingDate;
                  Editable=UseDueDateAsPostingDate = FALSE;
                  OnValidate=BEGIN
                               ValidatePostingDate;
                             END;
                              }

      { 16  ;3   ;Field     ;
                  Name=UseDueDateAsPostingDate;
                  CaptionML=[ENU=Calculate Posting Date from Applies-to-Doc. Due Date;
                             ESM=Calcular fecha de registro a partir de fecha de vencimiento de documento de aplicaci¢n;
                             FRC=Calculer la date de report  partir de la date d'chance du doc. d'affectation;
                             ENC=Calculate Posting Date from Applies-to-Doc. Due Date];
                  SourceExpr=UseDueDateAsPostingDate;
                  OnValidate=BEGIN
                               IF UseDueDateAsPostingDate AND (SummarizePerVend OR UsePaymentDisc) THEN
                                 ERROR(PmtDiscUnavailableErr);
                               IF NOT UseDueDateAsPostingDate THEN
                                 CLEAR(DueDateOffset);
                             END;
                              }

      { 15  ;3   ;Field     ;
                  Name=DueDateOffset;
                  CaptionML=[ENU=Applies-to-Doc. Due Date Offset;
                             ESM=Desfase fecha de vencimiento de documento de aplicaci¢n;
                             FRC=Dcalage de la date d'chance du doc. d'affectation;
                             ENC=Applies-to-Doc. Due Date Offset];
                  SourceExpr=DueDateOffset;
                  Enabled=UseDueDateAsPostingDate;
                  Editable=UseDueDateAsPostingDate }

      { 9   ;3   ;Field     ;
                  Name=StartingDocumentNo;
                  CaptionML=[ENU=Starting Document No.;
                             ESM=N§ documento incial;
                             FRC=Nø de document initial;
                             ENC=Starting Document No.];
                  SourceExpr=NextDocNo;
                  OnValidate=BEGIN
                               IF NextDocNo <> '' THEN
                                 IF INCSTR(NextDocNo) = '' THEN
                                   ERROR(Text012);
                             END;
                              }

      { 18  ;3   ;Field     ;
                  Name=NewDocNoPerLine;
                  CaptionML=[ENU=New Doc. No. per Line;
                             ESM=Nuevo n§ doc. por l¡nea;
                             FRC=Nouveau n§ document par ligne;
                             ENC=New Doc. No. per Line];
                  SourceExpr=DocNoPerLine;
                  OnValidate=BEGIN
                               IF NOT UsePriority AND (AmountAvailable <> 0) THEN
                                 ERROR(Text013);
                             END;
                              }

      { 10  ;3   ;Field     ;
                  Name=BalAccountType;
                  CaptionML=[ENU=Bal. Account Type;
                             ESM=Tipo contrapartida;
                             FRC=Type compte contrle;
                             ENC=Bal. Account Type];
                  OptionCaptionML=[ENU=G/L Account,,,Bank Account;
                                   ESM=Cuenta,,,Banco;
                                   FRC=Compte GL,,,Compte bancaire;
                                   ENC=G/L Account,,,Bank Account];
                  SourceExpr=GenJnlLine2."Bal. Account Type";
                  OnValidate=BEGIN
                               GenJnlLine2."Bal. Account No." := '';
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=BalAccountNo;
                  CaptionML=[ENU=Bal. Account No.;
                             ESM=Cta. contrapartida;
                             FRC=Nø compte contrle;
                             ENC=Bal. Account No.];
                  SourceExpr=GenJnlLine2."Bal. Account No.";
                  OnValidate=BEGIN
                               IF GenJnlLine2."Bal. Account No." <> '' THEN
                                 CASE GenJnlLine2."Bal. Account Type" OF
                                   GenJnlLine2."Bal. Account Type"::"G/L Account":
                                     GLAcc.GET(GenJnlLine2."Bal. Account No.");
                                   GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                     ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                                   GenJnlLine2."Bal. Account Type"::"Bank Account":
                                     BankAcc.GET(GenJnlLine2."Bal. Account No.");
                                 END;
                             END;

                  OnLookup=BEGIN
                             CASE GenJnlLine2."Bal. Account Type" OF
                               GenJnlLine2."Bal. Account Type"::"G/L Account":
                                 IF PAGE.RUNMODAL(0,GLAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := GLAcc."No.";
                               GenJnlLine2."Bal. Account Type"::Customer,GenJnlLine2."Bal. Account Type"::Vendor:
                                 ERROR(Text009,GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                               GenJnlLine2."Bal. Account Type"::"Bank Account":
                                 IF PAGE.RUNMODAL(0,BankAcc) = ACTION::LookupOK THEN
                                   GenJnlLine2."Bal. Account No." := BankAcc."No.";
                             END;
                           END;
                            }

      { 14  ;3   ;Field     ;
                  CaptionML=[ENU=Bank Payment Type;
                             ESM=Tipo pago por banco;
                             FRC=Type de paiement bancaire;
                             ENC=Bank Payment Type];
                  OptionCaptionML=[ENU=" ,Computer Check,Manual Check,Electronic Payment";
                                   ESM=" ,Cheque autom tico,Cheque manual,Pago electr¢nico";
                                   FRC=" ,Chque informatis,Chque manuel,Paiement lectronique";
                                   ENC=" ,Computer Cheque,Manual Cheque,Electronic Payment"];
                  SourceExpr=GenJnlLine2."Bank Payment Type";
                  OnValidate=BEGIN
                               IF (GenJnlLine2."Bal. Account Type" <> GenJnlLine2."Bal. Account Type"::"Bank Account") AND
                                  (GenJnlLine2."Bank Payment Type" > 0)
                               THEN
                                 ERROR(
                                   Text010,
                                   GenJnlLine2.FIELDCAPTION("Bank Payment Type"),
                                   GenJnlLine2.FIELDCAPTION("Bal. Account Type"));
                             END;
                              }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      Text000@1000 : TextConst 'ENU=In the Last Payment Date field, specify the last possible date that payments must be made.;ESM=En el campo élt. fecha pago, especifique la £ltima fecha posible en la que se deben realizar los pagos.;FRC=Dans le champ Dernire date chance, spcifiez la date  laquelle les paiements doivent tre effectus au plus tard.;ENC=In the Last Payment Date field, specify the last possible date that payments must be made.';
      Text001@1001 : TextConst 'ENU=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.;ESM=En el campo Fecha registro, especifique la fecha que se usar  como fecha de registro para los movimientos del diario.;FRC=Dans le champ Date de report, spcifiez la date qui sera utilise comme date de report pour les critures du journal.;ENC=In the Posting Date field, specify the date that will be used as the posting date for the journal entries.';
      Text002@1002 : TextConst 'ENU=In the Starting Document No. field, specify the first document number to be used.;ESM=En el campo N§ documento inicial, especifique el primer n£mero de documento que se debe usar.;FRC=Dans le champ Nø document dbut, spcifiez le premier numro de document  utiliser.;ENC=In the Starting Document No. field, specify the first document number to be used.';
      Text003@1003 : TextConst '@@@=%1 is a date;ENU=The payment date is earlier than %1.\\Do you still want to run the batch job?;ESM=La fecha de pago es anterior a %1\.\¨Desea ejecutar el trabajo por lotes?;FRC=La date de paiement est antrieure  %1.\\Voulez-vous toujours excuter le traitement en lot?;ENC=The payment date is earlier than %1.\\Do you still want to run the batch job?';
      Text005@1005 : TextConst 'ENU=The batch job was interrupted.;ESM=El proceso se ha interrumpido.;FRC=Le traitement en lot a t interrompu.;ENC=The batch job was interrupted.';
      Text006@1006 : TextConst 'ENU=Processing vendors                       #1##########;ESM=Procesando proveedores                   #1##########;FRC=Traitement des fournisseurs                        #1##########;ENC=Processing vendors                       #1##########';
      Text007@1007 : TextConst 'ENU=Processing vendors for payment discounts #1##########;ESM=Procesando proveedores para dto. P.P.    #1##########;FRC=Traitement des fournisseurs pour escompte paiement #1##########;ENC=Processing vendors for payment discounts #1##########';
      Text008@1008 : TextConst 'ENU=Inserting payment journal lines          #1##########;ESM=Insertando l¡ns. diario pagos            #1##########;FRC=Insrer lignes journal paiement                    #1##########;ENC=Inserting payment journal lines          #1##########';
      Text009@1009 : TextConst 'ENU=%1 must be G/L Account or Bank Account.;ESM=%1 deber¡a ser una cuenta o banco.;FRC=%1 doit tre un compte GL ou un compte bancaire.;ENC=%1 must be G/L Account or Bank Account.';
      Text010@1010 : TextConst 'ENU=%1 must be filled only when %2 is Bank Account.;ESM=S¢lo se debe completar %1 si %2 es un banco.;FRC=%1 doit tre complt seulement lorsque %2 est un compte bancaire.;ENC=%1 must be filled only when %2 is Bank Account.';
      Text011@1011 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.;ESM=Se debe activar utilizar prioridad prov. si el valor en el campo importe disponible no es igual a cero.;FRC=Priorit par fournisseur doit tre active lorsque la valeur dans le champ montant disponible n''est pas 0.;ENC=Use Vendor Priority must be activated when the value in the Amount Available field is not 0.';
      Text012@1012 : TextConst 'ENU=Starting Document No. must contain a number.;ESM=N§ documento incial debe contener un n£mero.;FRC=Nø document de dpart doit contenir un numro.;ENC=Starting Document No. must contain a number.';
      Text013@1013 : TextConst 'ENU=Use Vendor Priority must be activated when the value in the Amount Available Amount ($) field is not 0.;ESM=Se debe activar Utilizar prioridad prov. si el valor en el campo Importe disponible ($) es distinto de cero;FRC=Priorit par fournisseur doit tre active lorsque la valeur dans le champ montant disponible montant($) n''est pas 0.;ENC=Use Vendor Priority must be activated when the value in the Amount Available Amount ($) field is not 0.';
      Text014@1014 : TextConst 'ENU=Payment to vendor %1;ESM=Pago a proveedor %1;FRC=Paiement au fournisseur %1;ENC=Payment to vendor %1';
      Text015@1015 : TextConst 'ENU=Payment of %1 %2;ESM=Pago de %1 %2;FRC=Paiement de %1 %2;ENC=Payment of %1 %2';
      Text016@1016 : TextConst 'ENU=" is already applied to %1 %2 for vendor %3.";ESM=" ya se ha liquidado a %1 %2 para el proveedor %3.";FRC=" est dj appliqu  %1 %2 pour le fournisseur %3.";ENC=" is already applied to %1 %2 for vendor %3."';
      Text017@1017 : TextConst '@@@="If Bank Payment Type = Computer Check and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ENU="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line.";ESM="Si %1 = %2 y no ha seleccionado el campo Resumir por proveedor,\ debe seleccionar Nuevo n§ doc. por l¡nea.";FRC="Si %1 = %2 et si vous n''avez pas slectionn le champ Totaliser par fournisseur,\vous devez slectionner Nouveau nø document par ligne.";ENC="If %1 = %2 and you have not selected the Summarize per Vendor field,\ then you must select the New Doc. No. per Line."';
      Text020@1020 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR.\ However, there are other open vendor ledger entries in currencies other than EUR.;ENU=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\;ESM=Solo ha creado l¡neas de pago de proveedor sugeridas para el %1 %2.\ Hay, sin embargo, otros movimientos de proveedor abiertos en divisas diferentes que %2.\\;FRC=Vous n''avez cr que les lignes de paiement fournisseur suggres pour  %1 %2.\Il existe toutefois d''autres critures fournisseur ouvertes dans d''autres devises que %2.\\;ENC=You have only created suggested vendor payment lines for the %1 %2.\ However, there are other open vendor ledger entries in currencies other than %2.\\';
      Text021@1021 : TextConst '@@@=You have only created suggested vendor payment lines for the Currency Code EUR\ There are no other open vendor ledger entries in other currencies.\\;ENU=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\;ESM=Solo ha creado l¡neas de pago de proveedor sugeridas para el %1 %2.\ No hay otros movimientos de proveedor abiertos en otras divisas.\\;FRC=Vous n''avez cr que les lignes de paiement fournisseur suggres pour  %1 %2.\Il n''existe aucune autre criture fournisseur ouverte dans d''autres devises.\\;ENC=You have only created suggested vendor payment lines for the %1 %2.\ There are no other open vendor ledger entries in other currencies.\\';
      Text022@1022 : TextConst 'ENU=You have created suggested vendor payment lines for all currencies.\\;ESM=Ha creado l¡neas pago proveedor sugeridas para todas las divisas.\\;FRC=Vous avez cr des lignes de paiement fournisseur suggres pour toutes les devises.\\;ENC=You have created suggested vendor payment lines for all currencies.\\';
      Vend2@1023 : Record 23;
      GenJnlTemplate@1024 : Record 80;
      GenJnlBatch@1025 : Record 232;
      GenJnlLine@1026 : Record 81;
      DimSetEntry@1027 : Record 480;
      GenJnlLine2@1028 : Record 81;
      VendLedgEntry@1029 : Record 25;
      GLAcc@1030 : Record 15;
      BankAcc@1031 : Record 270;
      PayableVendLedgEntry@1032 : TEMPORARY Record 317;
      TempPaymentBuffer@1033 : TEMPORARY Record 372;
      OldTempPaymentBuffer@1034 : TEMPORARY Record 372;
      SelectedDim@1035 : Record 369;
      VendorLedgEntryTemp@1102601000 : TEMPORARY Record 25;
      NoSeriesMgt@1036 : Codeunit 396;
      VendEntryEdit@1037 : Codeunit 113;
      DimMgt@1038 : Codeunit 408;
      DimBufMgt@1018 : Codeunit 411;
      Window@1039 : Dialog;
      Window2@1004 : Dialog;
      UsePaymentDisc@1040 : Boolean;
      PostingDate@1041 : Date;
      LastDueDateToPayReq@1042 : Date;
      NextDocNo@1043 : Code[20];
      AmountAvailable@1044 : Decimal;
      OriginalAmtAvailable@1045 : Decimal;
      UsePriority@1046 : Boolean;
      SummarizePerVend@1047 : Boolean;
      SummarizePerDim@1048 : Boolean;
      SummarizePerDimText@1049 : Text[250];
      FirstLineNo@1050 : Integer;
      LastLineNo@1051 : Integer;
      NextEntryNo@1052 : Integer;
      DueDateOffset@1118 : DateFormula;
      UseDueDateAsPostingDate@1066 : Boolean;
      StopPayments@1053 : Boolean;
      DocNoPerLine@1054 : Boolean;
      BankPmtType@1055 : ' ,Computer Check,Manual Check';
      BalAccType@1056 : 'G/L Account,Customer,Vendor,Bank Account';
      BalAccNo@1057 : Code[20];
      MessageText@1058 : Text;
      GenJnlLineInserted@1059 : Boolean;
      SeveralCurrencies@1060 : Boolean;
      Text023@1061 : TextConst 'ENU=" ,Computer Check,Manual Check";ESM=" ,Cheque autom tico,Cheque manual";FRC=" ,Informatique,Manuel";ENC=" ,Computer Cheque,Manual Cheque"';
      Text024@1102601001 : TextConst 'ENU=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?;ESM=Existen uno o m s movimientos para los que se realizaron sugerencias de pago porque las fechas de registro de dichos movimientos son posteriores a la fecha de registro solicitada. ¨Desea ver los movimientos?;FRC=Il existe une ou plusieurs critures pour lesquelles aucune suggestion de paiement n''a t faite car les dates de report de ces critures sont postrieures  celle demande. Voulez-vous visualiser ces critures?;ENC=There are one or more entries for which no payment suggestions have been made because the posting dates of the entries are later than the requested posting date. Do you want to see the entries?';
      SummarizePerDimTextEnable@19039578 : Boolean INDATASET;
      Text025@1063 : TextConst 'ENU=The %1 with the number %2 has a %3 with the number %4.;ESM=El %1 con el n£mero %2 tiene un %3 con el n£mero %4.;FRC=Le %1 avec le numro %2 a un %3 avec le numro %4.;ENC=The %1 with the number %2 has a %3 with the number %4.';
      ShowPostingDateWarning@1119 : Boolean;
      VendorBalance@1065 : Decimal;
      ReplacePostingDateMsg@1064 : TextConst 'ENU=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.;ESM=Para uno o m s movimientos, la fecha de registro solicitada es anterior a la fecha de trabajo.\\Estas fechas de registro usar n la fecha de trabajo.;FRC=Pour une ou plusieurs critures, la date de report demande est antrieure  la date de travail.\\Ces dates de report utiliseront la date de travail.;ENC=For one or more entries, the requested posting date is before the work date.\\These posting dates will use the work date.';
      PmtDiscUnavailableErr@1067 : TextConst 'ENU=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.;ESM=No se puede usar Buscar dtos. P.P. o Una l¡nea por proveedor con Calcular fecha de registro a partir de fecha de vencimiento de documento de aplicaci¢n porque es posible que la fecha de registro resultante no coincida con la fecha de descuento por pronto pago.;FRC=Vous ne pouvez pas utiliser Trouver escompte de paiement ou Sommaire par fournisseur avec Calculer la date de report  partir de la date d''chance du doc. d''affectation, car la date de report rsultante pourrait ne pas correspondre  la date d''escompte de paiement.;ENC=You cannot use Find Payment Discounts or Summarize per Vendor together with Calculate Posting Date from Applies-to-Doc. Due Date, because the resulting posting date might not match the payment discount date.';

    PROCEDURE SetGenJnlLine@1(NewGenJnlLine@1000 : Record 81);
    BEGIN
      GenJnlLine := NewGenJnlLine;
    END;

    LOCAL PROCEDURE ValidatePostingDate@7();
    BEGIN
      GenJnlBatch.GET(GenJnlLine."Journal Template Name",GenJnlLine."Journal Batch Name");
      IF GenJnlBatch."No. Series" = '' THEN
        NextDocNo := ''
      ELSE BEGIN
        NextDocNo := NoSeriesMgt.GetNextNo(GenJnlBatch."No. Series",PostingDate,FALSE);
        CLEAR(NoSeriesMgt);
      END;
    END;

    PROCEDURE InitializeRequest@3(LastPmtDate@1000 : Date;FindPmtDisc@1001 : Boolean;NewAvailableAmount@1002 : Decimal;NewPostingDate@1003 : Date;NewStartDocNo@1004 : Code[20];NewSummarizePerVend@1005 : Boolean;BalAccType@1006 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1007 : Code[20];BankPmtType@1008 : ' ,Computer Check,Manual Check');
    BEGIN
      LastDueDateToPayReq := LastPmtDate;
      UsePaymentDisc := FindPmtDisc;
      AmountAvailable := NewAvailableAmount;
      PostingDate := NewPostingDate;
      NextDocNo := NewStartDocNo;
      SummarizePerVend := NewSummarizePerVend;
      GenJnlLine2."Bal. Account Type" := BalAccType;
      GenJnlLine2."Bal. Account No." := BalAccNo;
      GenJnlLine2."Bank Payment Type" := BankPmtType;
    END;

    PROCEDURE GetVendLedgEntries@13(Positive@1000 : Boolean;Future@1001 : Boolean);
    BEGIN
      VendLedgEntry.RESET;
      VendLedgEntry.SETCURRENTKEY("Vendor No.",Open,Positive,"Due Date");
      VendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      VendLedgEntry.SETRANGE(Open,TRUE);
      VendLedgEntry.SETRANGE(Positive,Positive);
      VendLedgEntry.SETRANGE("Applies-to ID",'');
      VendLedgEntry.SETFILTER("Document Type",'<>%1',VendLedgEntry."Document Type"::Payment);
      IF Future THEN BEGIN
        VendLedgEntry.SETRANGE("Due Date",LastDueDateToPayReq + 1,12319999D);
        VendLedgEntry.SETRANGE("Pmt. Discount Date",PostingDate,LastDueDateToPayReq);
        VendLedgEntry.SETFILTER("Remaining Pmt. Disc. Possible",'<>0');
      END ELSE
        VendLedgEntry.SETRANGE("Due Date",0D,LastDueDateToPayReq);
      VendLedgEntry.SETRANGE("On Hold",'');
      IF VendLedgEntry.FIND('-') THEN
        REPEAT
          SaveAmount;
          IF VendLedgEntry."Accepted Pmt. Disc. Tolerance" OR
             (VendLedgEntry."Accepted Payment Tolerance" <> 0)
          THEN BEGIN
            VendLedgEntry."Accepted Pmt. Disc. Tolerance" := FALSE;
            VendLedgEntry."Accepted Payment Tolerance" := 0;
            VendEntryEdit.RUN(VendLedgEntry);
          END;
        UNTIL VendLedgEntry.NEXT = 0;
    END;

    LOCAL PROCEDURE SaveAmount@6();
    VAR
      PaymentToleranceMgt@1000 : Codeunit 426;
    BEGIN
      WITH GenJnlLine DO BEGIN
        INIT;
        SetPostingDate(GenJnlLine,VendLedgEntry."Due Date",PostingDate);
        "Document Type" := "Document Type"::Payment;
        "Account Type" := "Account Type"::Vendor;
        Vend2.GET(VendLedgEntry."Vendor No.");
        Vend2.CheckBlockedVendOnJnls(Vend2,"Document Type",FALSE);
        Description := Vend2.Name;
        "Posting Group" := Vend2."Vendor Posting Group";
        "Salespers./Purch. Code" := Vend2."Purchaser Code";
        "Payment Terms Code" := Vend2."Payment Terms Code";
        VALIDATE("Bill-to/Pay-to No.","Account No.");
        VALIDATE("Sell-to/Buy-from No.","Account No.");
        "Gen. Posting Type" := 0;
        "Gen. Bus. Posting Group" := '';
        "Gen. Prod. Posting Group" := '';
        "VAT Bus. Posting Group" := '';
        "VAT Prod. Posting Group" := '';
        VALIDATE("Currency Code",VendLedgEntry."Currency Code");
        VALIDATE("Payment Terms Code");
        VendLedgEntry.CALCFIELDS("Remaining Amount");
        IF PaymentToleranceMgt.CheckCalcPmtDiscGenJnlVend(GenJnlLine,VendLedgEntry,0,FALSE) THEN
          Amount := -(VendLedgEntry."Remaining Amount" - VendLedgEntry."Remaining Pmt. Disc. Possible")
        ELSE
          Amount := -VendLedgEntry."Remaining Amount";
        VALIDATE(Amount);
      END;

      IF UsePriority THEN
        PayableVendLedgEntry.Priority := Vendor.Priority
      ELSE
        PayableVendLedgEntry.Priority := 0;
      PayableVendLedgEntry."Vendor No." := VendLedgEntry."Vendor No.";
      PayableVendLedgEntry."Entry No." := NextEntryNo;
      PayableVendLedgEntry."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
      PayableVendLedgEntry.Amount := GenJnlLine.Amount;
      PayableVendLedgEntry."Amount (LCY)" := GenJnlLine."Amount (LCY)";
      PayableVendLedgEntry.Positive := (PayableVendLedgEntry.Amount > 0);
      PayableVendLedgEntry.Future := (VendLedgEntry."Due Date" > LastDueDateToPayReq);
      PayableVendLedgEntry."Currency Code" := VendLedgEntry."Currency Code";
      PayableVendLedgEntry.INSERT;
      NextEntryNo := NextEntryNo + 1;
    END;

    PROCEDURE CheckAmounts@10(Future@1000 : Boolean);
    VAR
      CurrencyBalance@1001 : Decimal;
      PrevCurrency@1002 : Code[10];
    BEGIN
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");
      PayableVendLedgEntry.SETRANGE(Future,Future);

      IF PayableVendLedgEntry.FIND('-') THEN BEGIN
        REPEAT
          IF PayableVendLedgEntry."Currency Code" <> PrevCurrency THEN BEGIN
            IF CurrencyBalance > 0 THEN
              AmountAvailable := AmountAvailable - CurrencyBalance;
            CurrencyBalance := 0;
            PrevCurrency := PayableVendLedgEntry."Currency Code";
          END;
          IF (OriginalAmtAvailable = 0) OR
             (AmountAvailable >= CurrencyBalance + PayableVendLedgEntry."Amount (LCY)")
          THEN
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          ELSE
            PayableVendLedgEntry.DELETE;
        UNTIL PayableVendLedgEntry.NEXT = 0;
        IF OriginalAmtAvailable > 0 THEN
          AmountAvailable := AmountAvailable - CurrencyBalance;
        IF (OriginalAmtAvailable > 0) AND (AmountAvailable <= 0) THEN
          StopPayments := TRUE;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE MakeGenJnlLines@2();
    VAR
      GenJnlLine1@1010 : Record 81;
      DimBuf@1002 : Record 360;
      Vendor@1001 : Record 23;
      RemainingAmtAvailable@1008 : Decimal;
    BEGIN
      TempPaymentBuffer.RESET;
      TempPaymentBuffer.DELETEALL;

      IF BalAccType = BalAccType::"Bank Account" THEN BEGIN
        CheckCurrencies(BalAccType,BalAccNo,PayableVendLedgEntry);
        SetBankAccCurrencyFilter(BalAccType,BalAccNo,PayableVendLedgEntry);
      END;

      IF OriginalAmtAvailable <> 0 THEN BEGIN
        RemainingAmtAvailable := OriginalAmtAvailable;
        RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
      END;
      IF PayableVendLedgEntry.FIND('-') THEN
        REPEAT
          PayableVendLedgEntry.SETRANGE("Vendor No.",PayableVendLedgEntry."Vendor No.");
          PayableVendLedgEntry.FIND('-');
          REPEAT
            VendLedgEntry.GET(PayableVendLedgEntry."Vendor Ledg. Entry No.");
            SetPostingDate(GenJnlLine1,VendLedgEntry."Due Date",PostingDate);
            IF VendLedgEntry."Posting Date" <= GenJnlLine1."Posting Date" THEN BEGIN
              TempPaymentBuffer."Vendor No." := VendLedgEntry."Vendor No.";
              TempPaymentBuffer."Currency Code" := VendLedgEntry."Currency Code";
              TempPaymentBuffer."Payment Method Code" := VendLedgEntry."Payment Method Code";
              TempPaymentBuffer."Creditor No." := VendLedgEntry."Creditor No.";
              TempPaymentBuffer."Payment Reference" := VendLedgEntry."Payment Reference";
              TempPaymentBuffer."Exported to Payment File" := VendLedgEntry."Exported to Payment File";
              TempPaymentBuffer."Applies-to Ext. Doc. No." := VendLedgEntry."External Document No.";

              SetTempPaymentBufferDims(DimBuf);

              VendLedgEntry.CALCFIELDS("Remaining Amount");

              IF SummarizePerVend THEN BEGIN
                TempPaymentBuffer."Vendor Ledg. Entry No." := 0;
                IF TempPaymentBuffer.FIND THEN BEGIN
                  TempPaymentBuffer.Amount := TempPaymentBuffer.Amount + PayableVendLedgEntry.Amount;
                  TempPaymentBuffer.MODIFY;
                END ELSE BEGIN
                  TempPaymentBuffer."Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                  Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                  TempPaymentBuffer.INSERT;
                END;
                VendLedgEntry."Applies-to ID" := TempPaymentBuffer."Document No.";
              END ELSE BEGIN
                CheckIfEntryAlreadyApplied(GenJnlLine,VendLedgEntry);

                TempPaymentBuffer."Vendor Ledg. Entry Doc. Type" := VendLedgEntry."Document Type";
                TempPaymentBuffer."Vendor Ledg. Entry Doc. No." := VendLedgEntry."Document No.";
                TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code";
                TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code";
                TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
                TempPaymentBuffer."Vendor Ledg. Entry No." := VendLedgEntry."Entry No.";
                TempPaymentBuffer.Amount := PayableVendLedgEntry.Amount;
                Window2.UPDATE(1,VendLedgEntry."Vendor No.");
                TempPaymentBuffer.INSERT;
              END;

              VendLedgEntry."Amount to Apply" := VendLedgEntry."Remaining Amount";
              VendEntryEdit.RUN(VendLedgEntry);
            END ELSE BEGIN
              VendorLedgEntryTemp := VendLedgEntry;
              VendorLedgEntryTemp.INSERT;
            END;

            PayableVendLedgEntry.DELETE;
            IF OriginalAmtAvailable <> 0 THEN BEGIN
              RemainingAmtAvailable := RemainingAmtAvailable - PayableVendLedgEntry."Amount (LCY)";
              RemovePaymentsAboveLimit(PayableVendLedgEntry,RemainingAmtAvailable);
            END;

          UNTIL NOT PayableVendLedgEntry.FINDSET;
          PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Vendor No.");
        UNTIL NOT PayableVendLedgEntry.FIND('-');

      CLEAR(OldTempPaymentBuffer);
      TempPaymentBuffer.SETCURRENTKEY("Document No.");
      TempPaymentBuffer.SETFILTER(
        "Vendor Ledg. Entry Doc. Type",'<>%1&<>%2',TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Refund,
        TempPaymentBuffer."Vendor Ledg. Entry Doc. Type"::Payment);
      IF TempPaymentBuffer.FIND('-') THEN
        REPEAT
          WITH GenJnlLine DO BEGIN
            INIT;
            Window2.UPDATE(1,TempPaymentBuffer."Vendor No.");
            LastLineNo := LastLineNo + 10000;
            "Line No." := LastLineNo;
            "Document Type" := "Document Type"::Payment;
            "Posting No. Series" := GenJnlBatch."Posting No. Series";
            IF SummarizePerVend THEN
              "Document No." := TempPaymentBuffer."Document No."
            ELSE
              IF DocNoPerLine THEN BEGIN
                IF TempPaymentBuffer.Amount < 0 THEN
                  "Document Type" := "Document Type"::Refund;

                "Document No." := NextDocNo;
                NextDocNo := INCSTR(NextDocNo);
              END ELSE
                IF (TempPaymentBuffer."Vendor No." = OldTempPaymentBuffer."Vendor No.") AND
                   (TempPaymentBuffer."Currency Code" = OldTempPaymentBuffer."Currency Code")
                THEN
                  "Document No." := OldTempPaymentBuffer."Document No."
                ELSE BEGIN
                  "Document No." := NextDocNo;
                  NextDocNo := INCSTR(NextDocNo);
                  OldTempPaymentBuffer := TempPaymentBuffer;
                  OldTempPaymentBuffer."Document No." := "Document No.";
                END;
            "Account Type" := "Account Type"::Vendor;
            SetHideValidation(TRUE);
            ShowPostingDateWarning := ShowPostingDateWarning OR
              SetPostingDate(GenJnlLine,GetApplDueDate(TempPaymentBuffer."Vendor Ledg. Entry No."),PostingDate);
            VALIDATE("Account No.",TempPaymentBuffer."Vendor No.");
            Vendor.GET(TempPaymentBuffer."Vendor No.");
            IF (Vendor."Pay-to Vendor No." <> '') AND (Vendor."Pay-to Vendor No." <> "Account No.") THEN
              MESSAGE(Text025,Vendor.TABLECAPTION,Vendor."No.",Vendor.FIELDCAPTION("Pay-to Vendor No."),
                Vendor."Pay-to Vendor No.");
            "Bal. Account Type" := BalAccType;
            VALIDATE("Bal. Account No.",BalAccNo);
            VALIDATE("Currency Code",TempPaymentBuffer."Currency Code");
            "Bank Payment Type" := BankPmtType;
            IF SummarizePerVend THEN BEGIN
              "Applies-to ID" := "Document No.";
              Description := STRSUBSTNO(Text014,TempPaymentBuffer."Vendor No.");
            END ELSE
              Description :=
                STRSUBSTNO(
                  Text015,
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. Type",
                  TempPaymentBuffer."Vendor Ledg. Entry Doc. No.");
            "Source Line No." := TempPaymentBuffer."Vendor Ledg. Entry No.";
            "Shortcut Dimension 1 Code" := TempPaymentBuffer."Global Dimension 1 Code";
            "Shortcut Dimension 2 Code" := TempPaymentBuffer."Global Dimension 2 Code";
            "Dimension Set ID" := TempPaymentBuffer."Dimension Set ID";
            "Source Code" := GenJnlTemplate."Source Code";
            "Reason Code" := GenJnlBatch."Reason Code";
            VALIDATE(Amount,TempPaymentBuffer.Amount);
            "Applies-to Doc. Type" := TempPaymentBuffer."Vendor Ledg. Entry Doc. Type";
            "Applies-to Doc. No." := TempPaymentBuffer."Vendor Ledg. Entry Doc. No.";
            "Payment Method Code" := TempPaymentBuffer."Payment Method Code";
            "Creditor No." := TempPaymentBuffer."Creditor No.";
            "Payment Reference" := TempPaymentBuffer."Payment Reference";
            "Exported to Payment File" := TempPaymentBuffer."Exported to Payment File";
            "Applies-to Ext. Doc. No." := TempPaymentBuffer."Applies-to Ext. Doc. No.";

            UpdateDimensions(GenJnlLine);
            INSERT;
            GenJnlLineInserted := TRUE;
          END;
        UNTIL TempPaymentBuffer.NEXT = 0;
    END;

    LOCAL PROCEDURE UpdateDimensions@17(VAR GenJnlLine@1005 : Record 81);
    VAR
      DimBuf@1002 : Record 360;
      TempDimSetEntry@1001 : TEMPORARY Record 480;
      TempDimSetEntry2@1000 : TEMPORARY Record 480;
      DimVal@1004 : Record 349;
      NewDimensionID@1003 : Integer;
      DimSetIDArr@1006 : ARRAY [10] OF Integer;
    BEGIN
      WITH GenJnlLine DO BEGIN
        NewDimensionID := "Dimension Set ID";
        IF SummarizePerVend THEN BEGIN
          DimBuf.RESET;
          DimBuf.DELETEALL;
          DimBufMgt.GetDimensions(TempPaymentBuffer."Dimension Entry No.",DimBuf);
          IF DimBuf.FINDSET THEN
            REPEAT
              DimVal.GET(DimBuf."Dimension Code",DimBuf."Dimension Value Code");
              TempDimSetEntry."Dimension Code" := DimBuf."Dimension Code";
              TempDimSetEntry."Dimension Value Code" := DimBuf."Dimension Value Code";
              TempDimSetEntry."Dimension Value ID" := DimVal."Dimension Value ID";
              TempDimSetEntry.INSERT;
            UNTIL DimBuf.NEXT = 0;
          NewDimensionID := DimMgt.GetDimensionSetID(TempDimSetEntry);
          "Dimension Set ID" := NewDimensionID;
        END;
        CreateDim(
          DimMgt.TypeToTableID1("Account Type"),"Account No.",
          DimMgt.TypeToTableID1("Bal. Account Type"),"Bal. Account No.",
          DATABASE::Job,"Job No.",
          DATABASE::"Salesperson/Purchaser","Salespers./Purch. Code",
          DATABASE::Campaign,"Campaign No.");
        IF NewDimensionID <> "Dimension Set ID" THEN BEGIN
          DimSetIDArr[1] := "Dimension Set ID";
          DimSetIDArr[2] := NewDimensionID;
          "Dimension Set ID" :=
            DimMgt.GetCombinedDimensionSetID(DimSetIDArr,"Shortcut Dimension 1 Code","Shortcut Dimension 2 Code");
        END;

        IF SummarizePerVend THEN BEGIN
          DimMgt.GetDimensionSet(TempDimSetEntry,"Dimension Set ID");
          AdjustAgainstSelectedDim(TempDimSetEntry,TempDimSetEntry2);
          "Dimension Set ID" := DimMgt.GetDimensionSetID(TempDimSetEntry2);
          DimMgt.UpdateGlobalDimFromDimSetID("Dimension Set ID","Shortcut Dimension 1 Code",
            "Shortcut Dimension 2 Code");
        END;
      END;
    END;

    LOCAL PROCEDURE CheckIfEntryAlreadyApplied@14(GenJnlLine3@1000 : Record 81;VendLedgEntry2@1001 : Record 25);
    VAR
      GenJnlLine4@1002 : Record 81;
    BEGIN
      GenJnlLine4.RESET;
      GenJnlLine4.SETCURRENTKEY(
        "Account Type","Account No.","Applies-to Doc. Type","Applies-to Doc. No.");
      GenJnlLine4.SETRANGE("Journal Template Name",GenJnlLine3."Journal Template Name");
      GenJnlLine4.SETRANGE("Journal Batch Name",GenJnlLine3."Journal Batch Name");
      GenJnlLine4.SETRANGE("Account Type",GenJnlLine4."Account Type"::Vendor);
      GenJnlLine4.SETRANGE("Account No.",VendLedgEntry2."Vendor No.");
      GenJnlLine4.SETRANGE("Applies-to Doc. Type",VendLedgEntry2."Document Type");
      GenJnlLine4.SETRANGE("Applies-to Doc. No.",VendLedgEntry2."Document No.");
      IF GenJnlLine4.FINDFIRST THEN
        GenJnlLine4.FIELDERROR(
          "Applies-to Doc. No.",
          STRSUBSTNO(
            Text016,
            VendLedgEntry2."Document Type",VendLedgEntry2."Document No.",
            VendLedgEntry2."Vendor No."));
    END;

    LOCAL PROCEDURE SetBankAccCurrencyFilter@11(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN
            TmpPayableVendLedgEntry.SETRANGE("Currency Code",BankAcc."Currency Code");
        END;
    END;

    LOCAL PROCEDURE ShowMessage@15(Text@1000 : Text);
    BEGIN
      IF GenJnlLineInserted THEN BEGIN
        IF ShowPostingDateWarning THEN
          Text += ReplacePostingDateMsg;
        IF Text <> '' THEN
          MESSAGE(Text);
      END;
    END;

    LOCAL PROCEDURE CheckCurrencies@4(BalAccType@1000 : 'G/L Account,Customer,Vendor,Bank Account';BalAccNo@1001 : Code[20];VAR TmpPayableVendLedgEntry@1002 : Record 317);
    VAR
      BankAcc@1003 : Record 270;
      TmpPayableVendLedgEntry2@1004 : TEMPORARY Record 317;
    BEGIN
      IF BalAccType = BalAccType::"Bank Account" THEN
        IF BalAccNo <> '' THEN BEGIN
          BankAcc.GET(BalAccNo);
          IF BankAcc."Currency Code" <> '' THEN BEGIN
            TmpPayableVendLedgEntry2.RESET;
            TmpPayableVendLedgEntry2.DELETEALL;
            IF TmpPayableVendLedgEntry.FIND('-') THEN
              REPEAT
                TmpPayableVendLedgEntry2 := TmpPayableVendLedgEntry;
                TmpPayableVendLedgEntry2.INSERT;
              UNTIL TmpPayableVendLedgEntry.NEXT = 0;

            TmpPayableVendLedgEntry2.SETFILTER("Currency Code",'<>%1',BankAcc."Currency Code");
            SeveralCurrencies := SeveralCurrencies OR TmpPayableVendLedgEntry2.FINDFIRST;

            IF SeveralCurrencies THEN
              MessageText :=
                STRSUBSTNO(Text020,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code")
            ELSE
              MessageText :=
                STRSUBSTNO(Text021,BankAcc.FIELDCAPTION("Currency Code"),BankAcc."Currency Code");
          END ELSE
            MessageText := Text022;
        END;
    END;

    PROCEDURE ClearNegative@8();
    VAR
      TempCurrency@1000 : TEMPORARY Record 4;
      PayableVendLedgEntry2@1001 : TEMPORARY Record 317;
      CurrencyBalance@1002 : Decimal;
    BEGIN
      CLEAR(PayableVendLedgEntry);
      PayableVendLedgEntry.SETRANGE("Vendor No.",Vendor."No.");

      WHILE PayableVendLedgEntry.NEXT <> 0 DO BEGIN
        TempCurrency.Code := PayableVendLedgEntry."Currency Code";
        CurrencyBalance := 0;
        IF TempCurrency.INSERT THEN BEGIN
          PayableVendLedgEntry2 := PayableVendLedgEntry;
          PayableVendLedgEntry.SETRANGE("Currency Code",PayableVendLedgEntry."Currency Code");
          REPEAT
            CurrencyBalance := CurrencyBalance + PayableVendLedgEntry."Amount (LCY)"
          UNTIL PayableVendLedgEntry.NEXT = 0;
          IF CurrencyBalance < 0 THEN
            PayableVendLedgEntry.DELETEALL;
          PayableVendLedgEntry.SETRANGE("Currency Code");
          PayableVendLedgEntry := PayableVendLedgEntry2;
        END;
      END;
      PayableVendLedgEntry.RESET;
    END;

    LOCAL PROCEDURE DimCodeIsInDimBuf@1101(DimCode@1111 : Code[20];DimBuf@1112 : Record 360) : Boolean;
    BEGIN
      DimBuf.RESET;
      DimBuf.SETRANGE("Dimension Code",DimCode);
      EXIT(NOT DimBuf.ISEMPTY);
    END;

    LOCAL PROCEDURE RemovePaymentsAboveLimit@5(VAR PayableVendLedgEntry@1000 : Record 317;RemainingAmtAvailable@1001 : Decimal);
    BEGIN
      PayableVendLedgEntry.SETFILTER("Amount (LCY)",'>%1',RemainingAmtAvailable);
      PayableVendLedgEntry.DELETEALL;
      PayableVendLedgEntry.SETRANGE("Amount (LCY)");
    END;

    LOCAL PROCEDURE InsertDimBuf@9(VAR DimBuf@1004 : Record 360;TableID@1000 : Integer;EntryNo@1001 : Integer;DimCode@1002 : Code[20];DimValue@1003 : Code[20]);
    BEGIN
      DimBuf.INIT;
      DimBuf."Table ID" := TableID;
      DimBuf."Entry No." := EntryNo;
      DimBuf."Dimension Code" := DimCode;
      DimBuf."Dimension Value Code" := DimValue;
      DimBuf.INSERT;
    END;

    LOCAL PROCEDURE SetPostingDate@92(VAR GenJnlLine@1002 : Record 81;DueDate@1001 : Date;PostingDate@1000 : Date) : Boolean;
    BEGIN
      IF NOT UseDueDateAsPostingDate THEN BEGIN
        GenJnlLine.VALIDATE("Posting Date",PostingDate);
        EXIT(FALSE);
      END;

      IF DueDate = 0D THEN
        DueDate := GenJnlLine.GetAppliesToDocDueDate;
      EXIT(GenJnlLine.SetPostingDateAsDueDate(DueDate,DueDateOffset));
    END;

    LOCAL PROCEDURE GetApplDueDate@94(VendLedgEntryNo@1001 : Integer) : Date;
    VAR
      AppliedVendLedgEntry@1000 : Record 25;
    BEGIN
      IF AppliedVendLedgEntry.GET(VendLedgEntryNo) THEN
        EXIT(AppliedVendLedgEntry."Due Date");

      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE AdjustAgainstSelectedDim@16(VAR TempDimSetEntry@1000 : TEMPORARY Record 480;VAR TempDimSetEntry2@1003 : TEMPORARY Record 480);
    BEGIN
      IF SelectedDim.FINDSET THEN
        REPEAT
          TempDimSetEntry.SETRANGE("Dimension Code",SelectedDim."Dimension Code");
          IF TempDimSetEntry.FINDFIRST THEN BEGIN
            TempDimSetEntry2.TRANSFERFIELDS(TempDimSetEntry,TRUE);
            TempDimSetEntry2.INSERT;
          END;
        UNTIL SelectedDim.NEXT = 0;
    END;

    LOCAL PROCEDURE SetTempPaymentBufferDims@12(VAR DimBuf@1000 : Record 360);
    VAR
      GLSetup@1003 : Record 98;
      EntryNo@1001 : Integer;
    BEGIN
      IF SummarizePerDim THEN BEGIN
        DimBuf.RESET;
        DimBuf.DELETEALL;
        IF SelectedDim.FIND('-') THEN
          REPEAT
            IF DimSetEntry.GET(
                 VendLedgEntry."Dimension Set ID",SelectedDim."Dimension Code")
            THEN
              InsertDimBuf(DimBuf,DATABASE::"Dimension Buffer",0,DimSetEntry."Dimension Code",
                DimSetEntry."Dimension Value Code");
          UNTIL SelectedDim.NEXT = 0;
        EntryNo := DimBufMgt.FindDimensions(DimBuf);
        IF EntryNo = 0 THEN
          EntryNo := DimBufMgt.InsertDimensions(DimBuf);
        TempPaymentBuffer."Dimension Entry No." := EntryNo;
        IF TempPaymentBuffer."Dimension Entry No." <> 0 THEN BEGIN
          GLSetup.GET;
          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 1 Code",DimBuf) THEN
            TempPaymentBuffer."Global Dimension 1 Code" := VendLedgEntry."Global Dimension 1 Code"
          ELSE
            TempPaymentBuffer."Global Dimension 1 Code" := '';
          IF DimCodeIsInDimBuf(GLSetup."Global Dimension 2 Code",DimBuf) THEN
            TempPaymentBuffer."Global Dimension 2 Code" := VendLedgEntry."Global Dimension 2 Code"
          ELSE
            TempPaymentBuffer."Global Dimension 2 Code" := '';
        END ELSE BEGIN
          TempPaymentBuffer."Global Dimension 1 Code" := '';
          TempPaymentBuffer."Global Dimension 2 Code" := '';
        END;
        TempPaymentBuffer."Dimension Set ID" := VendLedgEntry."Dimension Set ID";
      END ELSE BEGIN
        TempPaymentBuffer."Dimension Entry No." := 0;
        TempPaymentBuffer."Global Dimension 1 Code" := '';
        TempPaymentBuffer."Global Dimension 2 Code" := '';
        TempPaymentBuffer."Dimension Set ID" := 0;
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

