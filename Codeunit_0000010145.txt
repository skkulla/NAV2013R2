OBJECT Codeunit 10145 E-Invoice Mgt.
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVNA7.10;
  }
  PROPERTIES
  {
    Permissions=TableData 112=rimd,
                TableData 114=rimd;
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Customer@1020005 : Record 18;
      GLSetup@1020004 : Record 98;
      CompanyInfo@1020000 : Record 79;
      SourceCodeSetup@1020001 : Record 242;
      FileManagement@1020017 : Codeunit 419;
      XMLCurrNode@1020016 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLNewChild@1020015 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
      XMLDOMNamedNodeMap@1020019 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamedNodeMap";
      XMLDOMNodeList@1020021 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeList";
      XMLDoc@1020014 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";
      DocNameSpace@1020009 : Text[100];
      Text000@1020012 : TextConst 'ENU=Dear customer, please find invoice number %1 in the attachment.;ESM=Estimado cliente, busque la factura n£mero %1 en los datos adjuntos.;FRC=Cher Client, veuillez trouver en piŠce jointe la facture num‚ro %1.;ENC=Dear customer, please find invoice number %1 in the attachment.';
      Text001@1020018 : TextConst 'ENU=E-Document %1 has been sent.;ESM=Se envi¢ el documento electr¢nico %1.;FRC=Le document ‚lectronique %1 a ‚t‚ envoy‚.;ENC=E-Document %1 has been sent.';
      Text002@1020002 : TextConst 'ENU=One or more invoices have already been sent.\Do you want to continue?;ESM=Ya se enviaron una o varias facturas.\¨Desea continuar?;FRC=Une ou plusieurs factures ont d‚j… ‚t‚ envoy‚es.\Voulez-vous continuer ?;ENC=One or more invoices have already been sent.\Do you want to continue?';
      Text004@1020006 : TextConst 'ENU=Dear customer, please find credit memo number %1 in the attachment.;ESM=Estimado cliente, busque la nota de cr‚dito n£mero %1 en los datos adjuntos.;FRC=Cher Client, veuillez trouver en piŠce jointe la note de cr‚dit num‚ro %1.;ENC=Dear customer, please find credit memo number %1 in the attachment.';
      Text005@1020010 : TextConst 'ENU=Invoice no. %1.;ESM=Factura nø %1.;FRC=Facture nø %1.;ENC=Invoice no. %1.';
      Text006@1020011 : TextConst 'ENU=Credit memo no. %1.;ESM=Nota de cr‚dito nø %1.;FRC=Note de cr‚dit nø %1.;ENC=Credit memo no. %1.';
      Export@1020007 : Boolean;
      Text007@1020008 : TextConst 'ENU=You cannot perform this action on a deleted document.;ESM=No se puede realizar esta acci¢n en un documento eliminado.;FRC=Vous ne pouvez ex‚cuter cette action sur un document supprim‚.;ENC=You cannot perform this action on a deleted document.';
      Text008@1020013 : TextConst 'ENU=&Request Stamp,&Send,Request Stamp &and Send;ESM=&Solicitar sello,Enviar, solicitar sello y enviar;FRC=&Demander un marquage,&Envoyer,Demander un marquage &et envoyer;ENC=&Request Stamp,&Send,Request Stamp &and Send';
      Text009@1020020 : TextConst 'ENU=Cannot find a valid PAC web service for the action %1.\You must specify web service details for the combination of the %1 action and the %2 and %3 that you have selected in the %4 window.;ESM=No se encuentra un servicio web PAC v lido para la acci¢n %1.\Debe especificar detalles del servicio web para la combinaci¢n de la acci¢n %1 y el %2 y %3 seleccionados en la ventana %4.;FRC=Impossible de trouver un service Web PAC valide pour l''action %1.\Vous devez sp‚cifier les d‚tails du service Web pour la combinaison de l''action %1 et de %2 et %3 s‚lectionn‚s dans la fenˆtre %4.;ENC=Cannot find a valid PAC web service for the action %1.\You must specify web service details for the combination of the %1 action and the %2 and %3 that you have selected in the %4 window.';
      Text010@1020022 : TextConst 'ENU=You cannot choose the action %1 when the document status is %2.;ESM=No se puede elegir la acci¢n %1 cuando el estado del documento es %2.;FRC=Vous ne pouvez pas choisir l''action %1 lorsque l''‚tat du document est %2.;ENC=You cannot choose the action %1 when the document status is %2.';
      EDocAction@1020023 : 'Request Stamp,Send,Cancel';
      Text011@1020024 : TextConst 'ENU=There is no electronic stamp for document no. %1.\Do you want to continue?;ESM=No hay sello electr¢nico para el documento nø %1.\¨Desea continuar?;FRC=Il n''existe pas de marquage ‚lectronique pour le document nø %1.\Voulez-vous continuer?;ENC=There is no electronic stamp for document no. %1.\Do you want to continue?';
      MethodType@1020025 : 'Request Stamp,Cancel';
      Text012@1020026 : TextConst 'ENU="Cannot contact the PAC. You must specify a value for the %1 field in the %2 window for the PAC that you selected in the %3 window. ";ESM="No se puede establecer contacto con el PAC. Debe especificar un valor para el campo %1 en la ventana %2 para el PAC seleccionado en la ventana %3. ";FRC="Impossible de contacter le PAC. Vous devez sp‚cifier une valeur pour le champ %1 dans la fenˆtre %2 pour le PAC s‚lectionn‚ dans la fenˆtre %3. ";ENC="Cannot contact the PAC. You must specify a value for the %1 field in the %2 window for the PAC that you selected in the %3 window. "';
      Text013@1020027 : TextConst 'ENU=Request Stamp,Send,Cancel;ESM=Solicitar sello,Enviar,Cancelar;FRC=Demander un marquage,Envoyer,Annuler;ENC=Request Stamp,Send,Cancel';
      Text014@1020028 : TextConst 'ENU=You cannot perform this action because the %1 field in the %2 window is set to %3.;ESM=No se puede realizar esta acci¢n porque el campo %1 en la ventana %2 se establece en %3.;FRC=Vous ne pouvez pas ex‚cuter cette action car le champ %1 dans la fenˆtre %2 est d‚fini sur %3.;ENC=You cannot perform this action because the %1 field in the %2 window is set to %3.';
      Text015@1020030 : TextConst 'ENU=Do you want to cancel the electronic document?;ESM=¨Desea cancelar el documento electr¢nico?;FRC=Voulez-vous annuler le document ‚lectronique?;ENC=Do you want to cancel the electronic document?';
      NamespaceManager@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNamespaceManager";
      Text016@1020003 : TextConst 'ENU=The SMTP mail system returned the following error: %1.;ESM=El sistema de correo SMTP devolvi¢ el siguiente error: %1.;FRC=Le systŠme de messagerie SMTP a retourn‚ l''erreur suivanteÿ: %1.;ENC=The SMTP mail system returned the following error: %1.';

    PROCEDURE RequestStampDocument@1020000(VAR RecRef@1020000 : RecordRef);
    VAR
      SalesInvHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020001 : Record 114;
      ServiceInvHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
      Selection@1020003 : Integer;
    BEGIN
      // Called from Send Action
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;
      Selection := STRMENU(Text008,3);

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvHeader);
            CASE Selection OF
              1:// Request Stamp
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",SalesInvHeader."Electronic Document Status");
                  RequestStampSalesInvoice(SalesInvHeader);
                END;
              2:// Send
                BEGIN
                  EDocActionValidation(EDocAction::Send,SalesInvHeader."Electronic Document Status");
                  SendESalesInvoice(SalesInvHeader);
                END;
              3:// Request Stamp and Send
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",SalesInvHeader."Electronic Document Status");
                  RequestStampSalesInvoice(SalesInvHeader);
                  COMMIT;
                  EDocActionValidation(EDocAction::Send,SalesInvHeader."Electronic Document Status");
                  SendESalesInvoice(SalesInvHeader);
                END;
            END;
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            CASE Selection OF
              1:// Request Stamp
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",SalesCrMemoHeader."Electronic Document Status");
                  RequestStampSalesCrMemo(SalesCrMemoHeader);
                END;
              2:// Send
                BEGIN
                  EDocActionValidation(EDocAction::Send,SalesCrMemoHeader."Electronic Document Status");
                  SendESalesCrMemo(SalesCrMemoHeader);
                END;
              3:// Request Stamp and Send
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",SalesCrMemoHeader."Electronic Document Status");
                  RequestStampSalesCrMemo(SalesCrMemoHeader);
                  COMMIT;
                  EDocActionValidation(EDocAction::Send,SalesCrMemoHeader."Electronic Document Status");
                  SendESalesCrMemo(SalesCrMemoHeader);
                END;
            END;
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServiceInvHeader);
            CASE Selection OF
              1:// Request Stamp
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",ServiceInvHeader."Electronic Document Status");
                  RequestStampServiceInvoice(ServiceInvHeader);
                END;
              2:// Send
                BEGIN
                  EDocActionValidation(EDocAction::Send,ServiceInvHeader."Electronic Document Status");
                  SendEServiceInvoice(ServiceInvHeader);
                END;
              3:// Request Stamp and Send
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",ServiceInvHeader."Electronic Document Status");
                  RequestStampServiceInvoice(ServiceInvHeader);
                  COMMIT;
                  EDocActionValidation(EDocAction::Send,ServiceInvHeader."Electronic Document Status");
                  SendEServiceInvoice(ServiceInvHeader);
                END;
            END;
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServiceCrMemoHeader);
            CASE Selection OF
              1:// Request Stamp
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",ServiceCrMemoHeader."Electronic Document Status");
                  RequestStampServiceCrMemo(ServiceCrMemoHeader);
                END;
              2:// Send
                BEGIN
                  EDocActionValidation(EDocAction::Send,ServiceCrMemoHeader."Electronic Document Status");
                  SendEServiceCrMemo(ServiceCrMemoHeader);
                END;
              3:// Request Stamp and Send
                BEGIN
                  EDocActionValidation(EDocAction::"Request Stamp",ServiceCrMemoHeader."Electronic Document Status");
                  RequestStampServiceCrMemo(ServiceCrMemoHeader);
                  COMMIT;
                  EDocActionValidation(EDocAction::Send,ServiceCrMemoHeader."Electronic Document Status");
                  SendEServiceCrMemo(ServiceCrMemoHeader);
                END;
            END;
          END;
      END;
    END;

    PROCEDURE CancelDocument@1020029(VAR RecRef@1020000 : RecordRef);
    VAR
      SalesInvHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020001 : Record 114;
      ServiceInvHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
    BEGIN
      IF NOT CONFIRM(Text015,FALSE) THEN
        EXIT;
      Export := FALSE;
      GetCompanyInfo;
      GetGLSetup;
      SourceCodeSetup.GET;

      CASE RecRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            RecRef.SETTABLE(SalesInvHeader);
            EDocActionValidation(EDocAction::Cancel,SalesInvHeader."Electronic Document Status");
            CancelESalesInvoice(SalesInvHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(SalesCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,SalesCrMemoHeader."Electronic Document Status");
            CancelESalesCrMemo(SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            RecRef.SETTABLE(ServiceInvHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceInvHeader."Electronic Document Status");
            CancelEServiceInvoice(ServiceInvHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            RecRef.SETTABLE(ServiceCrMemoHeader);
            EDocActionValidation(EDocAction::Cancel,ServiceCrMemoHeader."Electronic Document Status");
            CancelEServiceCrMemo(ServiceCrMemoHeader);
          END;
      END;
    END;

    PROCEDURE EDocActionValidation@1020028(Action@1020000 : 'Request Stamp,Send,Cancel';Status@1020001 : ' ,Stamp Received,Sent,Canceled,Stamp Request Error,Cancel Error') Selection : Integer;
    VAR
      TempSalesInvoiceHeader@1020002 : TEMPORARY Record 112;
    BEGIN
      TempSalesInvoiceHeader."Electronic Document Status" := Status;

      IF Action = Action::"Request Stamp" THEN
        IF Status IN [Status::"Stamp Received",Status::Sent,Status::"Cancel Error",Status::Canceled] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      IF Action = Action::Send THEN
        IF Status IN [Status::" ",Status::Canceled,Status::"Cancel Error",Status::"Stamp Request Error"] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");

      IF Action = Action::Cancel THEN
        IF Status IN [Status::" ",Status::Canceled,Status::"Stamp Request Error"] THEN
          ERROR(Text010,SELECTSTR(Action + 1,Text013),TempSalesInvoiceHeader."Electronic Document Status");
    END;

    PROCEDURE EDocPrintValidation@1020013(EDocStatus@1020001 : ' ,Stamp Received,Sent,Canceled,Stamp Request Error,Cancel Error';DocNo@1020000 : Code[20]);
    BEGIN
      GLSetup.GET;
      IF (GLSetup."PAC Environment" <> GLSetup."PAC Environment"::Disabled) AND
         (EDocStatus IN [EDocStatus::" ",EDocStatus::Canceled,EDocStatus::"Cancel Error",EDocStatus::"Stamp Request Error"])
      THEN
        IF NOT CONFIRM(STRSUBSTNO(Text011,DocNo)) THEN
          ERROR('');
    END;

    LOCAL PROCEDURE RequestStampSalesInvoice@1020001(VAR SalesInvHeader@1020000 : Record 112);
    VAR
      SalesInvoiceLine@1020001 : Record 113;
      TempBlob@1020008 : Record 99008535;
      BlobManagement@1020010 : Codeunit 10146;
      OutStr@1020012 : OutStream;
      Signature@1020009 : BigText;
      Certificate@1020011 : BigText;
      OriginalStringFileName@1020006 : Text[1024];
      DigitalSignatureFileName@1020007 : Text[1024];
      CertificateFileName@1020005 : Text[1024];
      ResponseFileName@1020002 : Text[1024];
      FileNameEdoc@1020003 : Text[1024];
      SubTotal@1020015 : Decimal;
      RetainAmt@1020016 : Decimal;
    BEGIN
      IF SalesInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);
      GetCustomer(SalesInvHeader."Bill-to Customer No.");
      SalesInvHeader.TESTFIELD("Bill-to Address");
      SalesInvHeader.TESTFIELD("Bill-to Post Code");
      SalesInvHeader.TESTFIELD("No.");
      SalesInvHeader.TESTFIELD("Document Date");
      SalesInvHeader.TESTFIELD("Payment Terms Code");
      CalcSalesInvLineTotal(SalesInvoiceLine,SubTotal,RetainAmt,SalesInvHeader."No.");
      Export := TRUE;

      GetDateTimeOfFirstReqSalesInv(SalesInvHeader);
      CreateESalesInvOriginalStr(SalesInvHeader);
      OriginalStringFileName := FileManagement.ClientTempFileName('');
      DigitalSignatureFileName := FileManagement.ClientTempFileName('');
      TempBlob.Blob := SalesInvHeader."Original String";
      OriginalStringFileName := FileManagement.BLOBExport(TempBlob,OriginalStringFileName,FALSE);
      CreateDigitalSignature(OriginalStringFileName,DigitalSignatureFileName,SalesInvHeader."Certificate Serial No.",
        CertificateFileName);
      CLEAR(TempBlob);
      UploadFileBLOBImportandDeleteServerFile(TempBlob,DigitalSignatureFileName);
      SalesInvHeader."Digital Stamp SAT" := TempBlob.Blob;

      // Create Original XML
      InitXML;
      WITH SalesInvHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'version','3.2');
        AddAttribute(XMLDoc,XMLCurrNode,'folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'fecha',"Date/Time First Req. Sent");

        CALCFIELDS("Amount Including VAT");
        TempBlob.Blob := "Digital Stamp SAT";
        BlobManagement.Read(Signature,TempBlob);
        AddBigTextAttribute(XMLCurrNode,'sello',Signature);

        IF NOT (CertificateFileName = '') THEN BEGIN
          CLEAR(TempBlob);
          UploadFileBLOBImportandDeleteServerFile(TempBlob,CertificateFileName);
          BlobManagement.Read(Certificate,TempBlob);
          AddBigTextAttribute(XMLCurrNode,'certificado',Certificate);
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'formaDePago',GetPmtTermCode("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'noCertificado',"Certificate Serial No.");
        AddAttribute(XMLDoc,XMLCurrNode,'subTotal',FormatAmount(SubTotal));
        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatAmount(1 / "Currency Factor"));
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'total',FormatAmount("Amount Including VAT"));
        AddAttribute(XMLDoc,XMLCurrNode,'tipoDeComprobante','ingreso');
        AddAttribute(XMLDoc,XMLCurrNode,'metodoDePago',SalesInvHeader."Payment Method Code");
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo.City);
        IF CompanyInfo."Bank Account No." <> '' THEN
          AddAttribute(XMLDoc,XMLCurrNode,'NumCtaPago',GetBankAccountLastFourChars(CompanyInfo."Bank Account No."));

        // Emisor
        WriteCompanyInfo;

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'nombre',"Bill-to Name");

        // Receptor->Domicilio
        AddElementCFDI(XMLCurrNode,'Domicilio','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'calle',"Bill-to Address");
        AddAttribute(XMLDoc,XMLCurrNode,'colonia',"Bill-to County");
        AddAttribute(XMLDoc,XMLCurrNode,'localidad',"Bill-to City");
        AddAttribute(XMLDoc,XMLCurrNode,'pais',Customer."Country/Region Code");
        AddAttribute(XMLDoc,XMLCurrNode,'codigoPostal',"Bill-to Post Code");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.","No.");
        SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
        IF SalesInvoiceLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'cantidad',FORMAT(SalesInvoiceLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'unidad',SalesInvoiceLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'noIdentificacion',SalesInvoiceLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'descripcion',SalesInvoiceLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'valorUnitario',FormatAmount(SalesInvoiceLine."Unit Price"));
            AddAttribute(XMLDoc,XMLCurrNode,'importe',FormatAmount(SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price"));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL SalesInvoiceLine.NEXT = 0;

        // Impuestos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'totalImpuestosTrasladados',FormatAmount(RetainAmt));

        // Impuestos->Traslados
        AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.","No.");
        SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
        IF SalesInvoiceLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'impuesto','IVA');
            AddAttribute(XMLDoc,XMLCurrNode,'tasa',FormatAmount(SalesInvoiceLine."VAT %"));
            AddAttribute(XMLDoc,XMLCurrNode,'importe',
              FormatAmount(SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL SalesInvoiceLine.NEXT = 0;
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      TempBlob.Blob := SalesInvHeader."Original Document XML";
      FileNameEdoc := FileManagement.ClientTempFileName('');
      FileNameEdoc := FileManagement.BLOBExport(TempBlob,FileNameEdoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEdoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        UploadFileBLOBImportandDeleteServerFile(TempBlob,ResponseFileName);
        SalesInvHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesInvHeader.MODIFY;
      COMMIT;

      ProcessResponseESalesInvoice(SalesInvHeader,EDocAction::"Request Stamp");
      SalesInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE SendESalesInvoice@1020030(VAR SalesInvHeader@1020000 : Record 112);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      SalesInvHeaderLoc@1020008 : Record 112;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020002 : Text;
    BEGIN
      GetCustomer(SalesInvHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF SalesInvHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      SalesInvHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := SalesInvHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := SalesInvHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(SalesInvHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      SalesInvHeaderLoc.GET(SalesInvHeader."No.");
      SalesInvHeaderLoc."No. Printed" := SalesInvHeader."No. Printed";
      SalesInvHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,SalesInvHeader."No."),
        STRSUBSTNO(Text000,SalesInvHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      SalesInvHeaderLoc.GET(SalesInvHeader."No.");
      SalesInvHeaderLoc."No. of E-Documents Sent" := SalesInvHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT SalesInvHeaderLoc."Electronic Document Sent" THEN
        SalesInvHeaderLoc."Electronic Document Sent" := TRUE;
      SalesInvHeaderLoc."Electronic Document Status" := SalesInvHeaderLoc."Electronic Document Status"::Sent;
      SalesInvHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      SalesInvHeaderLoc.MODIFY;

      MESSAGE(Text001,SalesInvHeader."No.");
    END;

    PROCEDURE CancelESalesInvoice@1170000000(VAR SalesInvHeader@1020000 : Record 112);
    VAR
      TempBlob@1020004 : Record 99008535;
      FileNameEdoc@1020002 : Text[1024];
      ResponseFileName@1020005 : Text[1024];
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[30];
    BEGIN
      IF SalesInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDoc.LoadXml := '<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ';
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH SalesInvHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
        TempBlob.Blob := "Original Document XML";
      END;

      FileNameEdoc := FileManagement.ClientTempFileName('');
      FileNameEdoc := FileManagement.BLOBExport(TempBlob,FileNameEdoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEdoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        FileManagement.BLOBImport(TempBlob,ResponseFileName);
        SalesInvHeader."Signed Document XML" := TempBlob.Blob;
      END;
      SalesInvHeader.MODIFY;
      ProcessResponseESalesInvoice(SalesInvHeader,EDocAction::Cancel);
      SalesInvHeader.MODIFY;
    END;

    PROCEDURE ProcessResponseESalesInvoice@1020054(VAR SalesInvoiceHeader@1020000 : Record 112;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      SalesInvoiceHeader.CALCFIELDS("Signed Document XML");
      SalesInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDoc.Load(InStr);
      CLEAR(SalesInvoiceHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      SalesInvoiceHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        SalesInvoiceHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        SalesInvoiceHeader."Error Description" := XMLCurrNode.Value;
        CASE Action OF
          EDocAction::"Request Stamp":
            SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::"Cancel Error";
              SalesInvoiceHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      SalesInvoiceHeader."Error Code" := '';
      SalesInvoiceHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;
      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      SalesInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      SalesInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      SalesInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('noCertificadoSAT');
      SalesInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('selloSAT');

      CLEAR(OutStr);
      SalesInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      SalesInvoiceHeader."Electronic Document Status" := SalesInvoiceHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      SalesInvoiceHeader.CALCFIELDS("Amount Including VAT");
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesInvoiceHeader."Amount Including VAT",
          FORMAT(SalesInvoiceHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      SalesInvoiceHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE RequestStampSalesCrMemo@1020002(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      SalesCrMemoLine@1020001 : Record 115;
      TempBlob@1020009 : Record 99008535;
      BlobManagement@1020042 : Codeunit 10146;
      OutStr@1020012 : OutStream;
      Signature@1020003 : BigText;
      Certificate@1020007 : BigText;
      OriginalStringFileName@1020005 : Text[1024];
      DigitalSignatureFileName@1020004 : Text[1024];
      CertificateFileName@1020008 : Text[1024];
      ResponseFileName@1020002 : Text[1024];
      FileNameEdoc@1020006 : Text[1024];
      SubTotal@1020015 : Decimal;
      RetainAmt@1020014 : Decimal;
    BEGIN
      IF SalesCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");
      SalesCrMemoHeader.TESTFIELD("Bill-to Address");
      SalesCrMemoHeader.TESTFIELD("Bill-to Post Code");
      SalesCrMemoHeader.TESTFIELD("No.");
      SalesCrMemoHeader.TESTFIELD("Document Date");
      SalesCrMemoHeader.TESTFIELD("Payment Terms Code");
      CalcSalesCrMemoLineTotal(SalesCrMemoLine,SubTotal,RetainAmt,SalesCrMemoHeader."No.");
      Export := TRUE;

      GetDateTimeOfFirstReqSalesCr(SalesCrMemoHeader);
      CreateESalesCrMemoOriginalStr(SalesCrMemoHeader);
      OriginalStringFileName := FileManagement.ClientTempFileName('');
      DigitalSignatureFileName := FileManagement.ClientTempFileName('');
      TempBlob.Blob := SalesCrMemoHeader."Original String";
      OriginalStringFileName := FileManagement.BLOBExport(TempBlob,OriginalStringFileName,FALSE);
      CreateDigitalSignature(OriginalStringFileName,DigitalSignatureFileName,SalesCrMemoHeader."Certificate Serial No.",
        CertificateFileName);
      CLEAR(TempBlob);
      UploadFileBLOBImportandDeleteServerFile(TempBlob,DigitalSignatureFileName);
      SalesCrMemoHeader."Digital Stamp SAT" := TempBlob.Blob;

      InitXML;
      WITH SalesCrMemoHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'version','3.2');
        AddAttribute(XMLDoc,XMLCurrNode,'folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'fecha',"Date/Time First Req. Sent");

        CALCFIELDS("Amount Including VAT");
        TempBlob.Blob := "Digital Stamp SAT";
        BlobManagement.Read(Signature,TempBlob);
        AddBigTextAttribute(XMLCurrNode,'sello',Signature);

        IF NOT (CertificateFileName = '') THEN BEGIN
          CLEAR(TempBlob);
          UploadFileBLOBImportandDeleteServerFile(TempBlob,CertificateFileName);
          BlobManagement.Read(Certificate,TempBlob);
          AddBigTextAttribute(XMLCurrNode,'certificado',Certificate);
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'formaDePago',GetPmtTermCode("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'noCertificado',"Certificate Serial No.");
        AddAttribute(XMLDoc,XMLCurrNode,'subTotal',FormatAmount(SubTotal));
        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatAmount(1 / "Currency Factor"));
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'total',FormatAmount("Amount Including VAT"));
        AddAttribute(XMLDoc,XMLCurrNode,'tipoDeComprobante','egreso');
        AddAttribute(XMLDoc,XMLCurrNode,'metodoDePago',SalesCrMemoHeader."Payment Method Code");
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo.City);
        IF CompanyInfo."Bank Account No." <> '' THEN
          AddAttribute(XMLDoc,XMLCurrNode,'NumCtaPago',GetBankAccountLastFourChars(CompanyInfo."Bank Account No."));

        // Emisor
        WriteCompanyInfo;

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'nombre',"Bill-to Name");

        // Receptor->Domicilio
        AddElementCFDI(XMLCurrNode,'Domicilio','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'calle',"Bill-to Address");
        AddAttribute(XMLDoc,XMLCurrNode,'colonia',"Bill-to County");
        AddAttribute(XMLDoc,XMLCurrNode,'localidad',"Bill-to City");
        AddAttribute(XMLDoc,XMLCurrNode,'pais',Customer."Country/Region Code");
        AddAttribute(XMLDoc,XMLCurrNode,'codigoPostal',"Bill-to Post Code");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Document No.","No.");
        SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
        IF SalesCrMemoLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'cantidad',FORMAT(SalesCrMemoLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'unidad',SalesCrMemoLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'noIdentificacion',SalesCrMemoLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'descripcion',SalesCrMemoLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'valorUnitario',FormatAmount(SalesCrMemoLine."Unit Price"));
            AddAttribute(XMLDoc,XMLCurrNode,'importe',FormatAmount(SalesCrMemoLine.Quantity * SalesCrMemoLine."Unit Price"));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL SalesCrMemoLine.NEXT = 0;

        // Impuestos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'totalImpuestosRetenidos',FormatAmount(RetainAmt));

        // Impuestos->Retenciones
        AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Document No.","No.");
        SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
        IF SalesCrMemoLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'impuesto','IVA');
            AddAttribute(XMLDoc,XMLCurrNode,'importe',
              FormatAmount(SalesCrMemoLine."Amount Including VAT" - SalesCrMemoLine.Amount));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL SalesCrMemoLine.NEXT = 0;
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      // Export XML
      TempBlob.Blob := SalesCrMemoHeader."Original Document XML";
      FileNameEdoc := FileManagement.ClientTempFileName('');
      FileNameEdoc := FileManagement.BLOBExport(TempBlob,FileNameEdoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEdoc,MethodType::"Request Stamp");
      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        UploadFileBLOBImportandDeleteServerFile(TempBlob,ResponseFileName);
        SalesCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;

      SalesCrMemoHeader.MODIFY;
      COMMIT;

      ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::"Request Stamp");
      SalesCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE SendESalesCrMemo@1020031(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      SalesCrMemoHeaderLoc@1020008 : Record 114;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF SalesCrMemoHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := SalesCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := SalesCrMemoHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(SalesCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"S.Cr.Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. Printed" := SalesCrMemoHeader."No. Printed";
      SalesCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,SalesCrMemoHeader."No."),
        STRSUBSTNO(Text004,SalesCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      SalesCrMemoHeaderLoc.GET(SalesCrMemoHeader."No.");
      SalesCrMemoHeaderLoc."No. of E-Documents Sent" := SalesCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT SalesCrMemoHeaderLoc."Electronic Document Sent" THEN
        SalesCrMemoHeaderLoc."Electronic Document Sent" := TRUE;
      SalesCrMemoHeaderLoc."Electronic Document Status" := SalesCrMemoHeaderLoc."Electronic Document Status"::Sent;
      SalesCrMemoHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      SalesCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,SalesCrMemoHeader."No.");
    END;

    PROCEDURE CancelESalesCrMemo@1020033(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      TempBlob@1020004 : Record 99008535;
      FileNameEdoc@1020002 : Text[1024];
      ResponseFileName@1020005 : Text[1024];
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[30];
    BEGIN
      IF SalesCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDoc.LoadXml := '<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ';
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH SalesCrMemoHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
        TempBlob.Blob := "Original Document XML";
      END;

      FileNameEdoc := FileManagement.ClientTempFileName('');
      FileNameEdoc := FileManagement.BLOBExport(TempBlob,FileNameEdoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEdoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        FileManagement.BLOBImport(TempBlob,ResponseFileName);
        SalesCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;
      SalesCrMemoHeader.MODIFY;
      ProcessResponseESalesCrMemo(SalesCrMemoHeader,EDocAction::Cancel);
      SalesCrMemoHeader.MODIFY;
    END;

    PROCEDURE ProcessResponseESalesCrMemo@1020032(VAR SalesCrMemoHeader@1020000 : Record 114;Action@1020007 : Option);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020008 : Text[95];
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(SalesCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      SalesCrMemoHeader.CALCFIELDS("Signed Document XML");
      SalesCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDoc.Load(InStr);
      CLEAR(SalesCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      SalesCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        SalesCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        SalesCrMemoHeader."Error Description" := XMLCurrNode.Value;
        CASE Action OF
          EDocAction::"Request Stamp":
            SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Cancel Error";
              SalesCrMemoHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      SalesCrMemoHeader."Error Code" := '';
      SalesCrMemoHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      SalesCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      SalesCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      SalesCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('noCertificadoSAT');
      SalesCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('selloSAT');

      CLEAR(OutStr);
      SalesCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      SalesCrMemoHeader."Electronic Document Status" := SalesCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      SalesCrMemoHeader.CALCFIELDS("Amount Including VAT");
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",SalesCrMemoHeader."Amount Including VAT",
          FORMAT(SalesCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      SalesCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE RequestStampServiceInvoice@1020003(VAR ServiceInvHeader@1020000 : Record 5992);
    VAR
      ServiceInvoiceLine@1020001 : Record 5993;
      TempBlob@1020009 : Record 99008535;
      BlobManagement@1020002 : Codeunit 10146;
      OutStr@1020012 : OutStream;
      Signature@1020003 : BigText;
      Certificate@1020011 : BigText;
      OriginalStringFileName@1020005 : Text[1024];
      DigitalSignatureFileName@1020004 : Text[1024];
      CertificateFileName@1020006 : Text[1024];
      ResponseFileName@1020008 : Text[1024];
      FileNameEDoc@1020007 : Text[1024];
      SubTotal@1020015 : Decimal;
      RetainAmt@1020014 : Decimal;
      AmontInclVAT@1020010 : Decimal;
    BEGIN
      IF ServiceInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);
      GetCustomer(ServiceInvHeader."Bill-to Customer No.");
      ServiceInvHeader.TESTFIELD("Bill-to Address");
      ServiceInvHeader.TESTFIELD("Bill-to Post Code");
      ServiceInvHeader.TESTFIELD("No.");
      ServiceInvHeader.TESTFIELD("Document Date");
      ServiceInvHeader.TESTFIELD("Payment Terms Code");
      CalcServiceInvLineTotal(ServiceInvoiceLine,SubTotal,RetainAmt,AmontInclVAT,ServiceInvHeader."No.");
      Export := TRUE;

      GetDateTimeOfFirstReqServInv(ServiceInvHeader);
      CreateEServiceInvOriginalStr(ServiceInvHeader);
      OriginalStringFileName := FileManagement.ClientTempFileName('');
      DigitalSignatureFileName := FileManagement.ClientTempFileName('');
      TempBlob.Blob := ServiceInvHeader."Original String";
      OriginalStringFileName := FileManagement.BLOBExport(TempBlob,OriginalStringFileName,FALSE);
      CreateDigitalSignature(OriginalStringFileName,DigitalSignatureFileName,ServiceInvHeader."Certificate Serial No.",
        CertificateFileName);
      CLEAR(TempBlob);
      UploadFileBLOBImportandDeleteServerFile(TempBlob,DigitalSignatureFileName);
      ServiceInvHeader."Digital Stamp SAT" := TempBlob.Blob;

      InitXML;
      WITH ServiceInvHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'version','3.2');
        AddAttribute(XMLDoc,XMLCurrNode,'folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'fecha',"Date/Time First Req. Sent");

        TempBlob.Blob := "Digital Stamp SAT";
        BlobManagement.Read(Signature,TempBlob);
        AddBigTextAttribute(XMLCurrNode,'sello',Signature);

        IF NOT (CertificateFileName = '') THEN BEGIN
          CLEAR(TempBlob);
          UploadFileBLOBImportandDeleteServerFile(TempBlob,CertificateFileName);
          BlobManagement.Read(Certificate,TempBlob);
          AddBigTextAttribute(XMLCurrNode,'certificado',Certificate);
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'formaDePago',GetPmtTermCode("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'noCertificado',"Certificate Serial No.");
        AddAttribute(XMLDoc,XMLCurrNode,'subTotal',FormatAmount(SubTotal));
        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatAmount(1 / "Currency Factor"));
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'total',FormatAmount(AmontInclVAT));
        AddAttribute(XMLDoc,XMLCurrNode,'tipoDeComprobante','ingreso');
        AddAttribute(XMLDoc,XMLCurrNode,'metodoDePago',ServiceInvHeader."Payment Method Code");
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo.City);
        IF CompanyInfo."Bank Account No." <> '' THEN
          AddAttribute(XMLDoc,XMLCurrNode,'NumCtaPago',GetBankAccountLastFourChars(CompanyInfo."Bank Account No."));

        // Emisor
        WriteCompanyInfo;

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'nombre',"Bill-to Name");

        // Receptor->Domicilio
        AddElementCFDI(XMLCurrNode,'Domicilio','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'calle',"Bill-to Address");
        AddAttribute(XMLDoc,XMLCurrNode,'colonia',"Bill-to County");
        AddAttribute(XMLDoc,XMLCurrNode,'localidad',"Bill-to City");
        AddAttribute(XMLDoc,XMLCurrNode,'pais',Customer."Country/Region Code");
        AddAttribute(XMLDoc,XMLCurrNode,'codigoPostal',"Bill-to Post Code");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        ServiceInvoiceLine.RESET;
        ServiceInvoiceLine.SETRANGE("Document No.","No.");
        ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
        IF ServiceInvoiceLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'cantidad',FORMAT(ServiceInvoiceLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'unidad',ServiceInvoiceLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'noIdentificacion',ServiceInvoiceLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'descripcion',ServiceInvoiceLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'valorUnitario',FormatAmount(ServiceInvoiceLine."Unit Price"));
            AddAttribute(XMLDoc,XMLCurrNode,'importe',FormatAmount(ServiceInvoiceLine.Quantity * ServiceInvoiceLine."Unit Price"));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL ServiceInvoiceLine.NEXT = 0;

        // Impuestos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'totalImpuestosTrasladados',FormatAmount(RetainAmt));

        // Impuestos->Traslados
        AddElementCFDI(XMLCurrNode,'Traslados','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        ServiceInvoiceLine.RESET;
        ServiceInvoiceLine.SETRANGE("Document No.","No.");
        ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
        IF ServiceInvoiceLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Traslado','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'impuesto','IVA');
            AddAttribute(XMLDoc,XMLCurrNode,'tasa',FormatAmount(ServiceInvoiceLine."VAT %"));
            AddAttribute(XMLDoc,XMLCurrNode,'importe',
              FormatAmount(ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL ServiceInvoiceLine.NEXT = 0;
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      // Export XML
      TempBlob.Blob := ServiceInvHeader."Original Document XML";
      FileNameEDoc := FileManagement.ClientTempFileName('');
      FileNameEDoc := FileManagement.BLOBExport(TempBlob,FileNameEDoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEDoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        UploadFileBLOBImportandDeleteServerFile(TempBlob,ResponseFileName);
        ServiceInvHeader."Signed Document XML" := TempBlob.Blob;
      END;

      ServiceInvHeader.MODIFY;
      COMMIT;

      ProcessResponseEServiceInvoice(ServiceInvHeader,EDocAction::"Request Stamp",AmontInclVAT);
      ServiceInvHeader.MODIFY;
    END;

    LOCAL PROCEDURE SendEServiceInvoice@1020043(VAR ServiceInvoiceHeader@1020000 : Record 5992);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      ServiceInvoiceHeaderLoc@1020008 : Record 5992;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceInvoiceHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF ServiceInvoiceHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      ServiceInvoiceHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceInvoiceHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceInvoiceHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(ServiceInvoiceHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Invoice");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. Printed" := ServiceInvoiceHeader."No. Printed";
      ServiceInvoiceHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text005,ServiceInvoiceHeader."No."),
        STRSUBSTNO(Text000,ServiceInvoiceHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceInvoiceHeaderLoc.GET(ServiceInvoiceHeader."No.");
      ServiceInvoiceHeaderLoc."No. of E-Documents Sent" := ServiceInvoiceHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT ServiceInvoiceHeaderLoc."Electronic Document Sent" THEN
        ServiceInvoiceHeaderLoc."Electronic Document Sent" := TRUE;
      ServiceInvoiceHeaderLoc."Electronic Document Status" := ServiceInvoiceHeaderLoc."Electronic Document Status"::Sent;
      ServiceInvoiceHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      ServiceInvoiceHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceInvoiceHeader."No.");
    END;

    PROCEDURE CancelEServiceInvoice@1020034(VAR ServiceInvHeader@1020000 : Record 5992);
    VAR
      TempBlob@1020004 : Record 99008535;
      FileNameEdoc@1020002 : Text[1024];
      ResponseFileName@1020005 : Text[1024];
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[30];
    BEGIN
      IF ServiceInvHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDoc.LoadXml := '<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ';
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH ServiceInvHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
        TempBlob.Blob := "Original Document XML";
      END;

      FileNameEdoc := FileManagement.ClientTempFileName('');
      FileNameEdoc := FileManagement.BLOBExport(TempBlob,FileNameEdoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEdoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        FileManagement.BLOBImport(TempBlob,ResponseFileName);
        ServiceInvHeader."Signed Document XML" := TempBlob.Blob;
      END;
      ServiceInvHeader.MODIFY;
      ProcessResponseEServiceInvoice(ServiceInvHeader,EDocAction::Cancel,0);
      ServiceInvHeader.MODIFY;
    END;

    PROCEDURE ProcessResponseEServiceInvoice@1020042(VAR ServInvoiceHeader@1020000 : Record 5992;Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServInvoiceHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      ServInvoiceHeader.CALCFIELDS("Signed Document XML");
      ServInvoiceHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDoc.Load(InStr);
      CLEAR(ServInvoiceHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServInvoiceHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        ServInvoiceHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ServInvoiceHeader."Error Description" := XMLCurrNode.Value;
        CASE Action OF
          EDocAction::"Request Stamp":
            ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Cancel Error";
              ServInvoiceHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      ServInvoiceHeader."Error Code" := '';
      ServInvoiceHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      ServInvoiceHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServInvoiceHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServInvoiceHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('noCertificadoSAT');
      ServInvoiceHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('selloSAT');

      CLEAR(OutStr);
      ServInvoiceHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certiificate Serial
      ServInvoiceHeader."Electronic Document Status" := ServInvoiceHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServInvoiceHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServInvoiceHeader."QR Code" := TempBlob.Blob;
    END;

    LOCAL PROCEDURE RequestStampServiceCrMemo@1020004(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      ServiceCrMemoLine@1020001 : Record 5995;
      TempBlob@1020009 : Record 99008535;
      BlobManagement@1020002 : Codeunit 10146;
      OutStr@1020012 : OutStream;
      Signature@1020003 : BigText;
      Certificate@1020007 : BigText;
      OriginalStringFileName@1020005 : Text[1024];
      DigitalSignatureFileName@1020004 : Text[1024];
      CertificateFileName@1020010 : Text[1024];
      ResponseFileName@1020008 : Text[1024];
      FileNameEDoc@1020006 : Text[1024];
      SubTotal@1020015 : Decimal;
      RetainAmt@1020014 : Decimal;
      AmontInclVAT@1020016 : Decimal;
    BEGIN
      IF ServiceCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      GetCustomer(ServiceCrMemoHeader."Bill-to Customer No.");
      ServiceCrMemoHeader.TESTFIELD("Bill-to Address");
      ServiceCrMemoHeader.TESTFIELD("Bill-to Post Code");
      ServiceCrMemoHeader.TESTFIELD("No.");
      ServiceCrMemoHeader.TESTFIELD("Document Date");
      ServiceCrMemoHeader.TESTFIELD("Payment Terms Code");
      CalcServiceCrMemoLineTotal(ServiceCrMemoLine,SubTotal,RetainAmt,AmontInclVAT,ServiceCrMemoHeader."No.");
      Export := TRUE;

      GetDateTimeOfFirstReqServCr(ServiceCrMemoHeader);
      CreateEServiceCrMemOriginalStr(ServiceCrMemoHeader);
      OriginalStringFileName := FileManagement.ClientTempFileName('');
      DigitalSignatureFileName := FileManagement.ClientTempFileName('');
      TempBlob.Blob := ServiceCrMemoHeader."Original String";
      OriginalStringFileName := FileManagement.BLOBExport(TempBlob,OriginalStringFileName,FALSE);
      CreateDigitalSignature(OriginalStringFileName,DigitalSignatureFileName,ServiceCrMemoHeader."Certificate Serial No.",
        CertificateFileName);
      CLEAR(TempBlob);
      UploadFileBLOBImportandDeleteServerFile(TempBlob,DigitalSignatureFileName);
      ServiceCrMemoHeader."Digital Stamp SAT" := TempBlob.Blob;

      InitXML;
      WITH ServiceCrMemoHeader DO BEGIN
        AddAttribute(XMLDoc,XMLCurrNode,'version','3.2');
        AddAttribute(XMLDoc,XMLCurrNode,'folio',"No.");
        AddAttribute(XMLDoc,XMLCurrNode,'fecha',"Date/Time First Req. Sent");

        TempBlob.Blob := "Digital Stamp SAT";
        BlobManagement.Read(Signature,TempBlob);
        AddBigTextAttribute(XMLCurrNode,'sello',Signature);

        IF NOT (CertificateFileName = '') THEN BEGIN
          CLEAR(TempBlob);
          UploadFileBLOBImportandDeleteServerFile(TempBlob,CertificateFileName);
          BlobManagement.Read(Certificate,TempBlob);
          AddBigTextAttribute(XMLCurrNode,'certificado',Certificate);
        END;

        AddAttribute(XMLDoc,XMLCurrNode,'formaDePago',GetPmtTermCode("Payment Terms Code"));
        AddAttribute(XMLDoc,XMLCurrNode,'noCertificado',"Certificate Serial No.");
        AddAttribute(XMLDoc,XMLCurrNode,'subTotal',FormatAmount(SubTotal));
        IF "Currency Code" <> '' THEN BEGIN
          AddAttribute(XMLDoc,XMLCurrNode,'TipoCambio',FormatAmount(1 / "Currency Factor"));
          AddAttribute(XMLDoc,XMLCurrNode,'Moneda',"Currency Code");
        END;
        AddAttribute(XMLDoc,XMLCurrNode,'total',FormatAmount(AmontInclVAT));
        AddAttribute(XMLDoc,XMLCurrNode,'tipoDeComprobante','egreso');
        AddAttribute(XMLDoc,XMLCurrNode,'metodoDePago',ServiceCrMemoHeader."Payment Method Code");
        AddAttribute(XMLDoc,XMLCurrNode,'LugarExpedicion',CompanyInfo.City);
        IF CompanyInfo."Bank Account No." <> '' THEN
          AddAttribute(XMLDoc,XMLCurrNode,'NumCtaPago',GetBankAccountLastFourChars(CompanyInfo."Bank Account No."));

        // Emisor
        WriteCompanyInfo;

        // Receptor
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Receptor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'rfc',Customer."RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'nombre',"Bill-to Name");

        // Receptor->Domicilio
        AddElementCFDI(XMLCurrNode,'Domicilio','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'calle',"Bill-to Address");
        AddAttribute(XMLDoc,XMLCurrNode,'colonia',"Bill-to County");
        AddAttribute(XMLDoc,XMLCurrNode,'localidad',"Bill-to City");
        AddAttribute(XMLDoc,XMLCurrNode,'pais',Customer."Country/Region Code");
        AddAttribute(XMLDoc,XMLCurrNode,'codigoPostal',"Bill-to Post Code");

        // Conceptos
        XMLCurrNode := XMLCurrNode.ParentNode;
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Conceptos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        // Conceptos->Concepto
        ServiceCrMemoLine.RESET;
        ServiceCrMemoLine.SETRANGE("Document No.","No.");
        ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
        IF ServiceCrMemoLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Concepto','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'cantidad',FORMAT(ServiceCrMemoLine.Quantity,0,9));
            AddAttribute(XMLDoc,XMLCurrNode,'unidad',ServiceCrMemoLine."Unit of Measure Code");
            AddAttribute(XMLDoc,XMLCurrNode,'noIdentificacion',ServiceCrMemoLine."No.");
            AddAttribute(XMLDoc,XMLCurrNode,'descripcion',ServiceCrMemoLine.Description);
            AddAttribute(XMLDoc,XMLCurrNode,'valorUnitario',FormatAmount(ServiceCrMemoLine."Unit Price"));
            AddAttribute(XMLDoc,XMLCurrNode,'importe',FormatAmount(ServiceCrMemoLine.Quantity * ServiceCrMemoLine."Unit Price"));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL ServiceCrMemoLine.NEXT = 0;

        // Impuestos
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'Impuestos','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'totalImpuestosRetenidos',FormatAmount(RetainAmt));

        // Impuestos->Retenciones
        AddElementCFDI(XMLCurrNode,'Retenciones','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;

        ServiceCrMemoLine.RESET;
        ServiceCrMemoLine.SETRANGE("Document No.","No.");
        ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
        IF ServiceCrMemoLine.FINDSET THEN
          REPEAT
            AddElementCFDI(XMLCurrNode,'Retencion','',DocNameSpace,XMLNewChild);
            XMLCurrNode := XMLNewChild;
            AddAttribute(XMLDoc,XMLCurrNode,'impuesto','IVA');
            AddAttribute(XMLDoc,XMLCurrNode,'importe',
              FormatAmount(ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount));
            XMLCurrNode := XMLCurrNode.ParentNode;
          UNTIL ServiceCrMemoLine.NEXT = 0;
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
      END;

      // Export XML
      TempBlob.Blob := ServiceCrMemoHeader."Original Document XML";
      FileNameEDoc := FileManagement.ClientTempFileName('');
      FileNameEDoc := FileManagement.BLOBExport(TempBlob,FileNameEDoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEDoc,MethodType::"Request Stamp");

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        UploadFileBLOBImportandDeleteServerFile(TempBlob,ResponseFileName);
        ServiceCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;

      ServiceCrMemoHeader.MODIFY;
      COMMIT;

      ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::"Request Stamp",AmontInclVAT);
      ServiceCrMemoHeader.MODIFY;
    END;

    LOCAL PROCEDURE SendEServiceCrMemo@1020045(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      TempBlob@1020001 : Record 99008535;
      ReportSelection@1020006 : Record 77;
      ServiceCrMemoHeaderLoc@1020008 : Record 5994;
      DocumentHeaderRef@1020005 : RecordRef;
      XMLInstream@1020035 : InStream;
      FileNameEdoc@1020003 : Text;
      PDFFileName@1020007 : Text;
    BEGIN
      GetCustomer(ServiceCrMemoHeader."Bill-to Customer No.");
      Customer.TESTFIELD("E-Mail");
      IF ServiceCrMemoHeader."No. of E-Documents Sent" <> 0 THEN
        IF NOT CONFIRM(Text002) THEN
          ERROR('');
      // Export XML
      ServiceCrMemoHeader.CALCFIELDS("Signed Document XML");
      TempBlob.Blob := ServiceCrMemoHeader."Signed Document XML";
      TempBlob.Blob.CREATEINSTREAM(XMLInstream);
      FileNameEdoc := ServiceCrMemoHeader."No." + '.xml';

      IF GLSetup."Send PDF Report" THEN BEGIN
        DocumentHeaderRef.GETTABLE(ServiceCrMemoHeader);
        ReportSelection.SETRANGE(Usage,ReportSelection.Usage::"SM.Credit Memo");
        PDFFileName := SaveAsPDFOnServer(DocumentHeaderRef,GetReportNo(ReportSelection));
      END;

      // Reset No. Printed
      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. Printed" := ServiceCrMemoHeader."No. Printed";
      ServiceCrMemoHeaderLoc.MODIFY;

      // Send Email with Attachments
      SendEmail(Customer."E-Mail",STRSUBSTNO(Text006,ServiceCrMemoHeader."No."),
        STRSUBSTNO(Text004,ServiceCrMemoHeader."No."),FileNameEdoc,PDFFileName,GLSetup."Send PDF Report",XMLInstream);

      ServiceCrMemoHeaderLoc.GET(ServiceCrMemoHeader."No.");
      ServiceCrMemoHeaderLoc."No. of E-Documents Sent" := ServiceCrMemoHeaderLoc."No. of E-Documents Sent" + 1;
      IF NOT ServiceCrMemoHeaderLoc."Electronic Document Sent" THEN
        ServiceCrMemoHeaderLoc."Electronic Document Sent" := TRUE;
      ServiceCrMemoHeaderLoc."Electronic Document Status" := ServiceCrMemoHeaderLoc."Electronic Document Status"::Sent;
      ServiceCrMemoHeaderLoc."Date/Time Sent" := FormatDateTime(CURRENTDATETIME);
      ServiceCrMemoHeaderLoc.MODIFY;

      MESSAGE(Text001,ServiceCrMemoHeader."No.");
    END;

    PROCEDURE CancelEServiceCrMemo@1020037(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      TempBlob@1020004 : Record 99008535;
      FileNameEdoc@1020002 : Text[1024];
      ResponseFileName@1020005 : Text[1024];
      OutStr@1020003 : OutStream;
      CancelDateTime@1020006 : Text[30];
    BEGIN
      IF ServiceCrMemoHeader."Source Code" = SourceCodeSetup."Deleted Document" THEN
        ERROR(Text007);

      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDoc.LoadXml := '<?xml version="1.0" encoding="UTF-8" ?> <CancelaCFD /> ';
      XMLCurrNode := XMLDoc.DocumentElement;
      AddElement(XMLCurrNode,'Cancelacion','','',XMLNewChild);
      XMLCurrNode := XMLNewChild;
      WITH ServiceCrMemoHeader DO BEGIN
        CancelDateTime := FormatDateTime(CURRENTDATETIME);
        AddAttribute(XMLDoc,XMLCurrNode,'Fecha',CancelDateTime);
        "Date/Time Canceled" := CancelDateTime;
        AddAttribute(XMLDoc,XMLCurrNode,'RfcEmisor',CompanyInfo."RFC No.");
        AddElement(XMLCurrNode,'Folios','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddElement(XMLCurrNode,'Folio','','',XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'FechaTimbrado',"Date/Time Stamped");
        AddAttribute(XMLDoc,XMLCurrNode,'UUID',"Fiscal Invoice Number PAC");
        "Original Document XML".CREATEOUTSTREAM(OutStr);
        XMLDoc.Save(OutStr);
        TempBlob.Blob := "Original Document XML";
      END;

      FileNameEdoc := FileManagement.ClientTempFileName('');
      FileNameEdoc := FileManagement.BLOBExport(TempBlob,FileNameEdoc,FALSE);
      ResponseFileName := InvokeMethod(FileNameEdoc,MethodType::Cancel);

      // For Test Mocking
      IF NOT GLSetup."Sim. Request Stamp" THEN BEGIN
        CLEAR(TempBlob);
        FileManagement.BLOBImport(TempBlob,ResponseFileName);
        ServiceCrMemoHeader."Signed Document XML" := TempBlob.Blob;
      END;
      ServiceCrMemoHeader.MODIFY;
      ProcessResponseEServiceCrMemo(ServiceCrMemoHeader,EDocAction::Cancel,0);
      ServiceCrMemoHeader.MODIFY;
    END;

    PROCEDURE ProcessResponseEServiceCrMemo@1020044(VAR ServCrMemoHeader@1020000 : Record 5994;Action@1020007 : Option;AmountInclVAT@1020010 : Decimal);
    VAR
      TempBlob@1020002 : Record 99008535;
      PACWebService@1020003 : Record 10000;
      OutStr@1020005 : OutStream;
      InStr@1020006 : InStream;
      NodeCount@1020001 : Integer;
      Counter@1020004 : Integer;
      QRCodeInput@1020009 : Text[95];
    BEGIN
      GetGLSetup;
      GetCompanyInfo;
      GetCustomer(ServCrMemoHeader."Bill-to Customer No.");

      // Process Response and Load back to header the Signed XML if you get one...
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      ServCrMemoHeader.CALCFIELDS("Signed Document XML");
      ServCrMemoHeader."Signed Document XML".CREATEINSTREAM(InStr);
      XMLDoc.Load(InStr);
      CLEAR(ServCrMemoHeader."Signed Document XML");
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');

      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;
      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('IdRespuesta');

      PACWebService.GET(GLSetup."PAC Code");
      ServCrMemoHeader."PAC Web Service Name" := PACWebService.Name;

      IF XMLCurrNode.Value <> '1' THEN BEGIN
        ServCrMemoHeader."Error Code" := XMLCurrNode.Value;
        XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('Descripcion');
        ServCrMemoHeader."Error Description" := XMLCurrNode.Value;
        CASE Action OF
          EDocAction::"Request Stamp":
            ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Request Error";
          EDocAction::Cancel:
            BEGIN
              ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Cancel Error";
              ServCrMemoHeader."Date/Time Canceled" := '';
            END;
        END;
        EXIT;
      END;

      ServCrMemoHeader."Error Code" := '';
      ServCrMemoHeader."Error Description" := '';
      IF Action = EDocAction::Cancel THEN BEGIN
        ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::Canceled;
        EXIT;
      END;
      XMLCurrNode := XMLDoc.SelectSingleNode('Resultado');
      XMLDOMNodeList := XMLCurrNode.ChildNodes;
      NodeCount := XMLDOMNodeList.Count;
      CLEAR(XMLDoc);
      XMLDoc := XMLDoc.XmlDocument;

      FOR Counter := 0 TO (NodeCount - 1) DO BEGIN
        XMLCurrNode := XMLDOMNodeList.Item(Counter);
        XMLDoc.AppendChild(XMLDoc.ImportNode(XMLCurrNode,TRUE));
      END;

      ServCrMemoHeader."Signed Document XML".CREATEOUTSTREAM(OutStr);
      XMLDoc.Save(OutStr);

      NamespaceManager := NamespaceManager.XmlNamespaceManager(XMLDoc.NameTable);
      NamespaceManager.AddNamespace('cfdi','http://www.sat.gob.mx/cfd/3');
      NamespaceManager.AddNamespace('tfd','http://www.sat.gob.mx/TimbreFiscalDigital');
      XMLCurrNode := XMLDoc.SelectSingleNode('cfdi:Comprobante/cfdi:Complemento/tfd:TimbreFiscalDigital',NamespaceManager);
      XMLDOMNamedNodeMap := XMLCurrNode.Attributes;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('FechaTimbrado');
      ServCrMemoHeader."Date/Time Stamped" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('UUID');
      ServCrMemoHeader."Fiscal Invoice Number PAC" := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('noCertificadoSAT');
      ServCrMemoHeader."Certificate Serial No." := XMLCurrNode.Value;

      XMLCurrNode := XMLDOMNamedNodeMap.GetNamedItem('selloSAT');

      CLEAR(OutStr);
      ServCrMemoHeader."Digital Stamp PAC".CREATEOUTSTREAM(OutStr);
      OutStr.WRITETEXT(XMLCurrNode.Value);
      // Certificate Serial
      ServCrMemoHeader."Electronic Document Status" := ServCrMemoHeader."Electronic Document Status"::"Stamp Received";

      // Create QRCode
      QRCodeInput := CreateQRCodeInput(CompanyInfo."RFC No.",Customer."RFC No.",AmountInclVAT,
          FORMAT(ServCrMemoHeader."Fiscal Invoice Number PAC"));
      CreateQRCode(QRCodeInput,TempBlob);
      ServCrMemoHeader."QR Code" := TempBlob.Blob;
    END;

    PROCEDURE CreateESalesInvOriginalStr@1020006(VAR SalesInvHeader@1020001 : Record 112) : Text[1024];
    VAR
      TempBlob@1020004 : Record 99008535;
      SalesInvoiceLine@1020010 : Record 113;
      BlobManagement@1020000 : Codeunit 10146;
      SubTotal@1020006 : Decimal;
      RetainAmt@1020005 : Decimal;
    BEGIN
      WITH SalesInvHeader DO BEGIN
        CALCFIELDS("Amount Including VAT");
        BlobManagement.Init;
        BlobManagement.Write('||' + '3.2' + '|');
        BlobManagement.Write("Date/Time First Req. Sent" + '|');
        BlobManagement.Write(FORMAT('ingreso') + '|');
        BlobManagement.Write(GetPmtTermCode("Payment Terms Code") + '|');

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to Customer No.");
        END;
        CalcSalesInvLineTotal(SalesInvoiceLine,SubTotal,RetainAmt,"No.");

        BlobManagement.Write(FormatAmount(SubTotal) + '|');
        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write(FormatAmount(1 / "Currency Factor") + '|');
          BlobManagement.Write("Currency Code" + '|');
        END;
        BlobManagement.Write(FormatAmount("Amount Including VAT") + '|');
        BlobManagement.Write(SalesInvHeader."Payment Method Code" + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');  // LugarExpedicion

        IF (CompanyInfo."Bank Account No." <> '') THEN
          BlobManagement.Write(RemoveInvalidChars(GetBankAccountLastFourChars(CompanyInfo."Bank Account No.")) + '|');    // NumCtaPago

        BlobManagement.Write(CompanyInfo."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Tax Scheme") + '|');

        BlobManagement.Write(Customer."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Name") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Address") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to County") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to City") + '|');
        BlobManagement.Write(RemoveInvalidChars(Customer."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Post Code") + '|');

        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.","No.");
        SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
        IF SalesInvoiceLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(FORMAT(SalesInvoiceLine.Quantity,0,9) + '|');
            BlobManagement.Write(SalesInvoiceLine."Unit of Measure Code" + '|');
            BlobManagement.Write(SalesInvoiceLine."No." + '|');
            BlobManagement.Write(RemoveInvalidChars(SalesInvoiceLine.Description) + '|');
            BlobManagement.Write(FormatAmount(SalesInvoiceLine."Unit Price") + '|');
            BlobManagement.Write(FormatAmount(SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price") + '|');
          UNTIL SalesInvoiceLine.NEXT = 0;

        SalesInvoiceLine.RESET;
        SalesInvoiceLine.SETRANGE("Document No.","No.");
        SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
        IF SalesInvoiceLine.FINDSET THEN
          REPEAT
            BlobManagement.Write('IVA' + '|');
            BlobManagement.Write(FormatAmount(SalesInvoiceLine."VAT %") + '|');
            BlobManagement.Write(FormatAmount(SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount) + '|');
          UNTIL SalesInvoiceLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(RetainAmt) + '||');

        BlobManagement.Get(TempBlob);
        "Original String" := TempBlob.Blob;
      END;
    END;

    PROCEDURE CreateESalesCrMemoOriginalStr@1020011(VAR SalesCrMemoHeader@1020000 : Record 114);
    VAR
      TempBlob@1020002 : Record 99008535;
      SalesCrMemoLine@1020001 : Record 115;
      BlobManagement@1020003 : Codeunit 10146;
      SubTotal@1020007 : Decimal;
      RetainAmt@1020006 : Decimal;
    BEGIN
      WITH SalesCrMemoHeader DO BEGIN
        CALCFIELDS("Amount Including VAT");
        BlobManagement.Init;
        BlobManagement.Write('||' + '3.2' + '|');
        BlobManagement.Write("Date/Time First Req. Sent" + '|');
        BlobManagement.Write(FORMAT('egreso') + '|');
        BlobManagement.Write(GetPmtTermCode("Payment Terms Code") + '|');

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to Customer No.");
        END;
        CalcSalesCrMemoLineTotal(SalesCrMemoLine,SubTotal,RetainAmt,"No.");

        BlobManagement.Write(FormatAmount(SubTotal) + '|');
        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write(FormatAmount(1 / "Currency Factor") + '|');
          BlobManagement.Write("Currency Code" + '|');
        END;
        BlobManagement.Write(FormatAmount("Amount Including VAT") + '|');
        BlobManagement.Write(SalesCrMemoHeader."Payment Method Code" + '|');  // metodoDePago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');  // LugarExpedicion

        IF (CompanyInfo."Bank Account No." <> '') THEN
          BlobManagement.Write(RemoveInvalidChars(GetBankAccountLastFourChars(CompanyInfo."Bank Account No.")) + '|');    // NumCtaPago

        BlobManagement.Write(CompanyInfo."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Tax Scheme") + '|');

        BlobManagement.Write(Customer."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Name") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Address") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to County") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to City") + '|');
        BlobManagement.Write(RemoveInvalidChars(Customer."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Post Code") + '|');

        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Document No.","No.");
        SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
        IF SalesCrMemoLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(FORMAT(SalesCrMemoLine.Quantity,0,9) + '|');
            BlobManagement.Write(SalesCrMemoLine."Unit of Measure Code" + '|');
            BlobManagement.Write(SalesCrMemoLine."No." + '|');
            BlobManagement.Write(RemoveInvalidChars(SalesCrMemoLine.Description) + '|');
            BlobManagement.Write(FormatAmount(SalesCrMemoLine."Unit Price") + '|');
            BlobManagement.Write(FormatAmount(SalesCrMemoLine.Quantity * SalesCrMemoLine."Unit Price") + '|');
          UNTIL SalesCrMemoLine.NEXT = 0;

        SalesCrMemoLine.RESET;
        SalesCrMemoLine.SETRANGE("Document No.","No.");
        SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
        IF SalesCrMemoLine.FINDSET THEN
          REPEAT
            BlobManagement.Write('IVA' + '|');
            BlobManagement.Write(FormatAmount(SalesCrMemoLine."Amount Including VAT" - SalesCrMemoLine.Amount) + '|');
          UNTIL SalesCrMemoLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(RetainAmt) + '||');

        BlobManagement.Get(TempBlob);
        "Original String" := TempBlob.Blob;
      END;
    END;

    PROCEDURE CreateEServiceInvOriginalStr@1020012(VAR ServiceInvHeader@1020000 : Record 5992);
    VAR
      TempBlob@1020002 : Record 99008535;
      ServiceInvoiceLine@1020001 : Record 5993;
      BlobManagement@1020003 : Codeunit 10146;
      SubTotal@1020007 : Decimal;
      RetainAmt@1020006 : Decimal;
      AmontInclVAT@1020005 : Decimal;
    BEGIN
      WITH ServiceInvHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||' + '3.2' + '|');
        BlobManagement.Write("Date/Time First Req. Sent" + '|');
        BlobManagement.Write(FORMAT('ingreso') + '|');
        BlobManagement.Write(GetPmtTermCode("Payment Terms Code") + '|');

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to Customer No.");
        END;
        CalcServiceInvLineTotal(ServiceInvoiceLine,SubTotal,RetainAmt,AmontInclVAT,"No.");

        BlobManagement.Write(FormatAmount(SubTotal) + '|');
        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write(FormatAmount(1 / "Currency Factor") + '|');
          BlobManagement.Write("Currency Code" + '|');
        END;
        BlobManagement.Write(FormatAmount(AmontInclVAT) + '|');
        BlobManagement.Write(ServiceInvHeader."Payment Method Code" + '|'); // metodoDePago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');  // LugarExpedicion

        IF (CompanyInfo."Bank Account No." <> '') THEN
          BlobManagement.Write(RemoveInvalidChars(GetBankAccountLastFourChars(CompanyInfo."Bank Account No.")) + '|');    // NumCtaPago

        BlobManagement.Write(CompanyInfo."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Tax Scheme") + '|');

        BlobManagement.Write(Customer."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Name") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Address") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to County") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to City") + '|');
        BlobManagement.Write(RemoveInvalidChars(Customer."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Post Code") + '|');

        ServiceInvoiceLine.RESET;
        ServiceInvoiceLine.SETRANGE("Document No.","No.");
        ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
        IF ServiceInvoiceLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(FORMAT(ServiceInvoiceLine.Quantity,0,9) + '|');
            BlobManagement.Write(ServiceInvoiceLine."Unit of Measure Code" + '|');
            BlobManagement.Write(ServiceInvoiceLine."No." + '|');
            BlobManagement.Write(RemoveInvalidChars(ServiceInvoiceLine.Description) + '|');
            BlobManagement.Write(FormatAmount(ServiceInvoiceLine."Unit Price") + '|');
            BlobManagement.Write(FormatAmount(ServiceInvoiceLine.Quantity * ServiceInvoiceLine."Unit Price") + '|');
          UNTIL ServiceInvoiceLine.NEXT = 0;

        ServiceInvoiceLine.RESET;
        ServiceInvoiceLine.SETRANGE("Document No.","No.");
        ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
        IF ServiceInvoiceLine.FINDSET THEN
          REPEAT
            BlobManagement.Write('IVA' + '|');
            BlobManagement.Write(FormatAmount(ServiceInvoiceLine."VAT %") + '|');
            BlobManagement.Write(FormatAmount(ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount) + '|');
          UNTIL ServiceInvoiceLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(RetainAmt) + '||');

        BlobManagement.Get(TempBlob);
        "Original String" := TempBlob.Blob;
      END;
    END;

    PROCEDURE CreateEServiceCrMemOriginalStr@1020014(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    VAR
      TempBlob@1020002 : Record 99008535;
      ServiceCrMemoLine@1020001 : Record 5995;
      BlobManagement@1020003 : Codeunit 10146;
      SubTotal@1020007 : Decimal;
      RetainAmt@1020006 : Decimal;
      AmontInclVAT@1020005 : Decimal;
    BEGIN
      WITH ServiceCrMemoHeader DO BEGIN
        BlobManagement.Init;
        BlobManagement.Write('||' + '3.2' + '|');
        BlobManagement.Write("Date/Time First Req. Sent" + '|');
        BlobManagement.Write(FORMAT('egreso') + '|');
        BlobManagement.Write(GetPmtTermCode("Payment Terms Code") + '|');

        IF NOT Export THEN BEGIN
          GetCompanyInfo;
          GetCustomer("Bill-to Customer No.");
        END;
        CalcServiceCrMemoLineTotal(ServiceCrMemoLine,SubTotal,RetainAmt,AmontInclVAT,"No.");

        BlobManagement.Write(FormatAmount(SubTotal) + '|');
        IF "Currency Code" <> '' THEN BEGIN
          BlobManagement.Write(FormatAmount(1 / "Currency Factor") + '|');
          BlobManagement.Write("Currency Code" + '|');
        END;
        BlobManagement.Write(FormatAmount(AmontInclVAT) + '|');
        BlobManagement.Write(ServiceCrMemoHeader."Payment Method Code" + '|'); // metodoDePago
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');  // LugarExpedicion
        IF (CompanyInfo."Bank Account No." <> '') THEN
          BlobManagement.Write(RemoveInvalidChars(GetBankAccountLastFourChars(CompanyInfo."Bank Account No.")) + '|');    // NumCtaPago

        BlobManagement.Write(CompanyInfo."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Name) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.Address) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.City) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo.County) + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Post Code") + '|');
        BlobManagement.Write(RemoveInvalidChars(CompanyInfo."Tax Scheme") + '|');

        BlobManagement.Write(Customer."RFC No." + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Name") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Address") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to County") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to City") + '|');
        BlobManagement.Write(RemoveInvalidChars(Customer."Country/Region Code") + '|');
        BlobManagement.Write(RemoveInvalidChars("Bill-to Post Code") + '|');

        ServiceCrMemoLine.RESET;
        ServiceCrMemoLine.SETRANGE("Document No.","No.");
        ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
        IF ServiceCrMemoLine.FINDSET THEN
          REPEAT
            BlobManagement.Write(FORMAT(ServiceCrMemoLine.Quantity,0,9) + '|');
            BlobManagement.Write(ServiceCrMemoLine."Unit of Measure Code" + '|');
            BlobManagement.Write(ServiceCrMemoLine."No." + '|');
            BlobManagement.Write(RemoveInvalidChars(ServiceCrMemoLine.Description) + '|');
            BlobManagement.Write(FormatAmount(ServiceCrMemoLine."Unit Price") + '|');
            BlobManagement.Write(FormatAmount(ServiceCrMemoLine.Quantity * ServiceCrMemoLine."Unit Price") + '|');
          UNTIL ServiceCrMemoLine.NEXT = 0;

        ServiceCrMemoLine.RESET;
        ServiceCrMemoLine.SETRANGE("Document No.","No.");
        ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
        IF ServiceCrMemoLine.FINDSET THEN
          REPEAT
            BlobManagement.Write('IVA' + '|');
            BlobManagement.Write(FormatAmount(ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount) + '|');
          UNTIL ServiceCrMemoLine.NEXT = 0;

        BlobManagement.Write(FormatAmount(RetainAmt) + '||');

        BlobManagement.Get(TempBlob);
        "Original String" := TempBlob.Blob;
      END;
    END;

    PROCEDURE CreateDigitalSignature@1020021(OriginalStringFileName@1020000 : Text[1024];VAR SignatureFileName@1020002 : Text[1024];VAR SerialNoOfCertificateUsed@1020005 : Text[250];VAR CertificateFileName@1020003 : Text[1024]);
    VAR
      EInvoiceObjectFactory@1020004 : Codeunit 10147;
      ISignatureProvider@1020001 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.SignatureProviders.ISignatureProvider" RUNONCLIENT;
    BEGIN
      GetGLSetup;
      IF NOT GLSetup."Sim. Signature" THEN BEGIN
        EInvoiceObjectFactory.GetSignatureProvider(ISignatureProvider);
        ISignatureProvider.SignData(OriginalStringFileName,SignatureFileName,
          GLSetup."SAT Certificate Thumbprint");
        CertificateFileName := ISignatureProvider.LastUsedCertificateFileName;
        SerialNoOfCertificateUsed := ISignatureProvider.LastUsedCertificateSerialNo;
      END ELSE BEGIN
        SignatureFileName := OriginalStringFileName;
        SerialNoOfCertificateUsed := '';
        CertificateFileName := '';
      END;
    END;

    PROCEDURE SaveAsPDFOnServer@1020017(DocumentHeaderRef@1020000 : RecordRef;ReportNo@1020001 : Integer) : Text;
    VAR
      SalesInvoiceHeader@1020002 : Record 112;
      SalesCrMemoHeader@1020003 : Record 114;
      ServiceInvoiceHeader@1020004 : Record 5992;
      ServiceCrMemoHeader@1020005 : Record 5994;
      DestinationFilePath@1020006 : Text;
    BEGIN
      DestinationFilePath := FileManagement.GetDirectoryName(FileManagement.ServerTempFileName(''));
      DestinationFilePath := DELCHR(DestinationFilePath,'>','\');
      DestinationFilePath += '\';
      CASE DocumentHeaderRef.NUMBER OF
        DATABASE::"Sales Invoice Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(SalesInvoiceHeader);
            SalesInvoiceHeader.SETRECFILTER;
            DestinationFilePath += SalesInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesInvoiceHeader);
          END;
        DATABASE::"Sales Cr.Memo Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(SalesCrMemoHeader);
            SalesCrMemoHeader.SETRECFILTER;
            DestinationFilePath += SalesCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,SalesCrMemoHeader);
          END;
        DATABASE::"Service Invoice Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(ServiceInvoiceHeader);
            ServiceInvoiceHeader.SETRECFILTER;
            DestinationFilePath += ServiceInvoiceHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceInvoiceHeader);
          END;
        DATABASE::"Service Cr.Memo Header":
          BEGIN
            DocumentHeaderRef.SETTABLE(ServiceCrMemoHeader);
            ServiceCrMemoHeader.SETRECFILTER;
            DestinationFilePath += ServiceCrMemoHeader."No." + '.pdf';
            REPORT.SAVEASPDF(ReportNo,DestinationFilePath,ServiceCrMemoHeader);
          END;
      END;
      EXIT(DestinationFilePath);
    END;

    PROCEDURE SendEmail@1020008(SendToAddress@1020001 : Text[1024];Subject@1020007 : Text[200];MessageBody@1020008 : Text[1024];FilePathEDoc@1020000 : Text[1024];PDFFilePath@1020002 : Text[1024];SendPDF@1020003 : Boolean;XMLInstream@1170000000 : InStream);
    VAR
      SMTPMail@1020005 : Codeunit 400;
      SendOK@1020004 : Boolean;
    BEGIN
      GetGLSetup;
      IF GLSetup."Sim. Send" THEN
        EXIT;

      SMTPMail.CreateMessage(CompanyInfo.Name,CompanyInfo."E-Mail",SendToAddress,Subject,MessageBody,TRUE);

      SMTPMail.AddAttachmentStream(XMLInstream,FilePathEDoc);
      IF SendPDF THEN
        SMTPMail.AddAttachment(PDFFilePath);

      SendOK := SMTPMail.TrySend;

      IF SendPDF THEN
        DeleteServerFile(PDFFilePath);

      IF NOT SendOK THEN
        ERROR(STRSUBSTNO(Text016,SMTPMail.GetLastSendMailErrorText));
    END;

    LOCAL PROCEDURE WriteCompanyInfo@1020035();
    BEGIN
      WITH CompanyInfo DO BEGIN
        // Emisor
        AddElementCFDI(XMLCurrNode,'Emisor','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'rfc',"RFC No.");
        AddAttribute(XMLDoc,XMLCurrNode,'nombre',Name);

        // Emisor->DomicilioFiscal
        AddElementCFDI(XMLCurrNode,'DomicilioFiscal','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'calle',Address);
        AddAttribute(XMLDoc,XMLCurrNode,'colonia',County);
        AddAttribute(XMLDoc,XMLCurrNode,'localidad',City);
        AddAttribute(XMLDoc,XMLCurrNode,'municipio',City);
        AddAttribute(XMLDoc,XMLCurrNode,'estado',County);
        AddAttribute(XMLDoc,XMLCurrNode,'pais',"Country/Region Code");
        AddAttribute(XMLDoc,XMLCurrNode,'codigoPostal',"Post Code");

        // Emisor->ExpedidoEn
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'ExpedidoEn','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'calle',Address);
        AddAttribute(XMLDoc,XMLCurrNode,'colonia',County);
        AddAttribute(XMLDoc,XMLCurrNode,'localidad',City);
        AddAttribute(XMLDoc,XMLCurrNode,'estado',County);
        AddAttribute(XMLDoc,XMLCurrNode,'pais',"Country/Region Code");
        AddAttribute(XMLDoc,XMLCurrNode,'codigoPostal',"Post Code");

        // PM 3.2 RegimenFiscal
        XMLCurrNode := XMLCurrNode.ParentNode;
        AddElementCFDI(XMLCurrNode,'RegimenFiscal','',DocNameSpace,XMLNewChild);
        XMLCurrNode := XMLNewChild;
        AddAttribute(XMLDoc,XMLCurrNode,'Regimen',CompanyInfo."Tax Scheme");
      END;
    END;

    LOCAL PROCEDURE InitXML@1020010();
    BEGIN
      // Create instance
      IF ISNULL(XMLDoc) THEN
        XMLDoc := XMLDoc.XmlDocument;

      // Root element
      DocNameSpace := 'http://www.sat.gob.mx/cfd/3';
      XMLDoc.LoadXml := '<?xml version="1.0" encoding="UTF-8" ?> ' +
        '<cfdi:Comprobante xmlns:cfdi="http://www.sat.gob.mx/cfd/3" xmlns="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" ' +
        'xsi:schemaLocation="http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv32.xsd"></cfdi:Comprobante>';

      XMLCurrNode := XMLDoc.DocumentElement;
    END;

    LOCAL PROCEDURE AddElementCFDI@1000010(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text[250];NodeText@1000002 : Text[250];NameSpace@1000001 : Text[250];VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NodeName := 'cfdi:' + NodeName;
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddElement@1020039(VAR XMLNode@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";NodeName@1000003 : Text[250];NodeText@1000002 : Text[250];NameSpace@1000001 : Text[250];VAR CreatedXMLNode@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode") : Boolean;
    VAR
      NewChildNode@1000005 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";
    BEGIN
      NewChildNode := XMLNode.OwnerDocument.CreateNode('element',NodeName,NameSpace);
      IF ISNULL(NewChildNode) THEN
        EXIT(FALSE);

      IF NodeText <> '' THEN
        NewChildNode.Value := RemoveInvalidChars(NodeText);
      XMLNode.AppendChild(NewChildNode);
      CreatedXMLNode := NewChildNode;
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddAttribute@1000009(VAR XMLDomDocParam@1000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlDocument";VAR XMLDomNode@1000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNode";AttribName@1000002 : Text[250];AttribValue@1000003 : Text[250]) : Boolean;
    VAR
      XMLDomAttribute@1000004 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlAttribute";
    BEGIN
      XMLDomAttribute := XMLDomDocParam.CreateAttribute(AttribName);
      IF ISNULL(XMLDomAttribute) THEN
        EXIT(FALSE);

      IF AttribValue <> '' THEN BEGIN
        XMLDomAttribute.Value := RemoveInvalidChars(AttribValue);
        XMLDomNode.Attributes.SetNamedItem(XMLDomAttribute);
      END;
      CLEAR(XMLDomAttribute);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE AddBigTextAttribute@1020024(VAR XMLDomElement@1000001 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlElement";AttribName@1000002 : Text[250];AttribValue@1000003 : BigText) : Boolean;
    VAR
      XMLDomText@1020003 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlText";
      ReturnLength@1020000 : Integer;
      TempText@1020001 : Text[1024];
      Position@1020002 : Integer;
    BEGIN
      XMLDomElement.SetAttribute(AttribName,'');
      IF ISNULL(XMLDomElement) THEN
        EXIT(FALSE);

      XMLDomText := XMLDomElement.SelectSingleNode('@' + AttribName).FirstChild;

      Position := 1;
      REPEAT
        TempText := '';
        ReturnLength := AttribValue.GETSUBTEXT(TempText,Position,1024);
        XMLDomText.AppendData(TempText);
        Position := Position + ReturnLength;
      UNTIL (ReturnLength <= 0);

      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GetPmtTermCode@1020025(PmtTermCode@1020000 : Code[10]) PmtTermText : Text[30];
    BEGIN
      IF PmtTermCode <> '' THEN
        PmtTermText := 'Parcialidad 1 de ' + PmtTermCode
      ELSE
        PmtTermText := 'Pago en una sola exhibicion';
    END;

    PROCEDURE FormatAmount@1000017(InAmount@1000000 : Decimal) : Text[30];
    BEGIN
      EXIT(FORMAT(ABS(InAmount),0,9));
    END;

    PROCEDURE RemoveInvalidChars@1020005(PassedStr@1020000 : Text[1024]) : Text[1024];
    BEGIN
      PassedStr := DELCHR(PassedStr,'=','|');
      PassedStr := RemoveExtraWhiteSpaces(PassedStr);
      EXIT(PassedStr);
    END;

    LOCAL PROCEDURE GetReportNo@1020016(VAR ReportSelection@1020000 : Record 77) : Integer;
    BEGIN
      ReportSelection.SETFILTER("Report ID",'<>0');
      IF ReportSelection.FINDFIRST THEN
        EXIT(ReportSelection."Report ID");
      EXIT(0);
    END;

    LOCAL PROCEDURE FormatDateTime@1020040(DateTime@1020000 : DateTime) : Text[30];
    BEGIN
      EXIT(FORMAT(DateTime,0,'<Year4>-<Month,2>-<Day,2>T<Hours24,2>:<Minutes,2>:<Seconds,2>'));
    END;

    LOCAL PROCEDURE FormatAsDateTime@1020007(DocDate@1020000 : Date;DocTime@1020001 : Time) : Text[30];
    BEGIN
      EXIT(FormatDateTime(CREATEDATETIME(DocDate,DocTime)));
    END;

    PROCEDURE GetGLSetup@1020009();
    BEGIN
      GLSetup.GET;
      GLSetup.TESTFIELD("SAT Certificate Thumbprint");
    END;

    LOCAL PROCEDURE GetCompanyInfo@1020015();
    BEGIN
      CompanyInfo.GET;
      CompanyInfo.TESTFIELD(Name);
      CompanyInfo.TESTFIELD("RFC No.");
      CompanyInfo.TESTFIELD(Address);
      CompanyInfo.TESTFIELD(City);
      CompanyInfo.TESTFIELD("Country/Region Code");
      CompanyInfo.TESTFIELD("Post Code");
      CompanyInfo.TESTFIELD("E-Mail");
      CompanyInfo.TESTFIELD("Tax Scheme");
    END;

    LOCAL PROCEDURE GetCustomer@1020020(CustomerNo@1020000 : Code[20]);
    BEGIN
      Customer.GET(CustomerNo);
      Customer.TESTFIELD("RFC No.");
      Customer.TESTFIELD("Country/Region Code");
    END;

    PROCEDURE GetBankAccountLastFourChars@1310079(BankAccountNo@1310000 : Text[30]) : Text[4];
    BEGIN
      BankAccountNo := DELCHR(BankAccountNo,'=',' ');
      EXIT(COPYSTR(BankAccountNo,STRLEN(BankAccountNo)-3))
    END;

    PROCEDURE CalcSalesInvLineTotal@1020019(VAR SalesInvoiceLine@1020000 : Record 113;VAR SubTotal@1020002 : Decimal;VAR RetainAmt@1020001 : Decimal;DocumentNo@1020003 : Code[20]);
    BEGIN
      SalesInvoiceLine.RESET;
      SalesInvoiceLine.SETRANGE("Document No.",DocumentNo);
      SalesInvoiceLine.SETFILTER(Type,'<>%1',SalesInvoiceLine.Type::" ");
      IF SalesInvoiceLine.FINDSET THEN
        REPEAT
          SalesInvoiceLine.TESTFIELD(Description);
          SubTotal := SubTotal + (SalesInvoiceLine.Quantity * SalesInvoiceLine."Unit Price");
          RetainAmt := RetainAmt + (SalesInvoiceLine."Amount Including VAT" - SalesInvoiceLine.Amount);
        UNTIL SalesInvoiceLine.NEXT = 0;
    END;

    PROCEDURE CalcSalesCrMemoLineTotal@1020022(VAR SalesCrMemoLine@1020002 : Record 115;VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;DocumentNo@1020003 : Code[20]);
    BEGIN
      SalesCrMemoLine.RESET;
      SalesCrMemoLine.SETRANGE("Document No.",DocumentNo);
      SalesCrMemoLine.SETFILTER(Type,'<>%1',SalesCrMemoLine.Type::" ");
      IF SalesCrMemoLine.FINDSET THEN
        REPEAT
          SalesCrMemoLine.TESTFIELD(Description);
          SubTotal := SubTotal + (SalesCrMemoLine.Quantity * SalesCrMemoLine."Unit Price");
          RetainAmt := RetainAmt + (SalesCrMemoLine."Amount Including VAT" - SalesCrMemoLine.Amount);
        UNTIL SalesCrMemoLine.NEXT = 0;
    END;

    PROCEDURE CalcServiceInvLineTotal@1020026(VAR ServiceInvoiceLine@1020002 : Record 5993;VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;VAR AmontInclVAT@1020004 : Decimal;DocumentNo@1020003 : Code[20]);
    BEGIN
      ServiceInvoiceLine.RESET;
      ServiceInvoiceLine.SETRANGE("Document No.",DocumentNo);
      ServiceInvoiceLine.SETFILTER(Type,'<>%1',ServiceInvoiceLine.Type::" ");
      IF ServiceInvoiceLine.FINDSET THEN
        REPEAT
          ServiceInvoiceLine.TESTFIELD(Description);
          SubTotal := SubTotal + (ServiceInvoiceLine.Quantity * ServiceInvoiceLine."Unit Price");
          RetainAmt := RetainAmt + (ServiceInvoiceLine."Amount Including VAT" - ServiceInvoiceLine.Amount);
          AmontInclVAT := AmontInclVAT + ServiceInvoiceLine."Amount Including VAT";
        UNTIL ServiceInvoiceLine.NEXT = 0;
    END;

    PROCEDURE CalcServiceCrMemoLineTotal@1020023(VAR ServiceCrMemoLine@1020002 : Record 5995;VAR SubTotal@1020001 : Decimal;VAR RetainAmt@1020000 : Decimal;VAR AmontInclVAT@1020004 : Decimal;DocumentNo@1020003 : Code[20]);
    BEGIN
      ServiceCrMemoLine.RESET;
      ServiceCrMemoLine.SETRANGE("Document No.",DocumentNo);
      ServiceCrMemoLine.SETFILTER(Type,'<>%1',ServiceCrMemoLine.Type::" ");
      IF ServiceCrMemoLine.FINDSET THEN
        REPEAT
          ServiceCrMemoLine.TESTFIELD(Description);
          SubTotal := SubTotal + (ServiceCrMemoLine.Quantity * ServiceCrMemoLine."Unit Price");
          RetainAmt := RetainAmt + (ServiceCrMemoLine."Amount Including VAT" - ServiceCrMemoLine.Amount);
          AmontInclVAT := AmontInclVAT + ServiceCrMemoLine."Amount Including VAT";
        UNTIL ServiceCrMemoLine.NEXT = 0;
    END;

    PROCEDURE RemoveExtraWhiteSpaces@1020018(StrParam@1020000 : Text[1024]) StrReturn : Text[1024];
    VAR
      Cntr1@1020001 : Integer;
      Cntr2@1020002 : Integer;
      WhiteSpaceFound@1020003 : Boolean;
    BEGIN
      StrParam := DELCHR(StrParam,'<>',' ');
      WhiteSpaceFound := FALSE;
      Cntr2 := 1;
      FOR Cntr1 := 1 TO STRLEN(StrParam) DO BEGIN
        IF StrParam[Cntr1] <> ' ' THEN BEGIN
          WhiteSpaceFound := FALSE;
          StrReturn[Cntr2] := StrParam[Cntr1];
          Cntr2 += 1;
        END ELSE BEGIN
          IF NOT WhiteSpaceFound THEN BEGIN
            WhiteSpaceFound := TRUE;
            StrReturn[Cntr2] := StrParam[Cntr1];
            Cntr2 += 1;
          END;
        END;
      END;
    END;

    LOCAL PROCEDURE InvokeMethod@1020036(RequestFileName@1020001 : Text[1024];MethodType@1020004 : 'Request Stamp,Cancel') ResponseFileName : Text[1024];
    VAR
      PACWebService@1020002 : Record 10000;
      PACWebServiceDetail@1020000 : Record 10001;
      EInvoiceObjectFactory@1020005 : Codeunit 10147;
      IWebServiceInvoker@1020003 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.WebServiceInvokers.IWebServiceInvoker" RUNONCLIENT;
    BEGIN
      GetGLSetup;
      IF GLSetup."Sim. Request Stamp" THEN BEGIN
        ResponseFileName := RequestFileName;
        EXIT;
      END;
      IF GLSetup."PAC Environment" = GLSetup."PAC Environment"::Disabled THEN
        ERROR(Text014,GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION,GLSetup."PAC Environment");

      EInvoiceObjectFactory.GetWebServiceInvoker(IWebServiceInvoker);
      IWebServiceInvoker.AddParameters(RequestFileName);

      PACWebService.GET(GLSetup."PAC Code");

      IF PACWebService."Certificate Thumbprint" = '' THEN
        ERROR(Text012,PACWebService.FIELDCAPTION("Certificate Thumbprint"),PACWebService.TABLECAPTION,GLSetup.TABLECAPTION);

      CASE MethodType OF
        MethodType::"Request Stamp":
          BEGIN
            IF NOT PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::"Request Stamp")THEN
              BEGIN
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::"Request Stamp";
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            END;
            IWebServiceInvoker.AddParameters(FALSE);
          END;
        MethodType::Cancel:
          BEGIN
            IF NOT PACWebServiceDetail.GET(GLSetup."PAC Code",GLSetup."PAC Environment",PACWebServiceDetail.Type::Cancel) THEN
              BEGIN
              PACWebServiceDetail.Type := PACWebServiceDetail.Type::Cancel;
              ERROR(Text009,PACWebServiceDetail.Type,GLSetup.FIELDCAPTION("PAC Code"),
                GLSetup.FIELDCAPTION("PAC Environment"),GLSetup.TABLECAPTION);
            END;
          END;
      END;

      ResponseFileName := IWebServiceInvoker.InvokeMethod(PACWebServiceDetail.Address,
          PACWebServiceDetail."Method Name",PACWebService."Certificate Thumbprint");
    END;

    LOCAL PROCEDURE GetQRCode@1020038(QRCodeInput@1020001 : Text[95]) QRCodeFileName : Text[1024];
    VAR
      EInvoiceObjectFactory@1020002 : Codeunit 10147;
      IBarCodeProvider@1020000 : DotNet "'Microsoft.Dynamics.Nav.MX, Version=7.1.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35'.Microsoft.Dynamics.Nav.MX.BarcodeProviders.IBarcodeProvider" RUNONCLIENT;
    BEGIN
      EInvoiceObjectFactory.GetBarCodeProvider(IBarCodeProvider);
      QRCodeFileName := IBarCodeProvider.GetBarcode(QRCodeInput);
    END;

    LOCAL PROCEDURE CreateQRCodeInput@1020046(IssuerRFC@1020000 : Text[30];CustomerRFC@1020001 : Text[30];Amount@1020002 : Decimal;UUID@1020003 : Text[50]) QRCodeInput : Text[95];
    BEGIN
      QRCodeInput :=
        '?re=' +
        COPYSTR(IssuerRFC,1,13) +
        '&rr=' +
        COPYSTR(CustomerRFC,1,13) +
        '&tt=' +
        CONVERTSTR(FORMAT(Amount,0,'<Integer,10><Filler Character,0><Decimals,7>'),',','.') +
        '&id=' +
        COPYSTR(FORMAT(UUID),1,36);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesInv@1020049(VAR SalesInvoiceHeader@1020000 : Record 112);
    BEGIN
      IF SalesInvoiceHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT;

      SalesInvoiceHeader."Date/Time First Req. Sent" := FormatAsDateTime(SalesInvoiceHeader."Document Date",TIME);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqSalesCr@1020050(VAR SalesCrMemoHeader@1020000 : Record 114);
    BEGIN
      IF SalesCrMemoHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT;

      SalesCrMemoHeader."Date/Time First Req. Sent" := FormatAsDateTime(SalesCrMemoHeader."Document Date",TIME);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServInv@1020051(VAR ServiceInvoiceHeader@1020000 : Record 5992);
    BEGIN
      IF ServiceInvoiceHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT;

      ServiceInvoiceHeader."Date/Time First Req. Sent" := FormatAsDateTime(ServiceInvoiceHeader."Document Date",TIME);
    END;

    LOCAL PROCEDURE GetDateTimeOfFirstReqServCr@1020052(VAR ServiceCrMemoHeader@1020000 : Record 5994);
    BEGIN
      IF ServiceCrMemoHeader."Date/Time First Req. Sent" <> '' THEN
        EXIT;

      ServiceCrMemoHeader."Date/Time First Req. Sent" := FormatAsDateTime(ServiceCrMemoHeader."Document Date",TIME);
    END;

    LOCAL PROCEDURE DeleteServerFile@1020047(ServerFileName@1020000 : Text);
    BEGIN
      IF ERASE(ServerFileName) THEN;
    END;

    LOCAL PROCEDURE CreateQRCode@1020089(QRCodeInput@1020047 : Text[95];VAR TempBLOB@1020048 : Record 99008535);
    VAR
      QRCodeFileName@1020049 : Text[1024];
    BEGIN
      CLEAR(TempBLOB);
      QRCodeFileName := GetQRCode(QRCodeInput);
      UploadFileBLOBImportandDeleteServerFile(TempBLOB,QRCodeFileName);
    END;

    PROCEDURE UploadFileBLOBImportandDeleteServerFile@1020098(VAR TempBlob@1020048 : Record 99008535;FileName@1020049 : Text[1024]);
    BEGIN
      FileName := FileManagement.UploadFileSilent(FileName);
      FileManagement.BLOBImportFromServerFile(TempBlob,FileName);
      DeleteServerFile(FileName);
    END;

    EVENT XMLDoc@1020014::NodeInserting@93(sender@1170000001 : Variant;e@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDoc@1020014::NodeInserted@94(sender@1170000001 : Variant;e@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDoc@1020014::NodeRemoving@95(sender@1170000001 : Variant;e@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDoc@1020014::NodeRemoved@96(sender@1170000001 : Variant;e@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDoc@1020014::NodeChanging@97(sender@1170000001 : Variant;e@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    EVENT XMLDoc@1020014::NodeChanged@98(sender@1170000001 : Variant;e@1170000000 : DotNet "'System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089'.System.Xml.XmlNodeChangedEventArgs");
    BEGIN
    END;

    BEGIN
    END.
  }
}

