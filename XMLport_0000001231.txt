OBJECT XMLport 1231 Export Generic Fixed Width
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Export Generic Fixed Width;
               ESM=Exportar ancho fijo gen‚rico;
               FRC=Exporter g‚n‚rique - largeur fixe;
               ENC=Export Generic Fixed Width];
    Direction=Export;
    TextEncoding=WINDOWS;
    OnInitXMLport=BEGIN
                    Window.OPEN(ProgressMsg);
                    currXMLport.FIELDDELIMITER('');
                    currXMLport.FIELDSEPARATOR('');
                  END;

    OnPreXMLport=BEGIN
                   InitializeGlobals;
                 END;

    OnPostXMLport=BEGIN
                    IF ErrorText <> '' THEN
                      ERROR(ErrorText);

                    Window.CLOSE;

                    IF PostingExch.GET(PostExchEntryNo) THEN
                      IF PostingExchDef.GET(PostingExch."Posting Exch. Def Code") THEN
                        currXMLport.FILENAME := PostingExchDef.Name + '.txt';
                  END;

    Format=Variable Text;
    UseRequestPage=No;
  }
  ELEMENTS
  {
    { [{C19D763B-C1F1-473D-8D3E-3640AD129D95}];  ;root                ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{125F3B85-5B53-4F67-9434-589A04D6DCA1}];1 ;PostExchField       ;Element ;Table   ;
                                                  SourceTable=Table1221 }

    { [{A64C65BE-4E70-436F-9680-A7C77EC03315}];2 ;ColumnX             ;Element ;Text    ;
                                                  DataType=Text;
                                                  MinOccurs=Zero;
                                                  Unbound=Yes;
                                                  Export::OnBeforePassVariable=BEGIN
                                                                                 IF QuitLoop THEN
                                                                                   currXMLport.BREAKUNBOUND;

                                                                                 IF "Posting Exch. Field"."Line No." <> LastLineNo THEN BEGIN
                                                                                   IF "Posting Exch. Field"."Line No." <> LastLineNo + 1 THEN
                                                                                     ErrorText += LinesNotSequentialErr
                                                                                   ELSE BEGIN
                                                                                     LastLineNo := "Posting Exch. Field"."Line No.";
                                                                                     PrevColumnNo := 0;
                                                                                     "Posting Exch. Field".NEXT(-1);
                                                                                     Window.UPDATE(1,LastLineNo);
                                                                                   END;
                                                                                   currXMLport.BREAKUNBOUND;
                                                                                 END;

                                                                                 CheckColumnSequence;
                                                                                 ColumnX := "Posting Exch. Field".Value;

                                                                                 IF "Posting Exch. Field".NEXT = 0 THEN
                                                                                   QuitLoop := TRUE;
                                                                               END;
                                                                                }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      PostingExchDef@1064 : Record 1222;
      PostingExch@1063 : Record 1220;
      Window@1000 : Dialog;
      ErrorText@1005 : Text;
      PostExchEntryNo@1062 : Integer;
      LastLineNo@1065 : Integer;
      PrevColumnNo@1003 : Integer;
      QuitLoop@1001 : Boolean;
      ColumnsNotSequentialErr@1002 : TextConst 'ENU=The data to be exported is not structured correctly. The columns in the dataset must be sequential.;ESM=Los datos que se van a exportan no est n correctamente estructurados. Las columnas del conjunto de datos deben ser secuenciales.;FRC=Les donn‚es … exporter ne sont pas correctement structur‚es. Les colonnes dans l''ensemble de donn‚es doivent ˆtre s‚quentielles.;ENC=The data to be exported is not structured correctly. The columns in the dataset must be sequential.';
      LinesNotSequentialErr@1004 : TextConst 'ENU=The data to be exported is not structured correctly. The lines in the dataset must be sequential.;ESM=Los datos que se van a exportan no est n correctamente estructurados. Las l¡neas del conjunto de datos deben ser secuenciales.;FRC=Les donn‚es … exporter ne sont pas correctement structur‚es. Les lignes dans l''ensemble de donn‚es doivent ˆtre s‚quentielles.;ENC=The data to be exported is not structured correctly. The lines in the dataset must be sequential.';
      ProgressMsg@1060 : TextConst 'ENU=Exporting line no. #1######;ESM=Exportando la l¡nea n.§ #1######;FRC=Exportation de la ligne nø #1######;ENC=Exporting line no. #1######';

    LOCAL PROCEDURE InitializeGlobals@11();
    BEGIN
      PostExchEntryNo := "Posting Exch. Field".GETRANGEMIN("Posting Exch. No.");
      LastLineNo := 1;
      PrevColumnNo := 0;
      QuitLoop := FALSE;
    END;

    PROCEDURE CheckColumnSequence@3();
    BEGIN
      IF "Posting Exch. Field"."Column No." <> PrevColumnNo + 1 THEN BEGIN
        ErrorText += ColumnsNotSequentialErr;
        currXMLport.BREAKUNBOUND;
      END;

      PrevColumnNo := "Posting Exch. Field"."Column No.";
    END;

    BEGIN
    END.
  }
}

