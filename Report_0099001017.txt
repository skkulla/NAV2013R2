OBJECT Report 99001017 Calculate Plan - Plan. Wksh.
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Calculate Plan - Plan. Wksh.;
               ESM=Calcular plan - Hoja planif.;
               FRC=Calculer plan - F. planification;
               ENC=Calculate Plan - Plan. Wksh.];
    ProcessingOnly=Yes;
  }
  DATASET
  {
    { 8129;    ;DataItem;                    ;
               DataItemTable=Table27;
               DataItemTableView=SORTING(Low-Level Code)
                                 WHERE(Type=CONST(Inventory));
               OnPreDataItem=BEGIN
                               OpenWindow;
                               CLEAR(CalcItemPlan);
                               CalcItemPlan.SetTemplAndWorksheet(CurrTemplateName,CurrWorksheetName,NetChange);
                               CalcItemPlan.SetParm(UseForecast,ExcludeForecastBefore,Item);
                               CalcItemPlan.Initialize(FromDate,ToDate,MPS,MRP,RespectPlanningParm);

                               SetAtStartPosition := TRUE;

                               ReqLine.SETRANGE("Worksheet Template Name",CurrTemplateName);
                               ReqLine.SETRANGE("Journal Batch Name",CurrWorksheetName);
                               PlanningErrorLog.SETRANGE("Worksheet Template Name",CurrTemplateName);
                               PlanningErrorLog.SETRANGE("Journal Batch Name",CurrWorksheetName);
                               IF PlanningErrorLog.FINDFIRST AND ReqLine.FINDFIRST THEN
                                 SetAtStartPosition := NOT CONFIRM(Text009);

                               PlanningErrorLog.DELETEALL;
                               CLEARLASTERROR;

                               COMMIT;
                             END;

               OnAfterGetRecord=VAR
                                  ErrorText@1000 : Text[1000];
                                BEGIN
                                  UpdateWindow;

                                  IF NOT SetAtStartPosition THEN BEGIN
                                    SetAtStartPosition := TRUE;
                                    GET(PlanningErrorLog."Item No.");
                                    FIND('=<>');
                                  END;

                                  IF NoPlanningResiliency THEN BEGIN
                                    CalcItemPlan.RUN(Item);
                                    CounterOK := CounterOK + 1;
                                  END ELSE BEGIN
                                    CalcItemPlan.SetResiliencyOn;
                                    IF CalcItemPlan.RUN(Item) THEN
                                      CounterOK := CounterOK + 1
                                    ELSE
                                      IF NOT CalcItemPlan.GetResiliencyError(PlanningErrorLog) THEN BEGIN
                                        ErrorText := COPYSTR(GETLASTERRORTEXT,1,MAXSTRLEN(ErrorText));
                                        IF ErrorText = '' THEN
                                          ErrorText := Text011
                                        ELSE
                                          CLEARLASTERROR;
                                        PlanningErrorLog.SetJnlBatch(CurrTemplateName,CurrWorksheetName,"No.");
                                        PlanningErrorLog.SetError(
                                          COPYSTR(STRSUBSTNO(ErrorText,TABLECAPTION,"No."),1,250),0,GETPOSITION);
                                      END;
                                  END;

                                  COMMIT;
                                END;

               OnPostDataItem=BEGIN
                                CalcItemPlan.Finalize;
                                CloseWindow;
                              END;

               ReqFilterFields=No.,Search Description,Location Filter }

  }
  REQUESTPAGE
  {
    PROPERTIES
    {
      SaveValues=Yes;
      OnOpenPage=BEGIN
                   MfgSetup.GET;
                   UseForecast := MfgSetup."Current Production Forecast";
                   IF MfgSetup."Combined MPS/MRP Calculation" THEN BEGIN
                     MPS := TRUE;
                     MRP := TRUE;
                   END ELSE
                     MRP := NOT MPS;
                 END;

    }
    CONTROLS
    {
      { 1900000001;0;Container;
                  ContainerType=ContentArea }

      { 1900000002;1;Group  ;
                  CaptionML=[ENU=Options;
                             ESM=Opciones;
                             FRC=Options;
                             ENC=Options] }

      { 10  ;2   ;Group     ;
                  CaptionML=[ENU=Calculate;
                             ESM=Calcular;
                             FRC=Calculer;
                             ENC=Calculate] }

      { 11  ;3   ;Field     ;
                  Name=MPS;
                  CaptionML=[ENU=MPS;
                             ESM=MPS;
                             FRC=PDP;
                             ENC=MPS];
                  SourceExpr=MPS;
                  OnValidate=BEGIN
                               IF NOT MfgSetup."Combined MPS/MRP Calculation" THEN
                                 MRP := NOT MPS
                               ELSE
                                 IF NOT MPS THEN
                                   MRP := TRUE;
                             END;
                              }

      { 12  ;3   ;Field     ;
                  Name=MRP;
                  CaptionML=[ENU=MRP;
                             ESM=MRP;
                             FRC=PBM;
                             ENC=MRP];
                  SourceExpr=MRP;
                  OnValidate=BEGIN
                               IF NOT MfgSetup."Combined MPS/MRP Calculation" THEN
                                 MPS := NOT MRP
                               ELSE
                                 IF NOT MRP THEN
                                   MPS := TRUE;
                             END;
                              }

      { 1   ;2   ;Field     ;
                  Name=StartingDate;
                  CaptionML=[ENU=Starting Date;
                             ESM=Fecha inicial;
                             FRC=Date d‚but;
                             ENC=Starting Date];
                  SourceExpr=FromDate }

      { 3   ;2   ;Field     ;
                  Name=EndingDate;
                  CaptionML=[ENU=Ending Date;
                             ESM=Fecha final;
                             FRC=Date fin;
                             ENC=Ending Date];
                  SourceExpr=ToDate }

      { 16  ;2   ;Field     ;
                  CaptionML=[ENU=Stop and Show First Error;
                             ESM=Parar y mostrar primer error;
                             FRC=Arrˆter et montrer la premiŠre erreur;
                             ENC=Stop and Show First Error];
                  SourceExpr=NoPlanningResiliency }

      { 5   ;2   ;Field     ;
                  CaptionML=[ENU=Use Forecast;
                             ESM=Previsi¢n de uso;
                             FRC=Utiliser la pr‚vision;
                             ENC=Use Forecast];
                  SourceExpr=UseForecast;
                  TableRelation="Production Forecast Name".Name }

      { 7   ;2   ;Field     ;
                  CaptionML=[ENU=Exclude Forecast Before;
                             ESM=No incluir en la previsi¢n fechas anteriores al;
                             FRC=Exclure la pr‚vision ant‚rieure …;
                             ENC=Exclude Forecast Before];
                  SourceExpr=ExcludeForecastBefore }

      { 2   ;2   ;Field     ;
                  CaptionML=[ENU=Respect Planning Parameters for Exception Warnings;
                             ESM=Respetar par metros de planificaci¢n para las advertencias de excepci¢n;
                             FRC=Respecter les paramŠtres de planification pour les avertissements d'exception;
                             ENC=Respect Planning Parameters for Exception Warnings];
                  SourceExpr=RespectPlanningParm }

    }
  }
  LABELS
  {
  }
  CODE
  {
    VAR
      MfgSetup@1004 : Record 99000765;
      PlanningErrorLog@1018 : Record 5430;
      ReqLine@1021 : Record 246;
      CalcItemPlan@1005 : Codeunit 5431;
      Window@1006 : Dialog;
      Counter@1023 : Integer;
      CounterOK@1017 : Integer;
      NoOfRecords@1012 : Integer;
      NetChange@1009 : Boolean;
      MPS@1003 : Boolean;
      MRP@1002 : Boolean;
      NoPlanningResiliency@1022 : Boolean;
      SetAtStartPosition@1001 : Boolean;
      FromDate@1011 : Date;
      ToDate@1010 : Date;
      ExcludeForecastBefore@1015 : Date;
      Text005@1014 : TextConst 'ENU=Calculating the plan...\\;ESM=Calculando el plan...\\;FRC=Calculer le plan...\\;ENC=Calculating the plan...\\';
      Text006@1025 : TextConst 'ENU=Progress;ESM=Progreso;FRC=Progression;ENC=Progress';
      Text007@1024 : TextConst 'ENU=Not all items were planned. A total of %1 items were not planned.;ESM=No se planificaron todos los productos. Faltan %1 productos.;FRC=Les articles n''ont pas tous ‚t‚ planifi‚s. Un total de %1 articles n''ont pas ‚t‚ planifi‚s.;ENC=Not all items were planned. A total of %1 items were not planned.';
      Text008@1020 : TextConst 'ENU=There is nothing to plan.;ESM=No hay nada que planificar.;FRC=Il n''y a rien … planifier.;ENC=There is nothing to plan.';
      CurrTemplateName@1008 : Code[10];
      CurrWorksheetName@1007 : Code[10];
      UseForecast@1013 : Code[10];
      Text009@1016 : TextConst 'ENU=The last time this batch was run, errors were encountered.\Do you want the batch to continue from where it left off?;ESM=La £ltima vez que se ejecut¢ este proceso se detectaron errores.\¨Desea continuar el proceso desde donde se interrumpi¢?;FRC=Des erreurs se sont produites lors de la derniŠre ex‚cution de ce traitement en lot.\Voulez-vous que celui-ci continue … partir du moment o— il s''est interrompuÿ?;ENC=The last time this batch was run, errors were encountered.\Do you want the batch to continue from where it left off?';
      Text011@1000 : TextConst 'ENU=An unidentified error occurred while planning %1 %2. Recalculate the plan with the option "Stop and Show Error".;ESM=Error no identificado al planificar %1 %2. Vuelva a calcular el plan con la opci¢n "Parar y mostrar error".;FRC=Une erreur non identifi‚e s''est produite pendant la planification %1 %2. Recalculer la planification avec l''option "Arrˆter et montrer erreur".;ENC=An unidentified error occurred while planning %1 %2. Recalculate the plan with the option "Stop and Show Error".';
      RespectPlanningParm@1026 : Boolean;

    PROCEDURE SetTemplAndWorksheet@2(TemplateName@1000 : Code[10];WorksheetName@1001 : Code[10];Regenerative@1002 : Boolean);
    BEGIN
      CurrTemplateName := TemplateName;
      CurrWorksheetName := WorksheetName;
      NetChange := NOT Regenerative;
    END;

    PROCEDURE InitializeRequest@3(NewFromDate@1001 : Date;NewToDate@1000 : Date;NewRespectPlanningParm@1002 : Boolean);
    BEGIN
      FromDate := NewFromDate;
      ToDate := NewToDate;
      RespectPlanningParm := NewRespectPlanningParm;

      MfgSetup.GET;
      IF MfgSetup."Combined MPS/MRP Calculation" THEN BEGIN
        MPS := TRUE;
        MRP := TRUE;
      END ELSE
        MRP := NOT MPS;
    END;

    PROCEDURE OpenWindow@5();
    VAR
      Indentation@1000 : Integer;
    BEGIN
      Counter := 0;
      CounterOK := 0;
      NoOfRecords := Item.COUNT;
      Indentation := STRLEN(Text006);
      IF STRLEN(Item.FIELDCAPTION("Low-Level Code")) > Indentation THEN
        Indentation := STRLEN(Item.FIELDCAPTION("Low-Level Code"));
      IF STRLEN(Item.FIELDCAPTION("No.")) > Indentation THEN
        Indentation := STRLEN(Item.FIELDCAPTION("No."));

      Window.OPEN(
        Text005 +
        PADSTR(Text006,Indentation) + ' @1@@@@@@@@@@@@@\' +
        PADSTR(Item.FIELDCAPTION("Low-Level Code"),Indentation) + ' #2######\' +
        PADSTR(Item.FIELDCAPTION("No."),Indentation) + ' #3##########');
    END;

    PROCEDURE UpdateWindow@6();
    BEGIN
      Counter := Counter + 1;
      Window.UPDATE(1,ROUND(Counter / NoOfRecords * 10000,1));
      Window.UPDATE(2,Item."Low-Level Code");
      Window.UPDATE(3,Item."No.");
    END;

    PROCEDURE CloseWindow@1();
    BEGIN
      Window.CLOSE;

      IF Counter = 0 THEN
        MESSAGE(Text008);
      IF Counter > CounterOK THEN BEGIN
        MESSAGE(Text007,Counter - CounterOK);
        IF PlanningErrorLog.FINDFIRST THEN
          PAGE.RUNMODAL(0,PlanningErrorLog);
      END;
    END;

    BEGIN
    END.
  }
  RDLDATA
  {
  }
}

