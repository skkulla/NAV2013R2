OBJECT XMLport 1220 Posting Exch. Import - CSV
{
  OBJECT-PROPERTIES
  {
    Date=12/02/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10.00.35800;
  }
  PROPERTIES
  {
    CaptionML=[ENU=Posting Exch. Import - CSV;
               ESM=Importaci¢n intercambio registro (CSV);
               FRC=Importation ‚chge report - CSV;
               ENC=Posting Exch. Import - CSV];
    Direction=Import;
    TextEncoding=WINDOWS;
    OnPreXMLport=BEGIN
                   InitializeGlobals;
                 END;

    OnPostXMLport=BEGIN
                    IF (NOT LastLineIsFooter AND SkipLine) OR HeaderWarning THEN
                      ERROR(LastLineIsHeaderErr);
                  END;

    Format=Variable Text;
    UseRequestPage=No;
  }
  ELEMENTS
  {
    { [{C19D763B-C1F1-473D-8D3E-3640AD129D95}];  ;root                ;Element ;Text    ;
                                                  MinOccurs=Zero }

    { [{125F3B85-5B53-4F67-9434-589A04D6DCA1}];1 ;PostingExchDocument ;Element ;Table   ;
                                                  SourceTable=Table1220;
                                                  AutoSave=No;
                                                  Import::OnAfterInitRecord=BEGIN
                                                                              FileLineNo += 1;
                                                                            END;

                                                  Import::OnBeforeInsertRecord=BEGIN
                                                                                 ValidateHeaderTag;
                                                                               END;
                                                                                }

    { [{2BC29851-1DC4-4867-977A-21611634FDFC}];2 ;col1                ;Element ;Text    ;
                                                  VariableName=col1;
                                                  MinOccurs=Zero;
                                                  MaxOccurs=Once;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  ColumnNo := 1;
                                                                                  CheckLineType;
                                                                                  InsertColumn(ColumnNo,col1);
                                                                                END;
                                                                                 }

    { [{A64C65BE-4E70-436F-9680-A7C77EC03315}];2 ;colx                ;Element ;Text    ;
                                                  VariableName=colx;
                                                  MinOccurs=Zero;
                                                  Unbound=Yes;
                                                  Import::OnAfterAssignVariable=BEGIN
                                                                                  ColumnNo += 1;
                                                                                  InsertColumn(ColumnNo,colx);
                                                                                END;
                                                                                 }

  }
  EVENTS
  {
  }
  REQUESTPAGE
  {
    PROPERTIES
    {
    }
    CONTROLS
    {
    }
  }
  CODE
  {
    VAR
      PostExchField@1021 : Record 1221;
      PostExchEntryNo@1020 : Integer;
      ImportedLineNo@1019 : Integer;
      FileLineNo@1018 : Integer;
      HeaderLines@1017 : Integer;
      HeaderLineCount@1016 : Integer;
      ColumnNo@1022 : Integer;
      HeaderTag@1015 : Text;
      FooterTag@1014 : Text;
      SkipLine@1013 : Boolean;
      LastLineIsFooter@1012 : Boolean;
      HeaderWarning@1011 : Boolean;
      LineType@1010 : 'Unknown,Header,Footer,Data';
      CurrentLineType@1009 : Option;
      FullHeaderLine@1008 : Text;
      LastLineIsHeaderErr@1001 : TextConst 'ENU=The imported file contains unexpected formatting. One or more lines may be missing in the file.;ESM=El archivo importado presenta un formato inesperado. Es posible que falten una o m s l¡neas en el archivo.;FRC=Le fichier import‚ contient une mise en forme impr‚vue. Une ou plusieurs lignes sont peut-ˆtre manquantes dans le fichier.;ENC=The imported file contains unexpected formatting. One or more lines may be missing in the file.';
      WrongHeaderErr@1000 : TextConst 'ENU=The imported file contains unexpected formatting. One or more headers are incorrect.;ESM=El archivo importado presenta un formato inesperado. Uno o m s encabezados son incorrectos.;FRC=Le fichier import‚ contient une mise en forme impr‚vue. Un ou plusieurs en-tˆtes sont incorrects.;ENC=The imported file contains unexpected formatting. One or more headers are incorrect.';

    LOCAL PROCEDURE InitializeGlobals@11();
    VAR
      PostingExchDef@1000 : Record 1222;
    BEGIN
      PostExchEntryNo := "Posting Exch.".GETRANGEMIN("Entry No.");
      "Posting Exch.".GET(PostExchEntryNo);
      PostingExchDef.GET("Posting Exch."."Posting Exch. Def Code");
      HeaderLines := PostingExchDef."Header Lines";
      ImportedLineNo := 0;
      FileLineNo := 0;
      HeaderTag := PostingExchDef."Header Tag";
      FooterTag := PostingExchDef."Footer Tag";
      HeaderLineCount := 0;
      CurrentLineType := LineType::Unknown;
      FullHeaderLine := '';
      currXMLport.FIELDSEPARATOR(PostingExchDef.ColumnSeparatorChar);
      CASE PostingExchDef."File Encoding" OF
        PostingExchDef."File Encoding"::"MS-DOS":
          currXMLport.TEXTENCODING(TEXTENCODING::MSDos);
        PostingExchDef."File Encoding"::"UTF-8":
          currXMLport.TEXTENCODING(TEXTENCODING::UTF8);
        PostingExchDef."File Encoding"::"UTF-16":
          currXMLport.TEXTENCODING(TEXTENCODING::UTF16);
        PostingExchDef."File Encoding"::WINDOWS:
          currXMLport.TEXTENCODING(TEXTENCODING::Windows);
      END;
    END;

    LOCAL PROCEDURE CheckLineType@4();
    BEGIN
      IdentifyLineType;
      ValidateNonDataLine;
      TrackNonDataLines;
      SkipLine := CurrentLineType <> LineType::Data;

      IF NOT SkipLine THEN BEGIN
        HeaderLineCount := 0;
        ImportedLineNo += 1;
      END;
    END;

    LOCAL PROCEDURE IdentifyLineType@3();
    BEGIN
      CASE TRUE OF
        FileLineNo <= HeaderLines:
          CurrentLineType := LineType::Header;
        (HeaderTag <> '') AND (STRLEN(col1) <= HeaderTagLength) AND (STRPOS(HeaderTag,col1) = 1):
          CurrentLineType := LineType::Header;
        (FooterTag <> '') AND (STRLEN(col1) <= FooterTagLength) AND (STRPOS(FooterTag,col1) = 1):
          CurrentLineType := LineType::Footer;
        ELSE
          CurrentLineType := LineType::Data;
      END;
    END;

    LOCAL PROCEDURE ValidateNonDataLine@6();
    BEGIN
      IF CurrentLineType = LineType::Header THEN BEGIN
        IF (HeaderTag <> '') AND (STRLEN(col1) <= HeaderTagLength) AND (STRPOS(HeaderTag,col1) = 0) THEN
          ERROR(WrongHeaderErr);
      END;
    END;

    LOCAL PROCEDURE TrackNonDataLines@5();
    BEGIN
      CASE CurrentLineType OF
        LineType::Header:
          BEGIN
            HeaderLineCount += 1;
            IF NOT HeaderWarning AND (HeaderLines > 0) AND (HeaderLineCount > HeaderLines) THEN
              HeaderWarning := TRUE;
          END;
        LineType::Data:
          IF (HeaderLines > 0) AND (HeaderLineCount > 0) AND (HeaderLineCount < HeaderLines) THEN
            HeaderWarning := TRUE;
        LineType::Footer:
          LastLineIsFooter := TRUE;
      END;
    END;

    LOCAL PROCEDURE HeaderTagLength@8() : Integer;
    VAR
      PostExchDef@1000 : Record 1222;
    BEGIN
      EXIT(GetFieldLength(DATABASE::"Posting Exch. Def",PostExchDef.FIELDNO("Header Tag")));
    END;

    LOCAL PROCEDURE FooterTagLength@9() : Integer;
    VAR
      PostExchDef@1000 : Record 1222;
    BEGIN
      EXIT(GetFieldLength(DATABASE::"Posting Exch. Def",PostExchDef.FIELDNO("Footer Tag")));
    END;

    LOCAL PROCEDURE GetFieldLength@7(TableNo@1000 : Integer;FieldNo@1001 : Integer) : Integer;
    VAR
      RecRef@1003 : RecordRef;
      FieldRef@1004 : FieldRef;
    BEGIN
      RecRef.OPEN(TableNo);
      FieldRef := RecRef.FIELD(FieldNo);
      EXIT(FieldRef.LENGTH);
    END;

    LOCAL PROCEDURE InsertColumn@2(columnNumber@1000 : Integer;VAR columnValue@1001 : Text);
    VAR
      savedColumnValue@1002 : Text;
    BEGIN
      savedColumnValue := columnValue;
      columnValue := '';
      IF SkipLine THEN BEGIN
        IF (CurrentLineType = LineType::Header) AND (HeaderTag <> '') THEN
          FullHeaderLine += savedColumnValue + ';';
        EXIT;
      END;
      IF savedColumnValue <> '' THEN BEGIN
        PostExchField.INIT;
        PostExchField.VALIDATE("Posting Exch. No.",PostExchEntryNo);
        PostExchField.VALIDATE("Line No.",ImportedLineNo);
        PostExchField.VALIDATE("Column No.",columnNumber);
        PostExchField.VALIDATE(Value,COPYSTR(savedColumnValue,1,MAXSTRLEN(PostExchField.Value)));
        PostExchField.INSERT(TRUE);
      END;
    END;

    LOCAL PROCEDURE ValidateHeaderTag@10();
    BEGIN
      IF SkipLine AND (CurrentLineType = LineType::Header) AND (HeaderTag <> '') THEN
        IF STRPOS(FullHeaderLine,HeaderTag) = 0 THEN
          ERROR(WrongHeaderErr);
    END;

    BEGIN
    END.
  }
}

