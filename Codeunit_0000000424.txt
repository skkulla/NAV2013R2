OBJECT Codeunit 424 Export Analysis View
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVW17.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1012 : TextConst 'ENU=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.;ESM=S¢lo puede exportar Importes reales e Importes presupuestados .\Por favor, cambie la opci¢n en el campo Muestra.;FRC=Vous pouvez uniquement exporter les montants rÇalisÇs et budgÇtÇs.\Modifiez l''option dans le champ Afficher.;ENC=You can only export Actual amounts and Budgeted amounts.\Please change the option in the Show field.';
      Text001@1036 : TextConst 'ENU=This combination is not valid. You cannot export Debit and Credit amounts for Budgeted amounts.\Please enter Amount in the Show Amount field.;ESM=La combinaci¢n no es v†lida. No puede exportar importes al Debe y al Haber para Importes presupuestados.\Por favor, introduzca Importe en el campo Muestra importe.;FRC=Cette combinaison n''est pas valide. Vous ne pouvez pas exporter des montants dÇbit et crÇdit pour les montants budgÇtÇs.\Entrez un montant dans le champ Afficher montant.;ENC=This combination is not valid. You cannot export Debit and Credit amounts for Budgeted amounts.\Please enter Amount in the Show Amount field.';
      Text002@1023 : TextConst 'ENU=General Info._;ESM=Info general._;FRC=Infos gÇnÇrales_;ENC=General Info._';
      Text003@1020 : TextConst 'ENU=None;ESM=Ninguno;FRC=Aucun;ENC=None';
      Text004@1033 : TextConst 'ENU=Day;ESM=D°a;FRC=Jour;ENC=Day';
      Text005@1024 : TextConst 'ENU=Week;ESM=Semana;FRC=Semaine;ENC=Week';
      Text006@1014 : TextConst 'ENU=Month;ESM=Mes;FRC=Mois;ENC=Month';
      Text007@1025 : TextConst 'ENU=Quarter;ESM=Trimestre;FRC=Trimestre;ENC=Quarter';
      Text008@1026 : TextConst 'ENU=Year;ESM=A§o;FRC=AnnÇe;ENC=Year';
      Text009@1027 : TextConst 'ENU=Accounting Period;ESM=Periodo contable;FRC=PÇriode comptable;ENC=Accounting Period';
      Text011@1029 : TextConst 'ENU="Analysis by Dimension ";ESM="An†lisis por dimensiones ";FRC=Analyse par dimension;ENC="Analysis by Dimension "';
      Text012@1030 : TextConst 'ENU=Amount Type;ESM=Tipo importe;FRC=Type montant;ENC=Amount Type';
      Text013@1031 : TextConst 'ENU=Net Change;ESM=Saldo periodo;FRC=Variation nette;ENC=Net Change';
      Text014@1032 : TextConst 'ENU=Balance at Date;ESM=Saldo a la fecha;FRC=Solde en date du;ENC=Balance at Date';
      Text015@1018 : TextConst 'ENU=Date Filter;ESM=Filtro fecha;FRC=Filtre date;ENC=Date Filter';
      Text016@1022 : TextConst 'ENU=Budget Filter;ESM=Filtro presupuesto;FRC=Filtre budget;ENC=Budget Filter';
      Text116@1114 : TextConst 'ENU=Cash Flow Forecast Filter;ESM=Filtro previsi¢n flujos efectivo;FRC=Filtre prÇvision de la trÇsorerie;ENC=Cash Flow Forecast Filter';
      Text017@1034 : TextConst 'ENU=Pivot Table_;ESM=Pivot Table_;FRC=Table pivot_;ENC=Pivot Table_';
      Text018@1017 : TextConst 'ENU=G/L Account;ESM=Cuenta;FRC=Cpte du grand livre;ENC=G/L Account';
      Text118@1116 : TextConst 'ENU=Cash Flow Account;ESM=Cuenta flujos efectivo;FRC=Compte de trÇsorerie;ENC=Cash Flow Account';
      Text019@1035 : TextConst 'ENU=Period;ESM=Periodo;FRC=PÇriode;ENC=Period';
      Text020@1021 : TextConst 'ENU=Budgeted Amount;ESM=Importe pptdo.;FRC=Montant budgÇtÇ;ENC=Budgeted Amount';
      Text022@1043 : TextConst 'ENU=Level;ESM=Nivel;FRC=Niveau;ENC=Level';
      Text023@1040 : TextConst 'ENU=Analysis View Name;ESM=Nombre vista an†lisis;FRC=Nom vue d''analyse;ENC=Analysis View Name';
      Text024@1041 : TextConst 'ENU=Closing Entries;ESM=Movs. regularizaci¢n;FRC=êcritures de fermeture;ENC=Closing Entries';
      Text025@1045 : TextConst 'ENU=Included;ESM=Incluido;FRC=Inclus;ENC=Included';
      Text026@1046 : TextConst 'ENU=Excluded;ESM=Excluido;FRC=Exclu;ENC=Excluded';
      Text027@1047 : TextConst 'ENU="All amounts shown in ";ESM="Todos los importes en ";FRC="Tous les montants affichÇs dans ";ENC="All amounts shown in "';
      Text028@1048 : TextConst 'ENU=Show Opposite Sign;ESM=Muestra signo opuesto;FRC=Afficher le signe opposÇ;ENC=Show Opposite Sign';
      Text029@1049 : TextConst 'ENU=Yes;ESM=S°;FRC=Oui;ENC=Yes';
      Text030@1050 : TextConst 'ENU=No;ESM=No;FRC=Non;ENC=No';
      Text031@1051 : TextConst 'ENU=Data_;ESM=Data_;FRC=DonnÇes_;ENC=Data_';
      Text032@1000 : TextConst 'ENU=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.;ESM=En los filtros hay m†s de %1 filas. Excel admite %1 filas como m†ximo.\Especifique otro filtro o seleccione un valor superior %2 en %3.;FRC=Il y a plus de %1 rangÇes Ö l''intÇrieur des filtres. Excel ne permet que %1 rangÇes.\Vous pouvez limiter les filtres ou choisir une valeur %2 plus ÇlevÇe sur le %3.;ENC=There are more than %1 rows within the filters. Excel only allows up to %1 rows.\You can either narrow the filters or choose a higher %2 value on the %3.';
      xlApp@1011 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024500-0000-0000-C000-000000000046}:Unknown Automation Server.Application";
      xlWorkSheet@1009 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlWorkSheet2@1008 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      xlWorkSheet3@1038 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020820-0000-0000-C000-000000000046}:Unknown Automation Server.Worksheet";
      TempDimValue2@1042 : TEMPORARY Record 349;
      TempDimValue3@1037 : TEMPORARY Record 349;
      TempGLAcc2@1052 : TEMPORARY Record 15;
      TempGLAcc3@1007 : TEMPORARY Record 15;
      TempCFAccount2@1136 : TEMPORARY Record 841;
      TempCFAccount3@1137 : TEMPORARY Record 841;
      BusUnit@1056 : Record 220;
      FileMgt@1003 : Codeunit 419;
      NoOfColumns@1001 : Integer;
      MaxLevel@1039 : Integer;
      MaxLevelDim@1019 : ARRAY [4] OF Integer;
      CharsNavision@1016 : Text[250];
      CharsWindows@1015 : Text[250];
      FileName@1013 : Text;
      HasBusinessUnits@1055 : Boolean;
      AccNoPrefix@1058 : Code[10];
      Text038@1059 : TextConst 'ENU=The exported data result exceeds a system limit.\Limit the selection by clearing the Show Column Name field.;ESM=El resultado de datos exportados supera un l°mite de sistema.\Limite la selecci¢n seleccionando el campo Muestra nombre columna.;FRC=Le rÇsultat des donnÇes exportÇes dÇpasse la limite du systäme.\Limitez la sÇlection en dÇsactivant le champ Afficher nom colonne.;ENC=The exported data result exceeds a system limit.\Limit the selection by clearing the Show Column Name field.';
      GLAccountSource@1002 : Boolean;
      ExcelVersion@1004 : Text[30];

    PROCEDURE ExportData@3(VAR Rec@1000 : Record 365;Line@1002 : Text[30];Column@1005 : Text[30];Sign@1006 : Boolean;ShowInAddCurr@1008 : Boolean;AmountField@1009 : Option;PeriodType@1010 : Option;ShowName@1011 : Boolean;DateFilter@1013 : Code[1024];AccFilter@1004 : Code[250];BudgetFilter@1014 : Code[250];Dim1Filter@1015 : Code[250];Dim2Filter@1017 : Code[250];Dim3Filter@1018 : Code[250];Dim4Filter@1019 : Code[250];AmountType@1021 : Option;ClosingEntryFilter@1022 : Option;Show@1024 : Option;OtherFilter@1033 : Code[250]);
    VAR
      AnalysisViewFilter@1028 : Record 364;
      Currency@1026 : Record 4;
      GLSetup@1025 : Record 98;
      ExcelBuffer@1023 : TEMPORARY Record 370;
      AnalysisView@1001 : Record 363;
      xlPivotTable@1034 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020872-0000-0000-C000-000000000046}:Unknown Automation Server.PivotTable";
      xlPivotCache@1027 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{0002441C-0000-0000-C000-000000000046}:Unknown Automation Server.PivotCache";
      xlRange@1016 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";
      xlPivotField@1007 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020874-0000-0000-C000-000000000046}:Unknown Automation Server.PivotField";
      FormatString@1012 : Text[30];
      NoOfRows@1003 : Integer;
      RowNoCount@1020 : Integer;
      xlSheetName@1032 : Text[100];
      BusUnitFilter@1031 : Code[250];
      CashFlowFilter@1030 : Code[250];
    BEGIN
      GLAccountSource := Rec."Account Source" = Rec."Account Source"::"G/L Account";

      CheckCombination(Show,AmountField);

      BusUnitFilter := '';
      CashFlowFilter := '';

      SetOtherFilterToCorrectFilter(OtherFilter,BusUnitFilter,CashFlowFilter);

      CREATE(xlApp,TRUE,TRUE);
      InitCharTables;
      HasBusinessUnits := NOT BusUnit.ISEMPTY;
      WITH Rec DO BEGIN
        NoOfRows :=
          CreateFile(
            Rec,Sign,ShowInAddCurr,PeriodType - 1,ShowName,AccFilter,Dim1Filter,Dim2Filter,
            Dim3Filter,Dim4Filter,ClosingEntryFilter,DateFilter,BusUnitFilter,BudgetFilter,AmountType,CashFlowFilter);

        FileName := FileMgt.DownloadTempFile(FileName);
        xlApp.Workbooks.OpenText(FileName);
        xlWorkSheet := xlApp.ActiveSheet;
        xlSheetName := FORMAT(Text031) + "Analysis View Code";
        xlSheetName := CONVERTSTR(xlSheetName,' -+','___');
        xlWorkSheet.Name := xlSheetName;

        IF AccNoPrefix <> '' THEN BEGIN
          ExcelBuffer.VALIDATE("Column No.",NoOfColumns);
          xlRange := xlWorkSheet.Range('A2:' + ExcelBuffer.xlColID + FORMAT(NoOfRows + 1));
          xlRange.NumberFormat('@');
          xlRange.Replace(AccNoPrefix,'''');
        END;

        xlApp.ActiveWorkbook.Sheets.Add;
        xlWorkSheet3 := xlApp.ActiveSheet;
        xlWorkSheet3.Name := FORMAT(Text002) + CONVERTSTR("Analysis View Code",' -+','___');
        xlWorkSheet3.Range('A1').Value := AnalysisView.TABLECAPTION;
        xlWorkSheet3.Range('B2').Value := FIELDCAPTION("Analysis View Code");
        xlWorkSheet3.Range('C2').Value := "Analysis View Code";
        xlWorkSheet3.Range('B3').Value := FORMAT(Text023);
        AnalysisView.GET("Analysis View Code");
        xlWorkSheet3.Range('C3').Value := AnalysisView.Name;
        RowNoCount := 3;
        IF AnalysisView."Account Filter" <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Account Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AnalysisView."Account Filter";
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Date Compression");
        CASE AnalysisView."Date Compression" OF
          0:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text003);
          1:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text004);
          2:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text005);
          3:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text006);
          4:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text007);
          5:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text008);
          6:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text009);
        END;
        IF AnalysisView."Starting Date" <> 0D THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Starting Date");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(AnalysisView."Starting Date");
        END;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Last Date Updated");
        xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AnalysisView."Last Date Updated";
        AnalysisViewFilter.SETFILTER("Analysis View Code","Analysis View Code");
        IF AnalysisViewFilter.FIND('-') THEN
          REPEAT
            RowNoCount := RowNoCount + 1;
            xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisViewFilter."Dimension Code";
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AnalysisViewFilter."Dimension Value Filter";
          UNTIL AnalysisViewFilter.NEXT = 0;
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('A' + FORMAT(RowNoCount)).Value := FORMAT(Text011);
        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text012);
        CASE AmountType OF
          0:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text013);
          1:
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text014);
        END;
        IF DateFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text015);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := DateFilter;
        END;
        IF AccFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView.FIELDCAPTION("Account Filter");
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := AccFilter;
        END;
        IF BudgetFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text016);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := BudgetFilter;
        END;
        IF CashFlowFilter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text116);
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := CashFlowFilter;
        END;
        IF Dim1Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 1 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim1Filter;
        END;
        IF Dim2Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 2 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim2Filter;
        END;
        IF Dim3Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 3 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim3Filter;
        END;
        IF Dim4Filter <> '' THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := AnalysisView."Dimension 4 Code";
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := Dim4Filter;
        END;
        IF GLAccountSource THEN BEGIN
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text024);
          CASE ClosingEntryFilter OF
            0:
              xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text025);
            1:
              xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text026);
          END;
          RowNoCount := RowNoCount + 1;
          xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text027);
          GLSetup.GET;
          IF ShowInAddCurr THEN
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := GLSetup."Additional Reporting Currency"
          ELSE
            xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := GLSetup."LCY Code";
        END;

        RowNoCount := RowNoCount + 1;
        xlWorkSheet3.Range('B' + FORMAT(RowNoCount)).Value := FORMAT(Text028);
        IF Sign THEN
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text029)
        ELSE
          xlWorkSheet3.Range('C' + FORMAT(RowNoCount)).Value := FORMAT(Text030);

        ExcelBuffer.VALIDATE("Column No.",10 + NoOfColumns);
        xlPivotCache :=
          xlApp.ActiveWorkbook.PivotCaches.Add(1,STRSUBSTNO('%1!A1:%2%3',
              xlSheetName,ExcelBuffer.xlColID,NoOfRows + 1));

        xlPivotCache.CreatePivotTable('','PivotTable1');

        xlWorkSheet2 := xlApp.ActiveSheet;
        xlPivotTable := xlWorkSheet2.PivotTables('PivotTable1');
        xlWorkSheet2.Name := FORMAT(Text017) + CONVERTSTR("Analysis View Code",' -+','___');

        IF Line <> '' THEN
          CASE Line OF
            Text018, Text118:
              xlPivotField := xlPivotTable.PivotFields(GetPivotFieldAccountIndexValue(MaxLevel));
            Text019:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              END;
            BusUnit.TABLECAPTION:
              xlPivotField := xlPivotTable.PivotFields(BusUnit.TABLECAPTION);
            AnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            AnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            AnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
            AnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[4]));
          END;

        xlPivotField.Orientation := 1; // xlRowField
        xlPivotField.Position := 1;

        IF Column <> '' THEN
          CASE Column OF
            Text018, Text118:
              xlPivotField := xlPivotTable.PivotFields(GetPivotFieldAccountIndexValue(MaxLevel));
            Text019:
              CASE PeriodType OF
                0:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text004));
                1:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text005));
                2:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text006));
                3:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text007));
                4:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text008));
                5:
                  xlPivotField := xlPivotTable.PivotFields(FORMAT(Text009));
              END;
            BusUnit.TABLECAPTION:
              xlPivotField := xlPivotTable.PivotFields(BusUnit.TABLECAPTION);
            AnalysisView."Dimension 1 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[1]));
            AnalysisView."Dimension 2 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[2]));
            AnalysisView."Dimension 3 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[3]));
            AnalysisView."Dimension 4 Code":
              xlPivotField :=
                xlPivotTable.PivotFields(AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' +
                  FORMAT(MaxLevelDim[4]));
          END;
        xlPivotField.Orientation := 2; // xlColumnField
        xlPivotField.Position := 1;
        IF Show = 0 THEN
          CASE AmountField OF
            0:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION(Amount));
            1:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION("Debit Amount"));
            2:
              xlPivotField := xlPivotTable.PivotFields(FIELDCAPTION("Credit Amount"));
          END
        ELSE
          xlPivotField := xlPivotTable.PivotFields(FORMAT(Text020));

        xlPivotField.Orientation := 4; // xlDataField
        xlPivotField.Position := 1;
        xlPivotField."Function" := 0;// sum

        IF (AmountType = 1) AND (Column = Text019) OR (AmountType = 1) AND (Line = Text019) THEN BEGIN
          xlPivotField.Calculation := 5;
          CASE PeriodType OF
            0:
              xlPivotField.BaseField := FORMAT(Text004);
            1:
              xlPivotField.BaseField := FORMAT(Text005);
            2:
              xlPivotField.BaseField := FORMAT(Text006);
            3:
              xlPivotField.BaseField := FORMAT(Text007);
            4:
              xlPivotField.BaseField := FORMAT(Text008);
            5:
              xlPivotField.BaseField := FORMAT(Text009);
          END;
        END;

        GLSetup.GET;
        IF ShowInAddCurr AND Currency.GET(GLSetup."Additional Reporting Currency") THEN
          FormatString := DELCHR(FORMAT(ROUND(1000.01,Currency."Amount Rounding Precision"),0),'<',' ')
        ELSE
          FormatString := DELCHR(FORMAT(ROUND(1000.01,GLSetup."Amount Rounding Precision"),0),'<',' ');

        FormatString[1] := '#';
        FormatString[3] := '#';
        FormatString[4] := '#';
        IF STRLEN(FormatString) >= 8 THEN
          FormatString[8] := '0';
        xlPivotField.NumberFormat := FormatString; // '#.##0,00';

        xlPivotTable.SmallGrid := FALSE;
      END;

      xlApp.Visible := TRUE;
    END;

    LOCAL PROCEDURE CreateFile@1(VAR AnalysisViewEntry@1000 : Record 365;Sign@1009 : Boolean;ShowInAddCurr@1010 : Boolean;PeriodType@1014 : Option;ShowName@1018 : Boolean;AccFilter@1020 : Code[250];Dim1Filter@1025 : Code[250];Dim2Filter@1024 : Code[250];Dim3Filter@1023 : Code[250];Dim4Filter@1022 : Code[250];ClosingEntryFilter@1033 : Option;DateFilter@1011 : Code[1024];BusUnitFilter@1030 : Text[250];BudgetFilter@1045 : Code[250];AmountType@1046 : Option;CFFilter@1146 : Text[250]) : Integer;
    VAR
      AnalysisViewEntry2@1001 : Record 365;
      AnalysisViewEntry3@1037 : Record 365;
      AnalysisView@1002 : Record 363;
      AnalysisViewBudgetEntry@1031 : Record 366;
      AnalysisViewBudgetEntry2@1032 : Record 366;
      CurrExchRate@1036 : Record 330;
      GLSetup@1035 : Record 98;
      Currency@1017 : Record 4;
      BusUnit@1039 : Record 220;
      TextFile@1003 : File;
      Column@1019 : Text[100];
      Line@1004 : ARRAY [5] OF Text[1024];
      Line2@1038 : Text[1024];
      Tab@1005 : Text[1];
      StartDate@1028 : Date;
      EndDate@1013 : Date;
      MaxDate@1021 : Date;
      CurrExchDate@1027 : Date;
      NoOfRows@1008 : Integer;
      WeekNo@1029 : Integer;
      Year@1026 : Integer;
      SignValue@1007 : Integer;
      i@1012 : Integer;
      AddRepCurrAmount@1034 : Decimal;
      NoOfLeadingTabs@1040 : Integer;
    BEGIN
      TextFile.CREATETEMPFILE;
      FileName := TextFile.NAME + '.txt';
      TextFile.CLOSE;

      TextFile.CREATE(FileName);
      TextFile.TEXTMODE(TRUE);
      AnalysisViewEntry2.COPY(AnalysisViewEntry);
      AnalysisView.GET(AnalysisViewEntry2."Analysis View Code");
      PopulateTempAccountTable(AccFilter);

      FindDimLevel(AnalysisView."Dimension 1 Code",Dim1Filter,1);
      FindDimLevel(AnalysisView."Dimension 2 Code",Dim2Filter,2);
      FindDimLevel(AnalysisView."Dimension 3 Code",Dim3Filter,3);
      FindDimLevel(AnalysisView."Dimension 4 Code",Dim4Filter,4);

      Tab[1] := 9;
      SignValue := 1;
      IF Sign THEN
        SignValue := -1;

      NoOfRows := 0;
      WITH AnalysisViewEntry2 DO BEGIN
        FOR i := 0 TO MaxLevel DO BEGIN
          Line[1] := Line[1] + GetPivotFieldAccountIndexValue(i) + Tab;
          NoOfColumns := NoOfColumns + 1;
        END;
        IF HasBusinessUnits THEN BEGIN
          Line[1] := Line[1] + BusUnit.TABLECAPTION + Tab;
          NoOfColumns := NoOfColumns + 1;
        END;
        IF AnalysisView."Dimension 1 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[1] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 1 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF AnalysisView."Dimension 2 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[2] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 2 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF AnalysisView."Dimension 3 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[3] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 3 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;
        IF AnalysisView."Dimension 4 Code" <> '' THEN
          FOR i := 0 TO MaxLevelDim[4] DO BEGIN
            Line[1] := Line[1] + AnalysisView."Dimension 4 Code" + ' ' + FORMAT(Text022) + ' ' + FORMAT(i) + Tab;
            NoOfColumns := NoOfColumns + 1;
          END;

        Line[1] := Line[1] + Text004 + Tab + Text005 + Tab + Text006 + Tab + Text007 +
          Tab + Text008 + Tab + Text009 + Tab + FIELDCAPTION(Amount) + Tab +
          FIELDCAPTION("Debit Amount") + Tab + FIELDCAPTION("Credit Amount") + Tab + Text020;
        Line[1] := CONVERTSTR(Line[1],CharsNavision,CharsWindows);
        TextFile.WRITE(Line[1]);
        StartDate := "Posting Date";
        AnalysisViewEntry3.SETFILTER("Posting Date",DateFilter);
        IF (DateFilter <> '') AND (AmountType = 1) THEN BEGIN
          MaxDate := AnalysisViewEntry3.GETRANGEMAX("Posting Date");
          SETFILTER("Posting Date",'<=%1',MaxDate);
        END;
        IF CFFilter <> '' THEN
          SETFILTER("Cash Flow Forecast No.",CFFilter);

        IF FIND('-') THEN
          REPEAT
            IF (ClosingEntryFilter = 0) OR ("Posting Date" = NORMALDATE("Posting Date")) THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date"
              ELSE
                IF "Posting Date" <= StartDate THEN
                  StartDate := "Posting Date";

              CLEAR(Line);
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,AnalysisView);

              IF GLAccountSource THEN BEGIN
                IF TempGLAcc2.GET("Account No.") THEN
                  TempGLAcc2.MARK(TRUE);
                Line[1] := CONVERTSTR(FillOutGLAcc("Account No.",ShowName),CharsNavision,CharsWindows);
              END ELSE BEGIN
                IF TempCFAccount2.GET("Account No.") THEN
                  TempCFAccount2.MARK(TRUE);
                Line[1] := CONVERTSTR(FillOutCFAccount("Account No.",ShowName),CharsNavision,CharsWindows);
              END;

              IF HasBusinessUnits THEN
                Line[1] := Line[1] + CONVERTSTR(FillOutBusUnit("Business Unit Code",ShowName),CharsNavision,CharsWindows);
              IF AnalysisView."Dimension 1 Code" <> '' THEN
                Line[2] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 1 Value Code",AnalysisView."Dimension 1 Code",1,ShowName),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 2 Code" <> '' THEN
                Line[3] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 2 Value Code",AnalysisView."Dimension 2 Code",2,ShowName),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 3 Code" <> '' THEN
                Line[4] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 3 Value Code",AnalysisView."Dimension 3 Code",3,ShowName),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 4 Code" <> '' THEN
                Line[5] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 4 Value Code",AnalysisView."Dimension 4 Code",4,ShowName),
                    CharsNavision,CharsWindows);

              IF NOT ShowInAddCurr THEN
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                  FORMAT(Amount * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Debit Amount" * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Credit Amount" * SignValue,0,'<Standard Format,1>')
              ELSE
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                  FORMAT("Add.-Curr. Amount" * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Add.-Curr. Debit Amount" * SignValue,0,'<Standard Format,1>') + Tab +
                  FORMAT("Add.-Curr. Credit Amount" * SignValue,0,'<Standard Format,1>');

              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            END;
          UNTIL NEXT = 0;
      END;

      WITH AnalysisViewBudgetEntry2 DO BEGIN
        SETFILTER("Analysis View Code",AnalysisView.Code);
        SETFILTER("Posting Date",DateFilter);
        IF (DateFilter <> '') AND (AmountType = 1) THEN BEGIN
          MaxDate := GETRANGEMAX("Posting Date");
          SETFILTER("Posting Date",'<= %1',MaxDate);
        END;
        SETFILTER("G/L Account No.",AccFilter);
        SETFILTER("Business Unit Code",BusUnitFilter);
        SETFILTER("Budget Name",BudgetFilter);
        SETFILTER("Dimension 1 Value Code",Dim1Filter);
        SETFILTER("Dimension 2 Value Code",Dim2Filter);
        SETFILTER("Dimension 3 Value Code",Dim3Filter);
        SETFILTER("Dimension 4 Value Code",Dim4Filter);
        IF FIND('-') THEN
          REPEAT
            IF (ClosingEntryFilter = 1) OR ("Posting Date" = NORMALDATE("Posting Date")) THEN BEGIN
              IF "Posting Date" >= EndDate THEN
                EndDate := "Posting Date";
              IF ("Posting Date" <= StartDate) OR (StartDate = 0D) THEN
                StartDate := "Posting Date";

              CLEAR(Line);
              NoOfRows := NoOfRows + 1;
              CheckNoOfRows(NoOfRows,AnalysisView);

              IF TempGLAcc2.GET("G/L Account No.") THEN
                TempGLAcc2.MARK(TRUE);
              Line[1] := CONVERTSTR(FillOutGLAcc("G/L Account No.",ShowName),
                  CharsNavision,CharsWindows);
              IF HasBusinessUnits THEN
                Line[1] := Line[1] + CONVERTSTR(FillOutBusUnit("Business Unit Code",ShowName),CharsNavision,CharsWindows);
              IF AnalysisView."Dimension 1 Code" <> '' THEN
                Line[2] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 1 Value Code",AnalysisView."Dimension 1 Code",1,ShowName),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 2 Code" <> '' THEN
                Line[3] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 2 Value Code",AnalysisView."Dimension 2 Code",2,ShowName),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 3 Code" <> '' THEN
                Line[4] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 3 Value Code",AnalysisView."Dimension 3 Code",3,ShowName),
                    CharsNavision,CharsWindows);

              IF AnalysisView."Dimension 4 Code" <> '' THEN
                Line[5] :=
                  CONVERTSTR(
                    FillOutDim("Dimension 4 Value Code",AnalysisView."Dimension 4 Code",4,ShowName),
                    CharsNavision,CharsWindows);

              IF NOT ShowInAddCurr THEN BEGIN
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                  Tab + Tab + Tab + FORMAT(Amount * SignValue);
              END ELSE BEGIN
                IF AnalysisViewBudgetEntry.GETFILTER("Posting Date") = '' THEN
                  CurrExchDate := WORKDATE
                ELSE
                  CurrExchDate := AnalysisViewBudgetEntry.GETRANGEMIN("Posting Date");
                GLSetup.GET;
                IF ShowInAddCurr AND Currency.GET(GLSetup."Additional Reporting Currency") THEN
                  AddRepCurrAmount :=
                    ROUND(
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
                        CurrExchRate.ExchangeRate(
                          CurrExchDate,GLSetup."Additional Reporting Currency")) * SignValue,
                      Currency."Amount Rounding Precision")
                ELSE
                  AddRepCurrAmount :=
                    ROUND(
                      CurrExchRate.ExchangeAmtLCYToFCY(
                        CurrExchDate,GLSetup."Additional Reporting Currency",Amount,
                        CurrExchRate.ExchangeRate(
                          CurrExchDate,GLSetup."Additional Reporting Currency")) * SignValue,
                      GLSetup."Amount Rounding Precision");
                Line2 :=
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),-1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),0)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),1)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),2)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),3)) + Tab +
                  FORMAT(CalculatePeriodStart(NORMALDATE("Posting Date"),4)) + Tab +
                  Tab + Tab + Tab + FORMAT(AddRepCurrAmount);
              END;
              TextFile.WRITE(Line[1] + Line[2] + Line[3] + Line[4] + Line[5] + Line2);
            END;
          UNTIL NEXT = 0;
      END;

      Line2 := '';
      NoOfLeadingTabs := 0;
      IF GLAccountSource THEN BEGIN
        TempGLAcc2.SETRANGE("Account Type",TempGLAcc2."Account Type"::Posting);
        IF TempGLAcc2.FIND('-') THEN
          REPEAT
            IF NOT TempGLAcc2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutGLAcc(TempGLAcc2."No.",ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(Line2);
            END;
          UNTIL TempGLAcc2.NEXT = 0;
      END ELSE BEGIN
        TempCFAccount2.SETRANGE("Account Type",TempCFAccount2."Account Type"::Entry);
        IF TempCFAccount2.FIND('-') THEN
          ProcessMarkedTempCFAccountRec(NoOfRows,Line2,ShowName,TextFile);
      END;
      NoOfLeadingTabs := MaxLevel + 1;
      IF HasBusinessUnits THEN BEGIN
        IF BusUnit.FIND('-') THEN
          REPEAT
            IF NOT BusUnit.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutBusUnit(BusUnit.Code,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
            END;
          UNTIL BusUnit.NEXT = 0;
        NoOfLeadingTabs := NoOfLeadingTabs + 1;
      END;

      IF AnalysisView."Dimension 1 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim1Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 1 Code");
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 1 Code",1,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[1] + 1;

      IF AnalysisView."Dimension 2 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim2Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 2 Code");
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 2 Code",2,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[2] + 1;

      IF AnalysisView."Dimension 3 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim3Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 3 Code");
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 3 Code",3,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[3] + 1;

      IF AnalysisView."Dimension 4 Code" <> '' THEN BEGIN
        Column := Column + Tab;
        TempDimValue2.SETFILTER(Code,Dim4Filter);
        TempDimValue2.SETFILTER("Dimension Code",AnalysisView."Dimension 4 Code");
        TempDimValue2.SETRANGE("Dimension Value Type",TempDimValue2."Dimension Value Type"::Standard);
        IF TempDimValue2.FIND('-') THEN
          REPEAT
            IF NOT TempDimValue2.MARK THEN BEGIN
              NoOfRows := NoOfRows + 1;
              Line2 :=
                CONVERTSTR(
                  FillOutDim(TempDimValue2.Code,AnalysisView."Dimension 4 Code",4,ShowName),
                  CharsNavision,CharsWindows);
              TextFile.WRITE(GetDuplicateChars(NoOfLeadingTabs,Tab) + Line2);
            END;
          UNTIL TempDimValue2.NEXT = 0;
      END;
      NoOfLeadingTabs := NoOfLeadingTabs + MaxLevelDim[4] + 1;

      WeekNo := DATE2DWY(StartDate,2);
      Year := DATE2DWY(StartDate,3);
      StartDate := DWY2DATE(1,WeekNo,Year);
      Line2 := GetDuplicateChars(NoOfColumns,Tab);

      WHILE StartDate <= EndDate DO BEGIN
        NoOfRows := NoOfRows + 1;
        TextFile.WRITE(
          Line2 + Tab + FORMAT(StartDate) + Tab + FORMAT(CalculatePeriodStart(StartDate,1)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,2)) + Tab + FORMAT(CalculatePeriodStart(StartDate,3)) + Tab +
          FORMAT(CalculatePeriodStart(StartDate,4)));
        StartDate := CALCDATE('<1W>',StartDate);
      END;

      TextFile.CLOSE;
      EXIT(NoOfRows);
    END;

    LOCAL PROCEDURE CalculatePeriodStart@4(PostingDate@1000 : Date;DateCompression@1001 : Integer) : Date;
    VAR
      AccountingPeriod@1002 : Record 50;
      PrevPostingDate@1004 : Date;
      PrevCalculatedPostingDate@1005 : Date;
    BEGIN
      IF PostingDate = CLOSINGDATE(PostingDate) THEN
        EXIT(PostingDate);
      CASE DateCompression OF
        0:
          // Week :
          PostingDate := CALCDATE('<CW+1D-1W>',PostingDate);
        1:
          // Month :
          PostingDate := CALCDATE('<CM+1D-1M>',PostingDate);
        2:
          // Quarter :
          PostingDate := CALCDATE('<CQ+1D-1Q>',PostingDate);
        3:
          // Year :
          PostingDate := CALCDATE('<CY+1D-1Y>',PostingDate);
        4:
          // Period :
          BEGIN
            IF PostingDate <> PrevPostingDate THEN BEGIN
              PrevPostingDate := PostingDate;
              AccountingPeriod.SETRANGE("Starting Date",0D,PostingDate);
              IF AccountingPeriod.FINDLAST THEN BEGIN
                PrevCalculatedPostingDate := AccountingPeriod."Starting Date"
              END ELSE
                PrevCalculatedPostingDate := PostingDate;
            END;
            PostingDate := PrevCalculatedPostingDate;
          END;
      END;
      EXIT(PostingDate);
    END;

    LOCAL PROCEDURE InitCharTables@13();
    VAR
      i@1003 : Integer;
      c@1002 : Char;
      CharFile@1001 : File;
      TempFileName@1000 : Text;
    BEGIN
      FOR i := 65 TO 255 DO BEGIN
        c := i;
        CharsWindows[i - 64] := c;
      END;
      CharFile.CREATETEMPFILE;
      TempFileName := CharFile.NAME + '.txt';
      CharFile.CLOSE;
      CharFile.CREATE(TempFileName);
      CharFile.TEXTMODE := TRUE;
      CharFile.WRITE(CharsWindows);
      CharFile.CLOSE;
      TempFileName := FileMgt.DownloadTempFile(TempFileName);
      xlApp.Workbooks.OpenText(TempFileName);
      xlWorkSheet := xlApp.ActiveSheet;
      CharsNavision := xlWorkSheet.Range('A1').Value;
      xlApp.ActiveWorkbook.Close(FALSE);
      IF STRLEN(CharsWindows) <> STRLEN(CharsNavision) THEN
        IF (STRLEN(CharsWindows) = STRLEN(CharsNavision) - 2) AND
           (CharsNavision[1] = '"') AND (CharsNavision[STRLEN(CharsNavision)] = '"')
        THEN
          CharsNavision := COPYSTR(CharsNavision,2,STRLEN(CharsNavision) - 2)
        ELSE
          CharsNavision := CharsWindows; // Not possible to translate.
    END;

    LOCAL PROCEDURE FindGLAccountParent@7(VAR Account@1002 : Code[20]);
    BEGIN
      TempGLAcc3.GET(Account);
      IF TempGLAcc3.Indentation <> 0 THEN BEGIN
        TempGLAcc3.SETRANGE(Indentation,TempGLAcc3.Indentation - 1);
        TempGLAcc3.NEXT(-1);
      END;
      Account := TempGLAcc3."No.";
    END;

    LOCAL PROCEDURE FindCFAccountParent@2(VAR Account@1002 : Code[20]);
    BEGIN
      TempCFAccount3.GET(Account);
      IF TempCFAccount3.Indentation <> 0 THEN BEGIN
        TempCFAccount3.SETRANGE(Indentation,TempCFAccount3.Indentation - 1);
        TempCFAccount3.NEXT(-1);
      END;
      Account := TempCFAccount3."No.";
    END;

    LOCAL PROCEDURE FindDimLevel@8(DimCode@1000 : Code[20];DimFilter@1001 : Code[250];ArrayNo@1003 : Integer);
    VAR
      DimValue@1002 : Record 349;
    BEGIN
      IF DimCode = '' THEN
        EXIT;
      DimValue.SETRANGE("Dimension Code",DimCode);
      IF DimValue.FIND('-') THEN
        REPEAT
          TempDimValue2.COPY(DimValue);
          TempDimValue2.INSERT;
          TempDimValue3.COPY(DimValue);
          TempDimValue3.INSERT;
        UNTIL DimValue.NEXT = 0;
      TempDimValue2.SETFILTER(Code,DimFilter);
      IF TempDimValue2.FIND('-') THEN
        REPEAT
          IF MaxLevelDim[ArrayNo] < TempDimValue2.Indentation THEN
            MaxLevelDim[ArrayNo] := TempDimValue2.Indentation;
        UNTIL TempDimValue2.NEXT = 0;
    END;

    LOCAL PROCEDURE FindDimParent@6(VAR Account@1000 : Code[20];DimensionCode@1001 : Code[20]);
    BEGIN
      TempDimValue3.RESET;
      TempDimValue3.SETRANGE("Dimension Code",DimensionCode);
      TempDimValue3.GET(DimensionCode,Account);
      IF TempDimValue3.Indentation <> 0 THEN BEGIN
        TempDimValue3.SETRANGE(Indentation,TempDimValue3.Indentation - 1);
        TempDimValue3.NEXT(-1);
      END;
      Account := TempDimValue3.Code;
    END;

    LOCAL PROCEDURE FillOutDim@9(DimValueCode@1003 : Code[20];DimCode@1004 : Code[20];DimNo@1005 : Integer;ShowName@1006 : Boolean) Line@1000 : Text[1024];
    VAR
      Indent@1002 : Integer;
      i@1001 : Integer;
      DimValueCode2@1011 : Code[20];
    BEGIN
      IF DimValueCode <> '' THEN BEGIN
        IF TempDimValue2.GET(DimCode,DimValueCode) THEN
          TempDimValue2.MARK(TRUE)
        ELSE
          TempDimValue2.INIT;
        DimValueCode2 := DimValueCode;
        Indent := TempDimValue2.Indentation;
        AddAcc(Line,ShowName,TRUE,DimValueCode2,TempDimValue2.Name);
        IF Indent <> MaxLevelDim[DimNo] THEN
          FOR i := (Indent + 1) TO MaxLevelDim[DimNo] DO
            AddAcc(Line,ShowName,TRUE,DimValueCode2,TempDimValue2.Name);
        IF (Indent <> 0) AND (DimValueCode2 <> '') THEN
          FOR i := Indent DOWNTO 1 DO BEGIN
            FindDimParent(DimValueCode2,DimCode);
            TempDimValue2.GET(DimCode,DimValueCode2);
            AddAcc(Line,ShowName,FALSE,DimValueCode2,TempDimValue2.Name);
          END;
      END ELSE
        FOR i := 0 TO MaxLevelDim[DimNo] DO
          AddAcc(Line,FALSE,TRUE,'','');
      EXIT(Line)
    END;

    LOCAL PROCEDURE FillOutGLAcc@5(GLAccNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text[1024];
    VAR
      i@1004 : Integer;
      Indent@1008 : Integer;
      Account@1000 : Code[20];
    BEGIN
      Account := GLAccNo;
      TempGLAcc3.GET(Account);
      TempGLAcc3.MARK(TRUE);
      AddAcc(Line,ShowName,TRUE,TempGLAcc3."No.",TempGLAcc3.Name);

      Indent := TempGLAcc3.Indentation;
      IF Indent <> MaxLevel THEN
        FOR i := Indent + 1 TO MaxLevel DO
          AddAcc(Line,ShowName,TRUE,TempGLAcc3."No.",TempGLAcc3.Name);

      IF Indent <> 0 THEN
        FOR i := Indent DOWNTO 1 DO BEGIN
          FindGLAccountParent(Account);
          TempGLAcc3.GET(Account);
          AddAcc(Line,ShowName,FALSE,TempGLAcc3."No.",TempGLAcc3.Name);
        END;
      EXIT(Line)
    END;

    LOCAL PROCEDURE FillOutCFAccount@1008(CFAccNo@1001 : Code[20];ShowName@1005 : Boolean) Line@1009 : Text[1024];
    VAR
      i@1004 : Integer;
      Indent@1008 : Integer;
      Account@1000 : Code[20];
    BEGIN
      Account := CFAccNo;
      TempCFAccount3.GET(Account);
      TempCFAccount3.MARK(TRUE);
      AddAcc(Line,ShowName,TRUE,TempCFAccount3."No.",TempCFAccount3.Name);

      Indent := TempCFAccount2.Indentation;
      IF Indent <> MaxLevel THEN
        FOR i := Indent + 1 TO MaxLevel DO
          AddAcc(Line,ShowName,TRUE,TempCFAccount3."No.",TempCFAccount3.Name);

      IF Indent <> 0 THEN
        FOR i := Indent DOWNTO 1 DO BEGIN
          FindCFAccountParent(Account);
          TempCFAccount3.GET(Account);
          AddAcc(Line,ShowName,FALSE,TempCFAccount3."No.",TempCFAccount3.Name);
        END;
      EXIT(Line)
    END;

    LOCAL PROCEDURE FillOutBusUnit@11(BusUnitCode@1001 : Code[10];ShowName@1005 : Boolean) Line@1009 : Text[1024];
    BEGIN
      IF BusUnitCode <> '' THEN BEGIN
        BusUnit.GET(BusUnitCode);
        BusUnit.MARK(TRUE);
        AddAcc(Line,ShowName,TRUE,BusUnit.Code,BusUnit.Name);
      END ELSE
        AddAcc(Line,FALSE,TRUE,'','');
      EXIT(Line)
    END;

    LOCAL PROCEDURE CheckNoOfRows@10(NoOfRows@1000 : Integer;VAR AnalysisView@1001 : Record 363);
    BEGIN
      IF ExcelVersion = '' THEN
        IF NOT ISCLEAR(xlApp) THEN
          ExcelVersion := COPYSTR(xlApp.Version,1,MAXSTRLEN(ExcelVersion));

      IF (ExcelVersion < '12.0') AND (NoOfRows > 65000) THEN
        ERROR(Text032,65000,AnalysisView.FIELDCAPTION("Date Compression"),AnalysisView.TABLECAPTION);
    END;

    LOCAL PROCEDURE GetDuplicateChars@18(NoOfChars@1000 : Integer;c@1003 : Text[1]) : Text[100];
    VAR
      t@1001 : Text[100];
      i@1002 : Integer;
    BEGIN
      FOR i := 1 TO NoOfChars DO
        t := t + c;
      EXIT(t);
    END;

    LOCAL PROCEDURE AddAcc@14(VAR Line@1005 : Text[1024];ShowName@1002 : Boolean;AppendToLine@1003 : Boolean;Account@1000 : Code[20];AccName@1001 : Text[50]);
    VAR
      Tab@1007 : Text[1];
      s@1004 : Text[80];
    BEGIN
      Tab[1] := 9;
      IF Account = '' THEN
        s := ''
      ELSE
        IF ShowName THEN
          s := Account + ' ' + AccName
        ELSE
          s := AddAccPrefix(Account);

      IF STRLEN(Line) + STRLEN(s) + 1 > MAXSTRLEN(Line) THEN
        ERROR(Text038);

      IF AppendToLine THEN
        Line := Line + s + Tab
      ELSE
        Line := s + Tab + Line;
    END;

    LOCAL PROCEDURE AddAccPrefix@12(Acc@1000 : Code[20]) : Code[30];
    BEGIN
      IF AccNoPrefix = '' THEN
        AccNoPrefix := '_NAV_'; // Used to ensure that Acc. No. and Dim values are formatted as text.

      IF Acc[1] IN ['0'..'9'] THEN
        EXIT(AccNoPrefix + Acc);
      EXIT(Acc);
    END;

    LOCAL PROCEDURE GetPivotFieldAccountIndexValue@15(Level@1000 : Integer) : Text[250];
    BEGIN
      IF GLAccountSource THEN
        EXIT(FORMAT(Text018) + ' ' + FORMAT(Text022) + ' ' + FORMAT(Level));

      EXIT(FORMAT(Text118) + ' ' + FORMAT(Text022) + ' ' + FORMAT(Level));
    END;

    LOCAL PROCEDURE CheckCombination@21(Show@1000 : Integer;AmountField@1001 : Integer);
    BEGIN
      IF NOT GLAccountSource THEN
        EXIT;

      IF (Show <> 0) AND (Show <> 1) THEN
        ERROR(Text000);
      IF (Show = 1) AND (AmountField <> 0) THEN
        ERROR(Text001);
    END;

    LOCAL PROCEDURE SetOtherFilterToCorrectFilter@16(DraftFilter@1002 : Code[250];BusUnitFilter@1001 : Code[250];CashFlowFilter@1000 : Code[250]);
    BEGIN
      IF GLAccountSource THEN
        BusUnitFilter := DraftFilter
      ELSE
        CashFlowFilter := DraftFilter;
    END;

    LOCAL PROCEDURE PopulateTempAccountTable@17(AccFilter@1002 : Code[250]);
    VAR
      GLAcc@1001 : Record 15;
      CFAccount@1000 : Record 841;
    BEGIN
      IF GLAccountSource THEN BEGIN
        IF GLAcc.FIND('-') THEN
          REPEAT
            TempGLAcc3.COPY(GLAcc);
            TempGLAcc3.INSERT;
          UNTIL GLAcc.NEXT = 0;

        TempGLAcc3.SETFILTER("No.",AccFilter);
        IF TempGLAcc3.FIND('-') THEN
          REPEAT
            TempGLAcc2.COPY(TempGLAcc3);
            TempGLAcc2.INSERT;
            IF MaxLevel < TempGLAcc2.Indentation THEN
              MaxLevel := TempGLAcc2.Indentation;
          UNTIL TempGLAcc3.NEXT = 0;
        TempGLAcc3.SETRANGE("No.");
      END ELSE BEGIN
        IF CFAccount.FIND('-') THEN
          REPEAT
            TempCFAccount3.COPY(CFAccount);
            TempCFAccount3.INSERT;
          UNTIL CFAccount.NEXT = 0;

        TempCFAccount3.SETFILTER("No.",AccFilter);
        IF TempCFAccount3.FIND('-') THEN
          REPEAT
            TempCFAccount2.COPY(TempCFAccount3);
            TempCFAccount2.INSERT;
            IF MaxLevel < TempCFAccount2.Indentation THEN
              MaxLevel := TempCFAccount2.Indentation;
          UNTIL TempCFAccount3.NEXT = 0;
        TempCFAccount3.SETRANGE("No.");
      END;
    END;

    LOCAL PROCEDURE ProcessMarkedTempCFAccountRec@19(VAR NoOfRows@1000 : Integer;VAR Line2@1001 : Text[1024];ShowName@1002 : Boolean;VAR TextFile@1003 : File);
    BEGIN
      REPEAT
        IF NOT TempCFAccount2.MARK THEN BEGIN
          NoOfRows := NoOfRows + 1;
          Line2 :=
            CONVERTSTR(
              FillOutCFAccount(TempCFAccount2."No.",ShowName),
              CharsNavision,CharsWindows);
          TextFile.WRITE(Line2);
        END;
      UNTIL TempCFAccount2.NEXT = 0;
    END;

    EVENT xlWorkSheet2@1008::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet2@1008::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkSheet@1009::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet@1009::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet@1009::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet@1009::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet@1009::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlApp@1011::NewWorkbook@1565(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::SheetSelectionChange@1558(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1011::SheetBeforeDoubleClick@1559(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::SheetBeforeRightClick@1560(Sh@1002 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::SheetActivate@1561(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::SheetDeactivate@1562(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::SheetCalculate@1563(Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::SheetChange@1564(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookOpen@1567(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookActivate@1568(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookDeactivate@1569(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookBeforeClose@1570(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookBeforeSave@1571(Wb@1002 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";SaveAsUI@1001 : Boolean;VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookBeforePrint@1572(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookNewSheet@1573(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Sh@1000 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookAddinInstall@1574(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WorkbookAddinUninstall@1575(Wb@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook");
    BEGIN
    END;

    EVENT xlApp@1011::WindowResize@1554(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1011::WindowActivate@1556(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1011::WindowDeactivate@1557(Wb@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020819-0000-0000-C000-000000000046}:Unknown Automation Server.Workbook";Wn@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020893-0000-0000-C000-000000000046}:Unknown Automation Server.Window");
    BEGIN
    END;

    EVENT xlApp@1011::SheetFollowHyperlink@1854(Sh@1001 : Automation ":{00020400-0000-0000-C000-000000000046}:''.IDISPATCH";Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::SelectionChange@1543(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::BeforeDoubleClick@1537(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::BeforeRightClick@1534(Target@1001 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range";VAR Cancel@1000 : Boolean);
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Activate@304();
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Deactivate@1530();
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Calculate@279();
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::Change@1545(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00020846-0000-0000-C000-000000000046}:Unknown Automation Server.Range");
    BEGIN
    END;

    EVENT xlWorkSheet3@1038::FollowHyperlink@1470(Target@1000 : Automation "{00020813-0000-0000-C000-000000000046} 1.3:{00024431-0000-0000-C000-000000000046}:Unknown Automation Server.Hyperlink");
    BEGIN
    END;

    BEGIN
    END.
  }
}

