OBJECT Codeunit 10091 Export Payments (RB)
{
  OBJECT-PROPERTIES
  {
    Date=09/23/13;
    Time=12:00:00 PM;
    Version List=NAVNA7.10;
  }
  PROPERTIES
  {
    OnRun=BEGIN
          END;

  }
  CODE
  {
    VAR
      Text000@1020012 : TextConst 'ENU=Cannot start new Export File while %1 is in process.;ESM=No se puede iniciar el nuevo archivo de exportaci¢n mientras %1 est  en curso.;FRC=Ne peut commencer un nouveau fichier d''exportation pendant que le %1 est en traitement.;ENC=Cannot start new Export File while %1 is in process.';
      Text001@1020011 : TextConst 'ENU=is not valid.;ESM=no es v lido.;FRC=est non valide.;ENC=is not valid.';
      Text002@1020010 : TextConst 'ENU=%1 in %2 %3 is invalid.;ESM=%1 en %2 %3 no es v lido.;FRC=%1 dans %2 %3 est non valide.;ENC=%1 in %2 %3 is invalid.';
      Text003@1020009 : TextConst 'ENU=File %1 already exists. Check the %2 in %3 %4.;ESM=Ya existe el archivo %1. Compruebe %2 en %3 %4.;FRC=Fichier %1 existe d‚j…. V‚rifier le %2 dans %3 %4.;ENC=File %1 already exists. Check the %2 in %3 %4.';
      Text004@1020008 : TextConst 'ENU=Cannot export details until an export file is started.;ESM=No se puede exportar detalles hasta que se inicie un archivo de exportaci¢n.;FRC=Ne peut exporter de d‚tails avant qu''un fichier d''exportation ne soit commenc‚.;ENC=Cannot export details until an export file is started.';
      Text015@1020007 : TextConst 'ENU=Either %1 or %2 must refer to either a %3 or a %4 for an electronic payment.;ESM=%1 o %2 deben hacer referencia a un %3 o %4 para un pago electr¢nico.;FRC=%1 ou %2 doit renvoyer … un %3 ou … un %4 pour un paiement ‚lectronique.;ENC=Either %1 or %2 must refer to either a %3 or a %4 for an electronic payment.';
      Text016@1020006 : TextConst 'ENU="Vendor No. %1 has no bank account setup for electronic payments. ";ESM="El proveedor %1 no tiene una cuenta configurada para pagos electr¢nicos. ";FRC="Le compte bancaire du fournisseur Nø %1 n''est pas configur‚ pour les paiements ‚lectroniques. ";ENC="Vendor No. %1 has no bank account setup for electronic payments. "';
      Text017@1020005 : TextConst 'ENU="Vendor No. %1 has more than one bank account setup for electronic payments. ";ESM="El proveedor %1 tiene m s de una cuenta configurada para pagos electr¢nicos. ";FRC="Le fournisseur Nø %1 possŠde plus d''une configuration de compte bancaire pour les paiements ‚lectroniques. ";ENC="Vendor No. %1 has more than one bank account setup for electronic payments. "';
      Text018@1020004 : TextConst 'ENU="Customer No. %1 has no bank account setup for electronic payments. ";ESM="El cliente %1 no tiene una cuenta configurada para pagos electr¢nicos. ";FRC="Le client Nø %1 n''a pas de configuration de compte bancaire pour les paiements ‚lectroniques. ";ENC="Customer No. %1 has no bank account setup for electronic payments. "';
      Text019@1020003 : TextConst 'ENU="Customer No. %1 has more than one bank account setup for electronic payments. ";ESM="El cliente %1 tiene m s de una cuenta configurada para pagos electr¢nicos. ";FRC="Le client Nø %1 a plus d''une configuration de compte bancaire pour les paiements ‚lectroniques. ";ENC="Customer No. %1 has more than one bank account setup for electronic payments. "';
      Text005@1020002 : TextConst 'ENU=Cannot end export file until an export file is started.;ESM=No se puede terminar el archivo de exportaci¢n hasta que se inicie uno.;FRC=Ne peut terminer une exportation avant qu''un fichier ne soit commenc‚.;ENC=Cannot end export file until an export file is started.';
      Text006@1020001 : TextConst 'ENU=File %1 does not exist.;ESM=El archivo %1 no existe.;FRC=Fichier %1 n''existe pas.;ENC=File %1 does not exist.';
      Text047@1020000 : TextConst 'ENU=Did the transmission work properly?;ESM=¨La transmisi¢n se realiz¢ correctamente?;FRC=Est-ce que la transmission a fonctionn‚ correctement?;ENC=Did the transmission work properly?';
      Text1020100@1020100 : TextConst 'ENU=%1 is blocked for %2 processing;ESM=%1 est  bloqueado para el proceso %2;FRC=%1 est bloqu‚ pour le traitement de %2;ENC=%1 is blocked for %2 processing';
      Vendor@1020037 : Record 23;
      Customer@1020036 : Record 18;
      BankAccount@1020035 : Record 270;
      CompanyInformation@1020034 : Record 79;
      RBMgt@1480001 : Codeunit 419;
      TotalFileDebit@1020030 : Decimal;
      TotalFileCredit@1020029 : Decimal;
      RecordLength@1020028 : Integer;
      NoOfRec@1020027 : Integer;
      ExportFile@1020025 : File;
      Justification@1020024 : 'Left,Right';
      FileName@1020023 : Text;
      FileIsInProcess@1020021 : Boolean;
      FileDate@1020019 : Date;
      FileTime@1020018 : Time;
      ModifierValues@1020017 : ARRAY [26] OF Code[1];
      TraceNo@1020015 : Integer;
      PaymentsThisAcct@1020013 : Integer;
      Text020@1020038 : TextConst 'ENU=Demand Debits are not supported. Check sign on %1 %2, %3 %4, %5 %6.;ESM=No se admiten d‚bitos a la vista. Compruebe el signo en %1 %2, %3 %4, %5 %6.;FRC=Les d‚bits de demande ne sont pas pris en charge. V‚rifiez la connexion %1 %2, %3 %4, %5 %6.;ENC=Demand Debits are not supported. Cheque sign on %1 %2, %3 %4, %5 %6.';

      Text021@1480000 : TextConst
        'ENU=You must now run the program that transmits the payments file to the bank. Transmit the file named %1 located at %2 to %3 (%4 %5 %6).  After the transmission is completed, you will be asked if it worked correctly.  Are you ready to transmit (answer No to cancel the transmission process)?',
        'ESM=Debe ejecutar el programa que transmite el archivo de pagos al banco. Transmita el archivo denominado %1 que se encuentra en %2 a %3 (%4 %5 %6). Una vez finalizada la transmisi¢n, deber  confirmar que funcion¢ correctamente. ¨Est  listo para transmitir (responda No para cancelar el proceso de transmisi¢n)?',
        'FRC=Vous devez … pr‚sent ex‚cuter le programme qui transmet le fichier de paiements … la banque. Transmettez le fichier nomm‚ %1 situ‚ … l''emplacement %2 vers %3 (%4 %5 %6). Une fois la transmission termin‚e, vous serez invit‚ … indiquer si la proc‚dure a bien fonctionn‚. Òtes-vous prˆt … transmettre (r‚pondez Non pour annuler la proc‚dure de transmission) ?',
        'ENC=You must now run the program that transmits the payments file to the bank. Transmit the file named %1 located at %2 to %3 (%4 %5 %6).  After the transmission is completed, you will be asked if it worked correctly.  Are you ready to transmit (answer No to cancel the transmission process)?';
      Transactions@1030000 : Integer;
      CurrencyType@1030001 : Code[3];

    PROCEDURE StartExportFile@6(BankAccountNo@1020001 : Code[20];ReferenceCode@1020000 : Code[10];GenJnlLine@1030010 : Record 81);
    VAR
      GLSetup@1030002 : Record 98;
      FileHeaderRec@1020003 : Text[250];
      i@1020002 : Integer;
    BEGIN
      BuildIDModifier;
      IF FileIsInProcess THEN
        ERROR(Text000,FileName);

      CompanyInformation.GET;
      CompanyInformation.TESTFIELD("Federal ID No.");

      WITH BankAccount DO BEGIN
        LOCKTABLE;
        GET(BankAccountNo);
        TESTFIELD("Export Format","Export Format"::CA);
        TESTFIELD("Transit No.");
        IF NOT CheckDigit("Transit No.") THEN
          FIELDERROR("Transit No.",Text001);
        TESTFIELD("E-Pay Export File Path");
        IF "E-Pay Export File Path"[STRLEN("E-Pay Export File Path")] <> '\' THEN
          ERROR(Text002,
            FIELDCAPTION("E-Pay Export File Path"),
            TABLECAPTION,
            "No.");
        TESTFIELD("Last E-Pay Export File Name");
        TESTFIELD("Bank Acc. Posting Group");
        TESTFIELD(Blocked,FALSE);
        TESTFIELD("Client No.");
        TESTFIELD("Client Name");

        GenJnlLine.TESTFIELD("Transaction Code");
        GenJnlLine.TESTFIELD("Company Entry Description");

        "Last E-Pay Export File Name" := INCSTR("Last E-Pay Export File Name");
        FileName := RBMgt.ServerTempFileName('');
        IF "Last ACH File ID Modifier" = '' THEN
          "Last ACH File ID Modifier" := '1'
        ELSE BEGIN
          i := 1;
          WHILE (i < ARRAYLEN(ModifierValues)) AND
                ("Last ACH File ID Modifier" <> ModifierValues[i])
          DO
            i := i + 1;
          IF i = ARRAYLEN(ModifierValues) THEN
            i := 1
          ELSE
            i := i + 1;
          "Last ACH File ID Modifier" := ModifierValues[i];
        END;
        "Last E-Pay File Creation No." := "Last E-Pay File Creation No." + 1;
        MODIFY;

        IF EXISTS(FileName) THEN
          ERROR(Text003,
            FileName,
            FIELDCAPTION("Last E-Pay Export File Name"),
            TABLECAPTION,
            "No.");
        ExportFile.TEXTMODE(TRUE);
        ExportFile.WRITEMODE(TRUE);
        ExportFile.CREATE(FileName);

        FileIsInProcess := TRUE;
        FileDate := TODAY;
        FileTime := TIME;
        NoOfRec := 0;
        TotalFileDebit := 0;
        TotalFileCredit := 0;
        RecordLength := 152;
        Transactions := 0;
        FileHeaderRec := '';
        ExportPrnString(FileHeaderRec);

        FileHeaderRec := '';
        AddNumToPrnString(FileHeaderRec,NoOfRec,1,6);                              // Record Count
        AddToPrnString(FileHeaderRec,'A',7,1,Justification::Left,' ');             // Record Type
        AddToPrnString(FileHeaderRec,'HDR',8,3,Justification::Left,' ');           // Transaction Code
        AddToPrnString(FileHeaderRec,"Client No.",11,10,Justification::Left,'0');  // Client Number
        AddToPrnString(FileHeaderRec,"Client Name",21,30,Justification::Left,' '); // Client Name
        AddNumToPrnString(FileHeaderRec,"Last E-Pay File Creation No.",51,4);      // File Creation Number
        AddNumToPrnString(FileHeaderRec,JulianDate(FileDate),55,7);                // File Creation Date
        IF GenJnlLine."Currency Code" = '' THEN BEGIN
          GLSetup.GET;
          CurrencyType := GLSetup."LCY Code";
        END ELSE
          CurrencyType := GenJnlLine."Currency Code";
        AddToPrnString(FileHeaderRec,CurrencyType,62,3,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,'1',65,1,Justification::Left,' ');            // Input Type
        AddToPrnString(FileHeaderRec,' ',66,15,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,' ',81,6,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,' ',87,8,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,' ',95,9,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,' ',104,46,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,' ',150,2,Justification::Left,' ');
        AddToPrnString(FileHeaderRec,' ',152,1,Justification::Left,' ');
        ExportPrnString(FileHeaderRec);
      END;
    END;

    PROCEDURE ExportElectronicPayment@17(GenJnlLine@1020002 : Record 81;PaymentAmount@1020001 : Decimal;SettleDate@1020000 : Date) : Code[30];
    VAR
      VendorBankAcct@1020014 : Record 288;
      CustBankAcct@1020013 : Record 287;
      AcctType@1020012 : Text[1];
      AcctNo@1020011 : Code[20];
      AcctName@1020010 : Text[30];
      AcctLanguage@1020009 : 'E  English,F  French';
      DetailRec@1020005 : Text[250];
      DemandCredit@1020004 : Boolean;
      RecipientBankAcctNo@1030003 : Text[30];
      RecipientTransitNo@1030004 : Text[20];
      RecipientBankNo@1030005 : Text[20];
      RecipientBankAcctCurrencyCode@1030006 : Code[3];
      RecipientBankAcctCountryCode@1030007 : Code[10];
      RecipientAddress@1030008 : Text[100];
      RecipientCity@1030009 : Text[30];
      RecipientCountryCode@10300010 : Text[30];
      RecipientCounty@1030011 : Text[30];
      RecipientPostCode@1030012 : Code[20];
      IATAddressInfo1Rec@1030014 : Text[250];
      IATAddressInfo2Rec@1030015 : Text[250];
      IATRemittanceRec@1030016 : Text[250];
    BEGIN
      IF NOT FileIsInProcess THEN
        ERROR(Text004);
      // NOTE:  If PaymentAmount is Positive, then we are Receiving money.
      //    If PaymentAmount is Negative, then we are Sending money.
      IF PaymentAmount = 0 THEN
        EXIT('');
      DemandCredit := (PaymentAmount < 0);
      PaymentAmount := ABS(PaymentAmount);
      IF DemandCredit THEN
        TotalFileCredit := TotalFileCredit + PaymentAmount
      ELSE
        TotalFileDebit := TotalFileDebit + PaymentAmount;
      WITH GenJnlLine DO BEGIN
        IF NOT DemandCredit THEN // for now, this is not supported for Canada
          ERROR(Text020,
            FIELDCAPTION("Journal Template Name"),"Journal Template Name",
            FIELDCAPTION("Journal Batch Name"),"Journal Batch Name",
            FIELDCAPTION("Line No."),"Line No.");
        IF "Account Type" = "Account Type"::Vendor THEN BEGIN
          AcctType := 'V';
          AcctNo := "Account No.";
        END ELSE
          IF "Account Type" = "Account Type"::Customer THEN BEGIN
            AcctType := 'C';
            AcctNo := "Account No.";
          END ELSE
            IF "Bal. Account Type" = "Bal. Account Type"::Vendor THEN BEGIN
              AcctType := 'V';
              AcctNo := "Bal. Account No.";
            END ELSE
              IF "Bal. Account Type" = "Bal. Account Type"::Customer THEN BEGIN
                AcctType := 'C';
                AcctNo := "Bal. Account No.";
              END ELSE
                ERROR(Text015,
                  FIELDCAPTION("Account Type"),FIELDCAPTION("Bal. Account Type"),Vendor.TABLECAPTION,Customer.TABLECAPTION);
        IF AcctType = 'V' THEN BEGIN
          IF AcctNo <> Vendor."No." THEN BEGIN
            Vendor.GET(AcctNo);
            Vendor.TESTFIELD(Blocked,Vendor.Blocked::" ");
            PaymentsThisAcct := 0;
          END ELSE
            PaymentsThisAcct := PaymentsThisAcct + 1;
          AcctName := Vendor.Name;
          AcctLanguage := Vendor."Bank Communication";
          RecipientAddress := Vendor.Address + ' ' + Vendor."Address 2";
          RecipientCity := Vendor.City;
          RecipientCountryCode := Vendor."Country/Region Code";
          RecipientCounty := Vendor.County;
          RecipientPostCode := Vendor."Post Code";
          VendorBankAcct.SETRANGE("Vendor No.",AcctNo);
          VendorBankAcct.SETRANGE("Use for Electronic Payments",TRUE);
          IF VendorBankAcct.COUNT < 1 THEN
            ERROR(Text016,AcctNo);
          IF VendorBankAcct.COUNT > 1 THEN
            ERROR(Text017,AcctNo);
          VendorBankAcct.FINDFIRST;
          IF NOT CheckDigit(VendorBankAcct."Transit No.") THEN
            VendorBankAcct.FIELDERROR("Transit No.",Text001);
          VendorBankAcct.TESTFIELD("Bank Account No.");
          RecipientBankNo := VendorBankAcct."Bank Branch No.";
          RecipientTransitNo := VendorBankAcct."Transit No.";
          RecipientBankAcctNo := VendorBankAcct."Bank Account No.";
          RecipientBankAcctCurrencyCode := VendorBankAcct."Currency Code";
          RecipientBankAcctCountryCode := VendorBankAcct."Country/Region Code";
        END ELSE
          IF AcctType = 'C' THEN BEGIN
            IF AcctNo <> Customer."No." THEN BEGIN
              Customer.GET(AcctNo);
              IF Customer.Blocked = Customer.Blocked::All THEN
                ERROR(
                  STRSUBSTNO(
                    Text1020100,
                    "Account Type",Customer.Blocked));
              PaymentsThisAcct := 0;
            END ELSE
              PaymentsThisAcct := PaymentsThisAcct + 1;
            AcctName := Customer.Name;
            AcctLanguage := Customer."Bank Communication";
            RecipientAddress := Customer.Address + ' ' + Customer."Address 2";
            RecipientCity := Customer.City;
            RecipientCountryCode := Customer."Country/Region Code";
            RecipientCounty := Customer.County;
            RecipientPostCode := Customer."Post Code";
            CustBankAcct.SETRANGE("Customer No.",AcctNo);
            CustBankAcct.SETRANGE("Use for Electronic Payments",TRUE);
            IF CustBankAcct.COUNT < 1 THEN
              ERROR(Text018,AcctNo);
            IF CustBankAcct.COUNT > 1 THEN
              ERROR(Text019,AcctNo);
            CustBankAcct.FINDFIRST;
            IF NOT CheckDigit(CustBankAcct."Transit No.") THEN
              CustBankAcct.FIELDERROR("Transit No.",Text001);
            CustBankAcct.TESTFIELD("Bank Account No.");
            RecipientBankNo := CustBankAcct."Bank Branch No.";
            RecipientTransitNo := CustBankAcct."Transit No.";
            RecipientBankAcctNo := CustBankAcct."Bank Account No.";
            RecipientBankAcctCurrencyCode := CustBankAcct."Currency Code";
            RecipientBankAcctCountryCode := CustBankAcct."Country/Region Code"
          END;
        Transactions := Transactions + 1;
        DetailRec := '';
        TraceNo := NoOfRec;
        AddNumToPrnString(DetailRec,NoOfRec,1,6);                                          // Record Count
        AddToPrnString(DetailRec,'D',7,1,Justification::Left,' ');
        AddToPrnString(DetailRec,"Transaction Code",8,3,Justification::Left,' ');
        AddToPrnString(DetailRec,BankAccount."Client No.",11,10,Justification::Left,'0');  // Client Number
        AddToPrnString(DetailRec,' ',21,1,Justification::Left,' ');
        AddToPrnString(DetailRec,AcctNo,22,19,Justification::Left,' ');                    // Customer Number
        AddNumToPrnString(DetailRec,PaymentsThisAcct,41,2);                                // Payment Number
        IF RecipientBankAcctCountryCode = 'CA' THEN BEGIN
          AddToPrnString(DetailRec,RecipientBankNo,43,4,Justification::Right,'0');
          AddToPrnString(DetailRec,RecipientTransitNo,47,5,Justification::Right,'0');
        END ELSE
          IF RecipientBankAcctCountryCode = 'US' THEN
            AddToPrnString(DetailRec,RecipientTransitNo,43,9,Justification::Right,'0');

        AddToPrnString(DetailRec,RecipientBankAcctNo,52,18,Justification::Left,' ');
        AddToPrnString(DetailRec,' ',70,1,Justification::Left,' ');
        AddAmtToPrnString(DetailRec,PaymentAmount,71,10);                                  // Payment Amount
        AddToPrnString(DetailRec,' ',81,6,Justification::Left,' ');
        AddNumToPrnString(DetailRec,JulianDate(SettleDate),87,7);                          // Payment Date
        AddToPrnString(DetailRec,AcctName,94,30,Justification::Left,' ');                  // Customer Name
        AddToPrnString(DetailRec,FORMAT(AcctLanguage),124,1,Justification::Left,' ');      // Language Code
        AddToPrnString(DetailRec,' ',125,1,Justification::Left,' ');
        AddToPrnString(DetailRec,BankAccount."Client Name",126,15,Justification::Left,' ');// Client Name
        IF RecipientBankAcctCurrencyCode = '' THEN
          AddToPrnString(DetailRec,CurrencyType,141,3,Justification::Left,' ')
        ELSE
          AddToPrnString(DetailRec,RecipientBankAcctCurrencyCode,141,3,Justification::Left,' ');
        AddToPrnString(DetailRec,' ',144,1,Justification::Left,' ');
        IF RecipientCountryCode = 'CA' THEN
          AddToPrnString(DetailRec,'CAN',145,3,Justification::Left,' ')
        ELSE
          IF RecipientCountryCode = 'US' THEN
            AddToPrnString(DetailRec,'USA',145,3,Justification::Left,' ');
        AddToPrnString(DetailRec,' ',148,2,Justification::Left,' ');
        AddToPrnString(DetailRec,' ',150,2,Justification::Left,' ');
        AddToPrnString(DetailRec,'N',152,1,Justification::Left,' ');                       // No Optional Records Follow

        ExportPrnString(DetailRec);
        IATAddressInfo1Rec := '';
        AddNumToPrnString(IATAddressInfo1Rec,NoOfRec,1,6);
        AddToPrnString(IATAddressInfo1Rec,'D',7,1,Justification::Left,' ');
        AddToPrnString(IATAddressInfo1Rec,'AD1',8,3,Justification::Left,' ');
        AddToPrnString(IATAddressInfo1Rec,BankAccount."Client No.",11,10,Justification::Left,'0');
        AddToPrnString(IATAddressInfo1Rec,CompanyInformation.Name,21,30,Justification::Left,' ');
        AddToPrnString(IATAddressInfo1Rec,CompanyInformation.Address + ' ' + CompanyInformation."Address 2",
          51,35,Justification::Left,' ');
        AddToPrnString(IATAddressInfo1Rec,CompanyInformation.City + '*' + CompanyInformation.County +
          '\',86,35,Justification::Left,' ');
        AddToPrnString(IATAddressInfo1Rec,CompanyInformation."Country/Region Code" + '*' + CompanyInformation."Post Code" +
          '\',121,32,Justification::Left,' ');

        ExportPrnString(IATAddressInfo1Rec);

        IATAddressInfo2Rec := '';
        AddNumToPrnString(IATAddressInfo2Rec,NoOfRec,1,6);
        AddToPrnString(IATAddressInfo2Rec,'D',7,1,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,'AD2',8,3,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,BankAccount."Client No.",11,10,Justification::Left,'0');
        AddToPrnString(IATAddressInfo2Rec,RecipientAddress,21,35,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,RecipientCity + '*' + RecipientCounty + '\',56,35,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,RecipientCountryCode + '*' + RecipientPostCode + '\',91,35,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,FORMAT("Transaction Type Code"),126,3,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,"Company Entry Description",129,10,Justification::Left,' ');
        AddToPrnString(IATAddressInfo2Rec,' ',139,14,Justification::Left,' ');

        ExportPrnString(IATAddressInfo2Rec);

        IF ("Payment Related Information 1" <> '') OR ("Payment Related Information 2" <> '') THEN BEGIN
          IATRemittanceRec := '';
          AddNumToPrnString(IATRemittanceRec,NoOfRec,1,6);
          AddToPrnString(IATRemittanceRec,'D',7,1,Justification::Left,' ');
          AddToPrnString(IATRemittanceRec,'REM',8,3,Justification::Left,' ');
          AddToPrnString(IATRemittanceRec,BankAccount."Client No.",11,10,Justification::Left,'0');
          AddToPrnString(IATRemittanceRec,"Payment Related Information 1",21,80,Justification::Left,' ');
          AddToPrnString(IATRemittanceRec,"Payment Related Information 2",101,52,Justification::Left,' ');

          ExportPrnString(IATRemittanceRec);
        END;
      END;

      EXIT(GenerateFullTraceNoCode(TraceNo));
    END;

    PROCEDURE EndExportFile@10() : Boolean;
    VAR
      FileControlRec@1020000 : Text[250];
      ClientFile@1020001 : Text;
    BEGIN
      IF NOT FileIsInProcess THEN
        ERROR(Text005);

      FileIsInProcess := FALSE;

      FileControlRec := '';
      AddNumToPrnString(FileControlRec,NoOfRec,1,6);                                         // Record Count
      AddToPrnString(FileControlRec,'Z',7,1,Justification::Left,' ');                        // Record Type
      AddToPrnString(FileControlRec,'TRL',8,3,Justification::Left,' ');                      // Transaction Code
      AddToPrnString(FileControlRec,BankAccount."Client No.",11,10,Justification::Left,'0'); // Client Number
      AddToPrnString(FileControlRec,' ',21,6,Justification::Left,' ');
      AddToPrnString(FileControlRec,' ',27,14,Justification::Left,' ');
      AddNumToPrnString(FileControlRec,Transactions,41,6);
      AddAmtToPrnString(FileControlRec,TotalFileCredit,47,14);
      AddNumToPrnString(FileControlRec,0,61,2);                                              // Zero Fill
      AddNumToPrnString(FileControlRec,0,63,6);                                              // Zero Fill
      AddToPrnString(FileControlRec,' ',69,12,Justification::Left,' ');
      AddToPrnString(FileControlRec,' ',81,6,Justification::Left,' ');
      AddToPrnString(FileControlRec,' ',87,63,Justification::Left,' ');
      AddToPrnString(FileControlRec,' ',150,2,Justification::Left,' ');
      AddToPrnString(FileControlRec,' ',152,1,Justification::Left,' ');
      ExportPrnString(FileControlRec);
      ExportFile.CLOSE;

      ClientFile := BankAccount."E-Pay Export File Path" + BankAccount."Last E-Pay Export File Name";
      RBMgt.DownloadToFile(FileName,ClientFile);
      ERASE(FileName);
      EXIT(TRUE);
    END;

    LOCAL PROCEDURE GenerateFullTraceNoCode@14(TraceNo@1020000 : Integer) : Code[30];
    VAR
      TraceCode@1020001 : Text[250];
    BEGIN
      TraceCode := '';
      AddNumToPrnString(TraceCode,BankAccount."Last E-Pay File Creation No.",1,6);
      AddNumToPrnString(TraceCode,TraceNo,7,6);
      EXIT(TraceCode);
    END;

    LOCAL PROCEDURE AddNumToPrnString@12(VAR PrnString@1020003 : Text[250];Number@1020002 : Integer;StartPos@1020001 : Integer;Length@1020000 : Integer);
    VAR
      TmpString@1020005 : Text[250];
    BEGIN
      TmpString := DELCHR(FORMAT(Number),'=','.,-');
      AddToPrnString(PrnString,TmpString,StartPos,Length,Justification::Right,'0');
    END;

    LOCAL PROCEDURE AddAmtToPrnString@3(VAR PrnString@1020003 : Text[250];Amount@1020002 : Decimal;StartPos@1020001 : Integer;Length@1020000 : Integer);
    VAR
      TmpString@1020005 : Text[250];
      I@1020004 : Integer;
    BEGIN
      TmpString := FORMAT(Amount);
      I := STRPOS(TmpString,'.');
      CASE TRUE OF
        I = 0:
          TmpString := TmpString + '.00';
        I = STRLEN(TmpString) - 1:
          TmpString := TmpString + '0';
      END;
      TmpString := DELCHR(TmpString,'=','.,-');
      AddToPrnString(PrnString,TmpString,StartPos,Length,Justification::Right,'0');
    END;

    PROCEDURE AddFedIDToPrnString@18(VAR PrnString@1020003 : Text[250];FedID@1020002 : Text[30];StartPos@1020001 : Integer;Length@1020000 : Integer);
    BEGIN
      AddToPrnString(PrnString,'1' + DELCHR(FedID,'=',' .,-'),StartPos,Length,Justification::Left,' ');
    END;

    LOCAL PROCEDURE AddToPrnString@4(VAR PrnString@1020005 : Text[250];SubString@1020004 : Text[80];StartPos@1020003 : Integer;Length@1020002 : Integer;Justification@1020001 : 'Left,Right';Filler@1020000 : Text[1]);
    VAR
      I@1020007 : Integer;
      SubStrLen@1020006 : Integer;
    BEGIN
      SubString := UPPERCASE(DELCHR(SubString,'<>',' '));
      SubStrLen := STRLEN(SubString);

      IF SubStrLen > Length THEN BEGIN
        SubString := COPYSTR(SubString,1,Length);
        SubStrLen := Length;
      END;

      IF Justification = Justification::Right THEN
        FOR I := 1 TO (Length - SubStrLen) DO
          SubString := Filler + SubString
      ELSE
        FOR I := SubStrLen + 1 TO Length DO
          SubString := SubString + Filler;

      IF STRLEN(PrnString) >= StartPos THEN
        IF StartPos > 1 THEN
          PrnString := COPYSTR(PrnString,1,StartPos - 1) + SubString + COPYSTR(PrnString,StartPos)
        ELSE
          PrnString := SubString + PrnString
      ELSE BEGIN
        FOR I := STRLEN(PrnString) + 1 TO StartPos - 1 DO
          PrnString := PrnString + ' ';
        PrnString := PrnString + SubString;
      END;
    END;

    LOCAL PROCEDURE ExportPrnString@11(VAR PrnString@1020000 : Text[250]);
    BEGIN
      PrnString := PADSTR(PrnString,RecordLength,' ');
      ExportFile.WRITE(PrnString);
      NoOfRec := NoOfRec + 1;
      PrnString := '';
    END;

    LOCAL PROCEDURE JulianDate@23(NormalDate@1020000 : Date) : Integer;
    VAR
      Year@1020002 : Integer;
      Days@1020001 : Integer;
    BEGIN
      Year := DATE2DMY(NormalDate,3);
      Days := (NormalDate - DMY2DATE(1,1,Year)) + 1;
      EXIT(Year * 1000 + Days);
    END;

    PROCEDURE CheckDigit@2(DigitString@1020000 : Code[20]) : Boolean;
    VAR
      Weight@1020006 : Code[8];
      Digit@1020005 : Integer;
      I@1020004 : Integer;
      Digit1@1020003 : Integer;
      Digit2@1020002 : Integer;
      CheckChar@1020001 : Code[1];
    BEGIN
      EXIT(TRUE);  // For Canada

      Weight := '37137137';
      Digit := 0;

      IF STRLEN(DigitString) <= STRLEN(Weight) THEN
        EXIT(FALSE);

      FOR I := 1 TO STRLEN(Weight) DO BEGIN
        EVALUATE(Digit1,COPYSTR(DigitString,I,1));
        EVALUATE(Digit2,COPYSTR(Weight,I,1));
        Digit := Digit + Digit1 * Digit2;
      END;

      Digit := 10 - Digit MOD 10;
      IF Digit = 10 THEN
        CheckChar := '0'
      ELSE
        CheckChar := FORMAT(Digit);
      EXIT(DigitString[STRLEN(Weight) + 1] = CheckChar[1]);
    END;

    LOCAL PROCEDURE BuildIDModifier@5();
    BEGIN
      ModifierValues[1] := 'A';
      ModifierValues[2] := 'B';
      ModifierValues[3] := 'C';
      ModifierValues[4] := 'D';
      ModifierValues[5] := 'E';
      ModifierValues[6] := 'F';
      ModifierValues[7] := 'G';
      ModifierValues[8] := 'H';
      ModifierValues[9] := 'I';
      ModifierValues[10] := 'J';
      ModifierValues[11] := 'K';
      ModifierValues[12] := 'L';
      ModifierValues[13] := 'M';
      ModifierValues[14] := 'N';
      ModifierValues[15] := 'O';
      ModifierValues[16] := 'P';
      ModifierValues[17] := 'Q';
      ModifierValues[18] := 'R';
      ModifierValues[19] := 'S';
      ModifierValues[20] := 'T';
      ModifierValues[21] := 'U';
      ModifierValues[22] := 'V';
      ModifierValues[23] := 'W';
      ModifierValues[24] := 'X';
      ModifierValues[25] := 'Y';
      ModifierValues[26] := 'Z';
    END;

    PROCEDURE TransmitExportedFile@16(BankAccountNo@1020001 : Code[20];FName@1020000 : Text);
    VAR
      ExportFullPathName@1020007 : Text;
      TransmitFullPathName@1020006 : Text;
    BEGIN
      WITH BankAccount DO BEGIN
        GET(BankAccountNo);
        TESTFIELD("E-Pay Export File Path");
        IF "E-Pay Export File Path"[STRLEN("E-Pay Export File Path")] <> '\' THEN
          ERROR(Text002,
            FIELDCAPTION("E-Pay Export File Path"),
            TABLECAPTION,
            "No.");
        TESTFIELD("E-Pay Trans. Program Path");
        IF "E-Pay Trans. Program Path"[STRLEN("E-Pay Trans. Program Path")] <> '\' THEN
          ERROR(Text002,
            FIELDCAPTION("E-Pay Trans. Program Path"),
            TABLECAPTION,
            "No.");
        ExportFullPathName := "E-Pay Export File Path" + FName;
        TransmitFullPathName := "E-Pay Trans. Program Path" + FName;

        IF NOT RBMgt.ClientFileExists(ExportFullPathName) THEN
          ERROR(Text006,FName);
        RBMgt.CopyClientFile(ExportFullPathName,TransmitFullPathName,TRUE);

        IF CONFIRM(Text021,TRUE,FName,"E-Pay Trans. Program Path",Name,TABLECAPTION,FIELDCAPTION("No."),"No.") THEN
          IF CONFIRM(Text047) THEN
            RBMgt.DeleteClientFile(ExportFullPathName);
      END;
    END;

    BEGIN
    END.
  }
}

